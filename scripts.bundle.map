{"version":3,"sources":["webpack:///scripts.bundle.js","webpack:///./~/socket.io-client/dist/socket.io.js?1a31","webpack:///./~/socket.io-client/dist/socket.io.js","webpack:///./~/script-loader/addScript.js"],"names":["webpackJsonp","438","module","exports","__webpack_require__","719","734","src","execScript","eval","call","742"],"mappings":"AAAAA,cAAc,EAAE,IAEVC,IACA,SAAUC,EAAQC,EAASC,GCHjCA,EAAA,KAAAA,EAAA,ODSMC,IACA,SAAUH,EAAQC,GEVxBD,EAAAC,QAAA;EFgBMG,IACA,SAAUJ,EAAQC,GGbxBD,EAAAC,QAAA,SAAAI,GACA,mBAAAC,YACAA,WAAAD,GAEAE,KAAAC,KAAA,KAAAH,KHyBMI,IACA,SAAUT,EAAQC,EAASC,GAEjCF,EAAOC,QAAUC,EAAoB,QAKlC","file":"scripts.bundle.js","sourcesContent":["webpackJsonp([1,3],{\n\n/***/ 438:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(734)(__webpack_require__(719))\n\n/***/ }),\n\n/***/ 719:\n/***/ (function(module, exports) {\n\nmodule.exports = \"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"io\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"io\\\"] = factory();\\n})(this, function() {\\nreturn /******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId])\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\texports: {},\\n/******/ \\t\\t\\tid: moduleId,\\n/******/ \\t\\t\\tloaded: false\\n/******/ \\t\\t};\\n\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.loaded = true;\\n\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n\\n\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(0);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\tvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar url = __webpack_require__(1);\\n\\tvar parser = __webpack_require__(7);\\n\\tvar Manager = __webpack_require__(17);\\n\\tvar debug = __webpack_require__(3)('socket.io-client');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = exports = lookup;\\n\\n\\t/**\\n\\t * Managers cache.\\n\\t */\\n\\n\\tvar cache = exports.managers = {};\\n\\n\\t/**\\n\\t * Looks up an existing `Manager` for multiplexing.\\n\\t * If the user summons:\\n\\t *\\n\\t *   `io('http://localhost/a');`\\n\\t *   `io('http://localhost/b');`\\n\\t *\\n\\t * We reuse the existing instance based on same scheme/port/host,\\n\\t * and we initialize sockets for each namespace.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction lookup(uri, opts) {\\n\\t  if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {\\n\\t    opts = uri;\\n\\t    uri = undefined;\\n\\t  }\\n\\n\\t  opts = opts || {};\\n\\n\\t  var parsed = url(uri);\\n\\t  var source = parsed.source;\\n\\t  var id = parsed.id;\\n\\t  var path = parsed.path;\\n\\t  var sameNamespace = cache[id] && path in cache[id].nsps;\\n\\t  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;\\n\\n\\t  var io;\\n\\n\\t  if (newConnection) {\\n\\t    debug('ignoring socket cache for %s', source);\\n\\t    io = Manager(source, opts);\\n\\t  } else {\\n\\t    if (!cache[id]) {\\n\\t      debug('new io instance for %s', source);\\n\\t      cache[id] = Manager(source, opts);\\n\\t    }\\n\\t    io = cache[id];\\n\\t  }\\n\\t  if (parsed.query && !opts.query) {\\n\\t    opts.query = parsed.query;\\n\\t  } else if (opts && 'object' === _typeof(opts.query)) {\\n\\t    opts.query = encodeQueryString(opts.query);\\n\\t  }\\n\\t  return io.socket(parsed.path, opts);\\n\\t}\\n\\t/**\\n\\t *  Helper method to parse query objects to string.\\n\\t * @param {object} query\\n\\t * @returns {string}\\n\\t */\\n\\tfunction encodeQueryString(obj) {\\n\\t  var str = [];\\n\\t  for (var p in obj) {\\n\\t    if (obj.hasOwnProperty(p)) {\\n\\t      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\\n\\t    }\\n\\t  }\\n\\t  return str.join('&');\\n\\t}\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.protocol = parser.protocol;\\n\\n\\t/**\\n\\t * `connect`.\\n\\t *\\n\\t * @param {String} uri\\n\\t * @api public\\n\\t */\\n\\n\\texports.connect = lookup;\\n\\n\\t/**\\n\\t * Expose constructors for standalone build.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Manager = __webpack_require__(17);\\n\\texports.Socket = __webpack_require__(44);\\n\\n/***/ },\\n/* 1 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parseuri = __webpack_require__(2);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:url');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = url;\\n\\n\\t/**\\n\\t * URL parser.\\n\\t *\\n\\t * @param {String} url\\n\\t * @param {Object} An object meant to mimic window.location.\\n\\t *                 Defaults to window.location.\\n\\t * @api public\\n\\t */\\n\\n\\tfunction url(uri, loc) {\\n\\t  var obj = uri;\\n\\n\\t  // default to window.location\\n\\t  loc = loc || global.location;\\n\\t  if (null == uri) uri = loc.protocol + '//' + loc.host;\\n\\n\\t  // relative path support\\n\\t  if ('string' === typeof uri) {\\n\\t    if ('/' === uri.charAt(0)) {\\n\\t      if ('/' === uri.charAt(1)) {\\n\\t        uri = loc.protocol + uri;\\n\\t      } else {\\n\\t        uri = loc.host + uri;\\n\\t      }\\n\\t    }\\n\\n\\t    if (!/^(https?|wss?):\\\\/\\\\//.test(uri)) {\\n\\t      debug('protocol-less url %s', uri);\\n\\t      if ('undefined' !== typeof loc) {\\n\\t        uri = loc.protocol + '//' + uri;\\n\\t      } else {\\n\\t        uri = 'https://' + uri;\\n\\t      }\\n\\t    }\\n\\n\\t    // parse\\n\\t    debug('parse %s', uri);\\n\\t    obj = parseuri(uri);\\n\\t  }\\n\\n\\t  // make sure we treat `localhost:80` and `localhost` equally\\n\\t  if (!obj.port) {\\n\\t    if (/^(http|ws)$/.test(obj.protocol)) {\\n\\t      obj.port = '80';\\n\\t    } else if (/^(http|ws)s$/.test(obj.protocol)) {\\n\\t      obj.port = '443';\\n\\t    }\\n\\t  }\\n\\n\\t  obj.path = obj.path || '/';\\n\\n\\t  var ipv6 = obj.host.indexOf(':') !== -1;\\n\\t  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\\n\\n\\t  // define unique id\\n\\t  obj.id = obj.protocol + '://' + host + ':' + obj.port;\\n\\t  // define href\\n\\t  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);\\n\\n\\t  return obj;\\n\\t}\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 2 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\r\\n\\t * Parses an URI\\r\\n\\t *\\r\\n\\t * @author Steven Levithan <stevenlevithan.com> (MIT license)\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tvar re = /^(?:(?![^:@]+:[^:@\\\\/]*@)(http|https|ws|wss):\\\\/\\\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\\\/?#]*)(?::(\\\\d*))?)(((\\\\/(?:[^?#](?![^?#\\\\/]*\\\\.[^?#\\\\/.]+(?:[?#]|$)))*\\\\/?)?([^?#\\\\/]*))(?:\\\\?([^#]*))?(?:#(.*))?)/;\\r\\n\\r\\n\\tvar parts = [\\r\\n\\t    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\\r\\n\\t];\\r\\n\\r\\n\\tmodule.exports = function parseuri(str) {\\r\\n\\t    var src = str,\\r\\n\\t        b = str.indexOf('['),\\r\\n\\t        e = str.indexOf(']');\\r\\n\\r\\n\\t    if (b != -1 && e != -1) {\\r\\n\\t        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\\r\\n\\t    }\\r\\n\\r\\n\\t    var m = re.exec(str || ''),\\r\\n\\t        uri = {},\\r\\n\\t        i = 14;\\r\\n\\r\\n\\t    while (i--) {\\r\\n\\t        uri[parts[i]] = m[i] || '';\\r\\n\\t    }\\r\\n\\r\\n\\t    if (b != -1 && e != -1) {\\r\\n\\t        uri.source = src;\\r\\n\\t        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\\r\\n\\t        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\\r\\n\\t        uri.ipv6uri = true;\\r\\n\\t    }\\r\\n\\r\\n\\t    return uri;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 3 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(process) {\\n\\t/**\\n\\t * This is the web browser implementation of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = __webpack_require__(5);\\n\\texports.log = log;\\n\\texports.formatArgs = formatArgs;\\n\\texports.save = save;\\n\\texports.load = load;\\n\\texports.useColors = useColors;\\n\\texports.storage = 'undefined' != typeof chrome\\n\\t               && 'undefined' != typeof chrome.storage\\n\\t                  ? chrome.storage.local\\n\\t                  : localstorage();\\n\\n\\t/**\\n\\t * Colors.\\n\\t */\\n\\n\\texports.colors = [\\n\\t  'lightseagreen',\\n\\t  'forestgreen',\\n\\t  'goldenrod',\\n\\t  'dodgerblue',\\n\\t  'darkorchid',\\n\\t  'crimson'\\n\\t];\\n\\n\\t/**\\n\\t * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n\\t * and the Firebug extension (any Firefox version) are known\\n\\t * to support \\\"%c\\\" CSS customizations.\\n\\t *\\n\\t * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n\\t */\\n\\n\\tfunction useColors() {\\n\\t  // is webkit? http://stackoverflow.com/a/16459606/376773\\n\\t  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\\n\\t  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||\\n\\t    // is firebug? http://stackoverflow.com/a/398120/376773\\n\\t    (window.console && (console.firebug || (console.exception && console.table))) ||\\n\\t    // is firefox >= v31?\\n\\t    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n\\t    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n\\t}\\n\\n\\t/**\\n\\t * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n\\t */\\n\\n\\texports.formatters.j = function(v) {\\n\\t  try {\\n\\t    return JSON.stringify(v);\\n\\t  } catch (err) {\\n\\t    return '[UnexpectedJSONParseError]: ' + err.message;\\n\\t  }\\n\\t};\\n\\n\\n\\t/**\\n\\t * Colorize log arguments if enabled.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction formatArgs() {\\n\\t  var args = arguments;\\n\\t  var useColors = this.useColors;\\n\\n\\t  args[0] = (useColors ? '%c' : '')\\n\\t    + this.namespace\\n\\t    + (useColors ? ' %c' : ' ')\\n\\t    + args[0]\\n\\t    + (useColors ? '%c ' : ' ')\\n\\t    + '+' + exports.humanize(this.diff);\\n\\n\\t  if (!useColors) return args;\\n\\n\\t  var c = 'color: ' + this.color;\\n\\t  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n\\t  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n\\t  // arguments passed either before or after the %c, so we need to\\n\\t  // figure out the correct index to insert the CSS into\\n\\t  var index = 0;\\n\\t  var lastC = 0;\\n\\t  args[0].replace(/%[a-z%]/g, function(match) {\\n\\t    if ('%%' === match) return;\\n\\t    index++;\\n\\t    if ('%c' === match) {\\n\\t      // we only are interested in the *last* %c\\n\\t      // (the user may have provided their own)\\n\\t      lastC = index;\\n\\t    }\\n\\t  });\\n\\n\\t  args.splice(lastC, 0, c);\\n\\t  return args;\\n\\t}\\n\\n\\t/**\\n\\t * Invokes `console.log()` when available.\\n\\t * No-op when `console.log` is not a \\\"function\\\".\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction log() {\\n\\t  // this hackery is required for IE8/9, where\\n\\t  // the `console.log` function doesn't have 'apply'\\n\\t  return 'object' === typeof console\\n\\t    && console.log\\n\\t    && Function.prototype.apply.call(console.log, console, arguments);\\n\\t}\\n\\n\\t/**\\n\\t * Save `namespaces`.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api private\\n\\t */\\n\\n\\tfunction save(namespaces) {\\n\\t  try {\\n\\t    if (null == namespaces) {\\n\\t      exports.storage.removeItem('debug');\\n\\t    } else {\\n\\t      exports.storage.debug = namespaces;\\n\\t    }\\n\\t  } catch(e) {}\\n\\t}\\n\\n\\t/**\\n\\t * Load `namespaces`.\\n\\t *\\n\\t * @return {String} returns the previously persisted debug modes\\n\\t * @api private\\n\\t */\\n\\n\\tfunction load() {\\n\\t  var r;\\n\\t  try {\\n\\t    return exports.storage.debug;\\n\\t  } catch(e) {}\\n\\n\\t  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\\n\\t  if (typeof process !== 'undefined' && 'env' in process) {\\n\\t    return process.env.DEBUG;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Enable namespaces listed in `localStorage.debug` initially.\\n\\t */\\n\\n\\texports.enable(load());\\n\\n\\t/**\\n\\t * Localstorage attempts to return the localstorage.\\n\\t *\\n\\t * This is necessary because safari throws\\n\\t * when a user disables cookies/localstorage\\n\\t * and you attempt to access it.\\n\\t *\\n\\t * @return {LocalStorage}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction localstorage(){\\n\\t  try {\\n\\t    return window.localStorage;\\n\\t  } catch (e) {}\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\\n\\n/***/ },\\n/* 4 */\\n/***/ function(module, exports) {\\n\\n\\t// shim for using process in browser\\n\\tvar process = module.exports = {};\\n\\n\\t// cached from whatever global is present so that test runners that stub it\\n\\t// don't break things.  But we need to wrap it in a try catch in case it is\\n\\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n\\t// function because try/catches deoptimize in certain engines.\\n\\n\\tvar cachedSetTimeout;\\n\\tvar cachedClearTimeout;\\n\\n\\tfunction defaultSetTimout() {\\n\\t    throw new Error('setTimeout has not been defined');\\n\\t}\\n\\tfunction defaultClearTimeout () {\\n\\t    throw new Error('clearTimeout has not been defined');\\n\\t}\\n\\t(function () {\\n\\t    try {\\n\\t        if (typeof setTimeout === 'function') {\\n\\t            cachedSetTimeout = setTimeout;\\n\\t        } else {\\n\\t            cachedSetTimeout = defaultSetTimout;\\n\\t        }\\n\\t    } catch (e) {\\n\\t        cachedSetTimeout = defaultSetTimout;\\n\\t    }\\n\\t    try {\\n\\t        if (typeof clearTimeout === 'function') {\\n\\t            cachedClearTimeout = clearTimeout;\\n\\t        } else {\\n\\t            cachedClearTimeout = defaultClearTimeout;\\n\\t        }\\n\\t    } catch (e) {\\n\\t        cachedClearTimeout = defaultClearTimeout;\\n\\t    }\\n\\t} ())\\n\\tfunction runTimeout(fun) {\\n\\t    if (cachedSetTimeout === setTimeout) {\\n\\t        //normal enviroments in sane situations\\n\\t        return setTimeout(fun, 0);\\n\\t    }\\n\\t    // if setTimeout wasn't available but was latter defined\\n\\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n\\t        cachedSetTimeout = setTimeout;\\n\\t        return setTimeout(fun, 0);\\n\\t    }\\n\\t    try {\\n\\t        // when when somebody has screwed with setTimeout but no I.E. maddness\\n\\t        return cachedSetTimeout(fun, 0);\\n\\t    } catch(e){\\n\\t        try {\\n\\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n\\t            return cachedSetTimeout.call(null, fun, 0);\\n\\t        } catch(e){\\n\\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n\\t            return cachedSetTimeout.call(this, fun, 0);\\n\\t        }\\n\\t    }\\n\\n\\n\\t}\\n\\tfunction runClearTimeout(marker) {\\n\\t    if (cachedClearTimeout === clearTimeout) {\\n\\t        //normal enviroments in sane situations\\n\\t        return clearTimeout(marker);\\n\\t    }\\n\\t    // if clearTimeout wasn't available but was latter defined\\n\\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n\\t        cachedClearTimeout = clearTimeout;\\n\\t        return clearTimeout(marker);\\n\\t    }\\n\\t    try {\\n\\t        // when when somebody has screwed with setTimeout but no I.E. maddness\\n\\t        return cachedClearTimeout(marker);\\n\\t    } catch (e){\\n\\t        try {\\n\\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n\\t            return cachedClearTimeout.call(null, marker);\\n\\t        } catch (e){\\n\\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n\\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n\\t            return cachedClearTimeout.call(this, marker);\\n\\t        }\\n\\t    }\\n\\n\\n\\n\\t}\\n\\tvar queue = [];\\n\\tvar draining = false;\\n\\tvar currentQueue;\\n\\tvar queueIndex = -1;\\n\\n\\tfunction cleanUpNextTick() {\\n\\t    if (!draining || !currentQueue) {\\n\\t        return;\\n\\t    }\\n\\t    draining = false;\\n\\t    if (currentQueue.length) {\\n\\t        queue = currentQueue.concat(queue);\\n\\t    } else {\\n\\t        queueIndex = -1;\\n\\t    }\\n\\t    if (queue.length) {\\n\\t        drainQueue();\\n\\t    }\\n\\t}\\n\\n\\tfunction drainQueue() {\\n\\t    if (draining) {\\n\\t        return;\\n\\t    }\\n\\t    var timeout = runTimeout(cleanUpNextTick);\\n\\t    draining = true;\\n\\n\\t    var len = queue.length;\\n\\t    while(len) {\\n\\t        currentQueue = queue;\\n\\t        queue = [];\\n\\t        while (++queueIndex < len) {\\n\\t            if (currentQueue) {\\n\\t                currentQueue[queueIndex].run();\\n\\t            }\\n\\t        }\\n\\t        queueIndex = -1;\\n\\t        len = queue.length;\\n\\t    }\\n\\t    currentQueue = null;\\n\\t    draining = false;\\n\\t    runClearTimeout(timeout);\\n\\t}\\n\\n\\tprocess.nextTick = function (fun) {\\n\\t    var args = new Array(arguments.length - 1);\\n\\t    if (arguments.length > 1) {\\n\\t        for (var i = 1; i < arguments.length; i++) {\\n\\t            args[i - 1] = arguments[i];\\n\\t        }\\n\\t    }\\n\\t    queue.push(new Item(fun, args));\\n\\t    if (queue.length === 1 && !draining) {\\n\\t        runTimeout(drainQueue);\\n\\t    }\\n\\t};\\n\\n\\t// v8 likes predictible objects\\n\\tfunction Item(fun, array) {\\n\\t    this.fun = fun;\\n\\t    this.array = array;\\n\\t}\\n\\tItem.prototype.run = function () {\\n\\t    this.fun.apply(null, this.array);\\n\\t};\\n\\tprocess.title = 'browser';\\n\\tprocess.browser = true;\\n\\tprocess.env = {};\\n\\tprocess.argv = [];\\n\\tprocess.version = ''; // empty string to avoid regexp issues\\n\\tprocess.versions = {};\\n\\n\\tfunction noop() {}\\n\\n\\tprocess.on = noop;\\n\\tprocess.addListener = noop;\\n\\tprocess.once = noop;\\n\\tprocess.off = noop;\\n\\tprocess.removeListener = noop;\\n\\tprocess.removeAllListeners = noop;\\n\\tprocess.emit = noop;\\n\\n\\tprocess.binding = function (name) {\\n\\t    throw new Error('process.binding is not supported');\\n\\t};\\n\\n\\tprocess.cwd = function () { return '/' };\\n\\tprocess.chdir = function (dir) {\\n\\t    throw new Error('process.chdir is not supported');\\n\\t};\\n\\tprocess.umask = function() { return 0; };\\n\\n\\n/***/ },\\n/* 5 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the common logic for both the Node.js and web browser\\n\\t * implementations of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = debug.debug = debug;\\n\\texports.coerce = coerce;\\n\\texports.disable = disable;\\n\\texports.enable = enable;\\n\\texports.enabled = enabled;\\n\\texports.humanize = __webpack_require__(6);\\n\\n\\t/**\\n\\t * The currently active debug mode names, and names to skip.\\n\\t */\\n\\n\\texports.names = [];\\n\\texports.skips = [];\\n\\n\\t/**\\n\\t * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n\\t *\\n\\t * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n\\t */\\n\\n\\texports.formatters = {};\\n\\n\\t/**\\n\\t * Previously assigned color.\\n\\t */\\n\\n\\tvar prevColor = 0;\\n\\n\\t/**\\n\\t * Previous log timestamp.\\n\\t */\\n\\n\\tvar prevTime;\\n\\n\\t/**\\n\\t * Select a color.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction selectColor() {\\n\\t  return exports.colors[prevColor++ % exports.colors.length];\\n\\t}\\n\\n\\t/**\\n\\t * Create a debugger with the given `namespace`.\\n\\t *\\n\\t * @param {String} namespace\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction debug(namespace) {\\n\\n\\t  // define the `disabled` version\\n\\t  function disabled() {\\n\\t  }\\n\\t  disabled.enabled = false;\\n\\n\\t  // define the `enabled` version\\n\\t  function enabled() {\\n\\n\\t    var self = enabled;\\n\\n\\t    // set `diff` timestamp\\n\\t    var curr = +new Date();\\n\\t    var ms = curr - (prevTime || curr);\\n\\t    self.diff = ms;\\n\\t    self.prev = prevTime;\\n\\t    self.curr = curr;\\n\\t    prevTime = curr;\\n\\n\\t    // add the `color` if not set\\n\\t    if (null == self.useColors) self.useColors = exports.useColors();\\n\\t    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n\\t    var args = new Array(arguments.length);\\n\\t    for (var i = 0; i < args.length; i++) {\\n\\t      args[i] = arguments[i];\\n\\t    }\\n\\n\\t    args[0] = exports.coerce(args[0]);\\n\\n\\t    if ('string' !== typeof args[0]) {\\n\\t      // anything else let's inspect with %o\\n\\t      args = ['%o'].concat(args);\\n\\t    }\\n\\n\\t    // apply any `formatters` transformations\\n\\t    var index = 0;\\n\\t    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n\\t      // if we encounter an escaped % then don't increase the array index\\n\\t      if (match === '%%') return match;\\n\\t      index++;\\n\\t      var formatter = exports.formatters[format];\\n\\t      if ('function' === typeof formatter) {\\n\\t        var val = args[index];\\n\\t        match = formatter.call(self, val);\\n\\n\\t        // now we need to remove `args[index]` since it's inlined in the `format`\\n\\t        args.splice(index, 1);\\n\\t        index--;\\n\\t      }\\n\\t      return match;\\n\\t    });\\n\\n\\t    // apply env-specific formatting\\n\\t    args = exports.formatArgs.apply(self, args);\\n\\n\\t    var logFn = enabled.log || exports.log || console.log.bind(console);\\n\\t    logFn.apply(self, args);\\n\\t  }\\n\\t  enabled.enabled = true;\\n\\n\\t  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n\\t  fn.namespace = namespace;\\n\\n\\t  return fn;\\n\\t}\\n\\n\\t/**\\n\\t * Enables a debug mode by namespaces. This can include modes\\n\\t * separated by a colon and wildcards.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enable(namespaces) {\\n\\t  exports.save(namespaces);\\n\\n\\t  var split = (namespaces || '').split(/[\\\\s,]+/);\\n\\t  var len = split.length;\\n\\n\\t  for (var i = 0; i < len; i++) {\\n\\t    if (!split[i]) continue; // ignore empty strings\\n\\t    namespaces = split[i].replace(/[\\\\\\\\^$+?.()|[\\\\]{}]/g, '\\\\\\\\$&').replace(/\\\\*/g, '.*?');\\n\\t    if (namespaces[0] === '-') {\\n\\t      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n\\t    } else {\\n\\t      exports.names.push(new RegExp('^' + namespaces + '$'));\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Disable debug output.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction disable() {\\n\\t  exports.enable('');\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if the given mode name is enabled, false otherwise.\\n\\t *\\n\\t * @param {String} name\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enabled(name) {\\n\\t  var i, len;\\n\\t  for (i = 0, len = exports.skips.length; i < len; i++) {\\n\\t    if (exports.skips[i].test(name)) {\\n\\t      return false;\\n\\t    }\\n\\t  }\\n\\t  for (i = 0, len = exports.names.length; i < len; i++) {\\n\\t    if (exports.names[i].test(name)) {\\n\\t      return true;\\n\\t    }\\n\\t  }\\n\\t  return false;\\n\\t}\\n\\n\\t/**\\n\\t * Coerce `val`.\\n\\t *\\n\\t * @param {Mixed} val\\n\\t * @return {Mixed}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction coerce(val) {\\n\\t  if (val instanceof Error) return val.stack || val.message;\\n\\t  return val;\\n\\t}\\n\\n\\n/***/ },\\n/* 6 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Helpers.\\n\\t */\\n\\n\\tvar s = 1000\\n\\tvar m = s * 60\\n\\tvar h = m * 60\\n\\tvar d = h * 24\\n\\tvar y = d * 365.25\\n\\n\\t/**\\n\\t * Parse or format the given `val`.\\n\\t *\\n\\t * Options:\\n\\t *\\n\\t *  - `long` verbose formatting [false]\\n\\t *\\n\\t * @param {String|Number} val\\n\\t * @param {Object} options\\n\\t * @throws {Error} throw an error if val is not a non-empty string or a number\\n\\t * @return {String|Number}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function (val, options) {\\n\\t  options = options || {}\\n\\t  var type = typeof val\\n\\t  if (type === 'string' && val.length > 0) {\\n\\t    return parse(val)\\n\\t  } else if (type === 'number' && isNaN(val) === false) {\\n\\t    return options.long ?\\n\\t\\t\\t\\tfmtLong(val) :\\n\\t\\t\\t\\tfmtShort(val)\\n\\t  }\\n\\t  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\\n\\t}\\n\\n\\t/**\\n\\t * Parse the given `str` and return milliseconds.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction parse(str) {\\n\\t  str = String(str)\\n\\t  if (str.length > 10000) {\\n\\t    return\\n\\t  }\\n\\t  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\\n\\t  if (!match) {\\n\\t    return\\n\\t  }\\n\\t  var n = parseFloat(match[1])\\n\\t  var type = (match[2] || 'ms').toLowerCase()\\n\\t  switch (type) {\\n\\t    case 'years':\\n\\t    case 'year':\\n\\t    case 'yrs':\\n\\t    case 'yr':\\n\\t    case 'y':\\n\\t      return n * y\\n\\t    case 'days':\\n\\t    case 'day':\\n\\t    case 'd':\\n\\t      return n * d\\n\\t    case 'hours':\\n\\t    case 'hour':\\n\\t    case 'hrs':\\n\\t    case 'hr':\\n\\t    case 'h':\\n\\t      return n * h\\n\\t    case 'minutes':\\n\\t    case 'minute':\\n\\t    case 'mins':\\n\\t    case 'min':\\n\\t    case 'm':\\n\\t      return n * m\\n\\t    case 'seconds':\\n\\t    case 'second':\\n\\t    case 'secs':\\n\\t    case 'sec':\\n\\t    case 's':\\n\\t      return n * s\\n\\t    case 'milliseconds':\\n\\t    case 'millisecond':\\n\\t    case 'msecs':\\n\\t    case 'msec':\\n\\t    case 'ms':\\n\\t      return n\\n\\t    default:\\n\\t      return undefined\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Short format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction fmtShort(ms) {\\n\\t  if (ms >= d) {\\n\\t    return Math.round(ms / d) + 'd'\\n\\t  }\\n\\t  if (ms >= h) {\\n\\t    return Math.round(ms / h) + 'h'\\n\\t  }\\n\\t  if (ms >= m) {\\n\\t    return Math.round(ms / m) + 'm'\\n\\t  }\\n\\t  if (ms >= s) {\\n\\t    return Math.round(ms / s) + 's'\\n\\t  }\\n\\t  return ms + 'ms'\\n\\t}\\n\\n\\t/**\\n\\t * Long format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction fmtLong(ms) {\\n\\t  return plural(ms, d, 'day') ||\\n\\t    plural(ms, h, 'hour') ||\\n\\t    plural(ms, m, 'minute') ||\\n\\t    plural(ms, s, 'second') ||\\n\\t    ms + ' ms'\\n\\t}\\n\\n\\t/**\\n\\t * Pluralization helper.\\n\\t */\\n\\n\\tfunction plural(ms, n, name) {\\n\\t  if (ms < n) {\\n\\t    return\\n\\t  }\\n\\t  if (ms < n * 1.5) {\\n\\t    return Math.floor(ms / n) + ' ' + name\\n\\t  }\\n\\t  return Math.ceil(ms / n) + ' ' + name + 's'\\n\\t}\\n\\n\\n/***/ },\\n/* 7 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar debug = __webpack_require__(8)('socket.io-parser');\\n\\tvar json = __webpack_require__(11);\\n\\tvar Emitter = __webpack_require__(13);\\n\\tvar binary = __webpack_require__(14);\\n\\tvar isBuf = __webpack_require__(16);\\n\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.protocol = 4;\\n\\n\\t/**\\n\\t * Packet types.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.types = [\\n\\t  'CONNECT',\\n\\t  'DISCONNECT',\\n\\t  'EVENT',\\n\\t  'ACK',\\n\\t  'ERROR',\\n\\t  'BINARY_EVENT',\\n\\t  'BINARY_ACK'\\n\\t];\\n\\n\\t/**\\n\\t * Packet type `connect`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.CONNECT = 0;\\n\\n\\t/**\\n\\t * Packet type `disconnect`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.DISCONNECT = 1;\\n\\n\\t/**\\n\\t * Packet type `event`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.EVENT = 2;\\n\\n\\t/**\\n\\t * Packet type `ack`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.ACK = 3;\\n\\n\\t/**\\n\\t * Packet type `error`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.ERROR = 4;\\n\\n\\t/**\\n\\t * Packet type 'binary event'\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.BINARY_EVENT = 5;\\n\\n\\t/**\\n\\t * Packet type `binary ack`. For acks with binary arguments.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.BINARY_ACK = 6;\\n\\n\\t/**\\n\\t * Encoder constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Encoder = Encoder;\\n\\n\\t/**\\n\\t * Decoder constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Decoder = Decoder;\\n\\n\\t/**\\n\\t * A socket.io Encoder instance\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Encoder() {}\\n\\n\\t/**\\n\\t * Encode a packet as a single string if non-binary, or as a\\n\\t * buffer sequence, depending on packet type.\\n\\t *\\n\\t * @param {Object} obj - packet object\\n\\t * @param {Function} callback - function to handle encodings (likely engine.write)\\n\\t * @return Calls callback with Array of encodings\\n\\t * @api public\\n\\t */\\n\\n\\tEncoder.prototype.encode = function(obj, callback){\\n\\t  debug('encoding packet %j', obj);\\n\\n\\t  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n\\t    encodeAsBinary(obj, callback);\\n\\t  }\\n\\t  else {\\n\\t    var encoding = encodeAsString(obj);\\n\\t    callback([encoding]);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Encode packet as string.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {String} encoded\\n\\t * @api private\\n\\t */\\n\\n\\tfunction encodeAsString(obj) {\\n\\t  var str = '';\\n\\t  var nsp = false;\\n\\n\\t  // first is type\\n\\t  str += obj.type;\\n\\n\\t  // attachments if we have them\\n\\t  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n\\t    str += obj.attachments;\\n\\t    str += '-';\\n\\t  }\\n\\n\\t  // if we have a namespace other than `/`\\n\\t  // we append it followed by a comma `,`\\n\\t  if (obj.nsp && '/' != obj.nsp) {\\n\\t    nsp = true;\\n\\t    str += obj.nsp;\\n\\t  }\\n\\n\\t  // immediately followed by the id\\n\\t  if (null != obj.id) {\\n\\t    if (nsp) {\\n\\t      str += ',';\\n\\t      nsp = false;\\n\\t    }\\n\\t    str += obj.id;\\n\\t  }\\n\\n\\t  // json data\\n\\t  if (null != obj.data) {\\n\\t    if (nsp) str += ',';\\n\\t    str += json.stringify(obj.data);\\n\\t  }\\n\\n\\t  debug('encoded %j as %s', obj, str);\\n\\t  return str;\\n\\t}\\n\\n\\t/**\\n\\t * Encode packet as 'buffer sequence' by removing blobs, and\\n\\t * deconstructing packet into object with placeholders and\\n\\t * a list of buffers.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {Buffer} encoded\\n\\t * @api private\\n\\t */\\n\\n\\tfunction encodeAsBinary(obj, callback) {\\n\\n\\t  function writeEncoding(bloblessData) {\\n\\t    var deconstruction = binary.deconstructPacket(bloblessData);\\n\\t    var pack = encodeAsString(deconstruction.packet);\\n\\t    var buffers = deconstruction.buffers;\\n\\n\\t    buffers.unshift(pack); // add packet info to beginning of data list\\n\\t    callback(buffers); // write all the buffers\\n\\t  }\\n\\n\\t  binary.removeBlobs(obj, writeEncoding);\\n\\t}\\n\\n\\t/**\\n\\t * A socket.io Decoder instance\\n\\t *\\n\\t * @return {Object} decoder\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Decoder() {\\n\\t  this.reconstructor = null;\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter` with Decoder.\\n\\t */\\n\\n\\tEmitter(Decoder.prototype);\\n\\n\\t/**\\n\\t * Decodes an ecoded packet string into packet JSON.\\n\\t *\\n\\t * @param {String} obj - encoded packet\\n\\t * @return {Object} packet\\n\\t * @api public\\n\\t */\\n\\n\\tDecoder.prototype.add = function(obj) {\\n\\t  var packet;\\n\\t  if ('string' == typeof obj) {\\n\\t    packet = decodeString(obj);\\n\\t    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\\n\\t      this.reconstructor = new BinaryReconstructor(packet);\\n\\n\\t      // no attachments, labeled binary but no binary data to follow\\n\\t      if (this.reconstructor.reconPack.attachments === 0) {\\n\\t        this.emit('decoded', packet);\\n\\t      }\\n\\t    } else { // non-binary full packet\\n\\t      this.emit('decoded', packet);\\n\\t    }\\n\\t  }\\n\\t  else if (isBuf(obj) || obj.base64) { // raw binary data\\n\\t    if (!this.reconstructor) {\\n\\t      throw new Error('got binary data when not reconstructing a packet');\\n\\t    } else {\\n\\t      packet = this.reconstructor.takeBinaryData(obj);\\n\\t      if (packet) { // received final buffer\\n\\t        this.reconstructor = null;\\n\\t        this.emit('decoded', packet);\\n\\t      }\\n\\t    }\\n\\t  }\\n\\t  else {\\n\\t    throw new Error('Unknown type: ' + obj);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Decode a packet String (JSON data)\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tfunction decodeString(str) {\\n\\t  var p = {};\\n\\t  var i = 0;\\n\\n\\t  // look up type\\n\\t  p.type = Number(str.charAt(0));\\n\\t  if (null == exports.types[p.type]) return error();\\n\\n\\t  // look up attachments if type binary\\n\\t  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\\n\\t    var buf = '';\\n\\t    while (str.charAt(++i) != '-') {\\n\\t      buf += str.charAt(i);\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t    if (buf != Number(buf) || str.charAt(i) != '-') {\\n\\t      throw new Error('Illegal attachments');\\n\\t    }\\n\\t    p.attachments = Number(buf);\\n\\t  }\\n\\n\\t  // look up namespace (if any)\\n\\t  if ('/' == str.charAt(i + 1)) {\\n\\t    p.nsp = '';\\n\\t    while (++i) {\\n\\t      var c = str.charAt(i);\\n\\t      if (',' == c) break;\\n\\t      p.nsp += c;\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t  } else {\\n\\t    p.nsp = '/';\\n\\t  }\\n\\n\\t  // look up id\\n\\t  var next = str.charAt(i + 1);\\n\\t  if ('' !== next && Number(next) == next) {\\n\\t    p.id = '';\\n\\t    while (++i) {\\n\\t      var c = str.charAt(i);\\n\\t      if (null == c || Number(c) != c) {\\n\\t        --i;\\n\\t        break;\\n\\t      }\\n\\t      p.id += str.charAt(i);\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t    p.id = Number(p.id);\\n\\t  }\\n\\n\\t  // look up json data\\n\\t  if (str.charAt(++i)) {\\n\\t    p = tryParse(p, str.substr(i));\\n\\t  }\\n\\n\\t  debug('decoded %s as %j', str, p);\\n\\t  return p;\\n\\t}\\n\\n\\tfunction tryParse(p, str) {\\n\\t  try {\\n\\t    p.data = json.parse(str);\\n\\t  } catch(e){\\n\\t    return error();\\n\\t  }\\n\\t  return p; \\n\\t};\\n\\n\\t/**\\n\\t * Deallocates a parser's resources\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tDecoder.prototype.destroy = function() {\\n\\t  if (this.reconstructor) {\\n\\t    this.reconstructor.finishedReconstruction();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * A manager of a binary event's 'buffer sequence'. Should\\n\\t * be constructed whenever a packet of type BINARY_EVENT is\\n\\t * decoded.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {BinaryReconstructor} initialized reconstructor\\n\\t * @api private\\n\\t */\\n\\n\\tfunction BinaryReconstructor(packet) {\\n\\t  this.reconPack = packet;\\n\\t  this.buffers = [];\\n\\t}\\n\\n\\t/**\\n\\t * Method to be called when binary data received from connection\\n\\t * after a BINARY_EVENT packet.\\n\\t *\\n\\t * @param {Buffer | ArrayBuffer} binData - the raw binary data received\\n\\t * @return {null | Object} returns null if more binary data is expected or\\n\\t *   a reconstructed packet object if all buffers have been received.\\n\\t * @api private\\n\\t */\\n\\n\\tBinaryReconstructor.prototype.takeBinaryData = function(binData) {\\n\\t  this.buffers.push(binData);\\n\\t  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\\n\\t    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\\n\\t    this.finishedReconstruction();\\n\\t    return packet;\\n\\t  }\\n\\t  return null;\\n\\t};\\n\\n\\t/**\\n\\t * Cleans up binary packet reconstruction variables.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tBinaryReconstructor.prototype.finishedReconstruction = function() {\\n\\t  this.reconPack = null;\\n\\t  this.buffers = [];\\n\\t};\\n\\n\\tfunction error(data){\\n\\t  return {\\n\\t    type: exports.ERROR,\\n\\t    data: 'parser error'\\n\\t  };\\n\\t}\\n\\n\\n/***/ },\\n/* 8 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the web browser implementation of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = __webpack_require__(9);\\n\\texports.log = log;\\n\\texports.formatArgs = formatArgs;\\n\\texports.save = save;\\n\\texports.load = load;\\n\\texports.useColors = useColors;\\n\\texports.storage = 'undefined' != typeof chrome\\n\\t               && 'undefined' != typeof chrome.storage\\n\\t                  ? chrome.storage.local\\n\\t                  : localstorage();\\n\\n\\t/**\\n\\t * Colors.\\n\\t */\\n\\n\\texports.colors = [\\n\\t  'lightseagreen',\\n\\t  'forestgreen',\\n\\t  'goldenrod',\\n\\t  'dodgerblue',\\n\\t  'darkorchid',\\n\\t  'crimson'\\n\\t];\\n\\n\\t/**\\n\\t * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n\\t * and the Firebug extension (any Firefox version) are known\\n\\t * to support \\\"%c\\\" CSS customizations.\\n\\t *\\n\\t * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n\\t */\\n\\n\\tfunction useColors() {\\n\\t  // is webkit? http://stackoverflow.com/a/16459606/376773\\n\\t  return ('WebkitAppearance' in document.documentElement.style) ||\\n\\t    // is firebug? http://stackoverflow.com/a/398120/376773\\n\\t    (window.console && (console.firebug || (console.exception && console.table))) ||\\n\\t    // is firefox >= v31?\\n\\t    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n\\t    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n\\t}\\n\\n\\t/**\\n\\t * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n\\t */\\n\\n\\texports.formatters.j = function(v) {\\n\\t  return JSON.stringify(v);\\n\\t};\\n\\n\\n\\t/**\\n\\t * Colorize log arguments if enabled.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction formatArgs() {\\n\\t  var args = arguments;\\n\\t  var useColors = this.useColors;\\n\\n\\t  args[0] = (useColors ? '%c' : '')\\n\\t    + this.namespace\\n\\t    + (useColors ? ' %c' : ' ')\\n\\t    + args[0]\\n\\t    + (useColors ? '%c ' : ' ')\\n\\t    + '+' + exports.humanize(this.diff);\\n\\n\\t  if (!useColors) return args;\\n\\n\\t  var c = 'color: ' + this.color;\\n\\t  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n\\t  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n\\t  // arguments passed either before or after the %c, so we need to\\n\\t  // figure out the correct index to insert the CSS into\\n\\t  var index = 0;\\n\\t  var lastC = 0;\\n\\t  args[0].replace(/%[a-z%]/g, function(match) {\\n\\t    if ('%%' === match) return;\\n\\t    index++;\\n\\t    if ('%c' === match) {\\n\\t      // we only are interested in the *last* %c\\n\\t      // (the user may have provided their own)\\n\\t      lastC = index;\\n\\t    }\\n\\t  });\\n\\n\\t  args.splice(lastC, 0, c);\\n\\t  return args;\\n\\t}\\n\\n\\t/**\\n\\t * Invokes `console.log()` when available.\\n\\t * No-op when `console.log` is not a \\\"function\\\".\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction log() {\\n\\t  // this hackery is required for IE8/9, where\\n\\t  // the `console.log` function doesn't have 'apply'\\n\\t  return 'object' === typeof console\\n\\t    && console.log\\n\\t    && Function.prototype.apply.call(console.log, console, arguments);\\n\\t}\\n\\n\\t/**\\n\\t * Save `namespaces`.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api private\\n\\t */\\n\\n\\tfunction save(namespaces) {\\n\\t  try {\\n\\t    if (null == namespaces) {\\n\\t      exports.storage.removeItem('debug');\\n\\t    } else {\\n\\t      exports.storage.debug = namespaces;\\n\\t    }\\n\\t  } catch(e) {}\\n\\t}\\n\\n\\t/**\\n\\t * Load `namespaces`.\\n\\t *\\n\\t * @return {String} returns the previously persisted debug modes\\n\\t * @api private\\n\\t */\\n\\n\\tfunction load() {\\n\\t  var r;\\n\\t  try {\\n\\t    r = exports.storage.debug;\\n\\t  } catch(e) {}\\n\\t  return r;\\n\\t}\\n\\n\\t/**\\n\\t * Enable namespaces listed in `localStorage.debug` initially.\\n\\t */\\n\\n\\texports.enable(load());\\n\\n\\t/**\\n\\t * Localstorage attempts to return the localstorage.\\n\\t *\\n\\t * This is necessary because safari throws\\n\\t * when a user disables cookies/localstorage\\n\\t * and you attempt to access it.\\n\\t *\\n\\t * @return {LocalStorage}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction localstorage(){\\n\\t  try {\\n\\t    return window.localStorage;\\n\\t  } catch (e) {}\\n\\t}\\n\\n\\n/***/ },\\n/* 9 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the common logic for both the Node.js and web browser\\n\\t * implementations of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = debug;\\n\\texports.coerce = coerce;\\n\\texports.disable = disable;\\n\\texports.enable = enable;\\n\\texports.enabled = enabled;\\n\\texports.humanize = __webpack_require__(10);\\n\\n\\t/**\\n\\t * The currently active debug mode names, and names to skip.\\n\\t */\\n\\n\\texports.names = [];\\n\\texports.skips = [];\\n\\n\\t/**\\n\\t * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n\\t *\\n\\t * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n\\t */\\n\\n\\texports.formatters = {};\\n\\n\\t/**\\n\\t * Previously assigned color.\\n\\t */\\n\\n\\tvar prevColor = 0;\\n\\n\\t/**\\n\\t * Previous log timestamp.\\n\\t */\\n\\n\\tvar prevTime;\\n\\n\\t/**\\n\\t * Select a color.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction selectColor() {\\n\\t  return exports.colors[prevColor++ % exports.colors.length];\\n\\t}\\n\\n\\t/**\\n\\t * Create a debugger with the given `namespace`.\\n\\t *\\n\\t * @param {String} namespace\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction debug(namespace) {\\n\\n\\t  // define the `disabled` version\\n\\t  function disabled() {\\n\\t  }\\n\\t  disabled.enabled = false;\\n\\n\\t  // define the `enabled` version\\n\\t  function enabled() {\\n\\n\\t    var self = enabled;\\n\\n\\t    // set `diff` timestamp\\n\\t    var curr = +new Date();\\n\\t    var ms = curr - (prevTime || curr);\\n\\t    self.diff = ms;\\n\\t    self.prev = prevTime;\\n\\t    self.curr = curr;\\n\\t    prevTime = curr;\\n\\n\\t    // add the `color` if not set\\n\\t    if (null == self.useColors) self.useColors = exports.useColors();\\n\\t    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n\\t    var args = Array.prototype.slice.call(arguments);\\n\\n\\t    args[0] = exports.coerce(args[0]);\\n\\n\\t    if ('string' !== typeof args[0]) {\\n\\t      // anything else let's inspect with %o\\n\\t      args = ['%o'].concat(args);\\n\\t    }\\n\\n\\t    // apply any `formatters` transformations\\n\\t    var index = 0;\\n\\t    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n\\t      // if we encounter an escaped % then don't increase the array index\\n\\t      if (match === '%%') return match;\\n\\t      index++;\\n\\t      var formatter = exports.formatters[format];\\n\\t      if ('function' === typeof formatter) {\\n\\t        var val = args[index];\\n\\t        match = formatter.call(self, val);\\n\\n\\t        // now we need to remove `args[index]` since it's inlined in the `format`\\n\\t        args.splice(index, 1);\\n\\t        index--;\\n\\t      }\\n\\t      return match;\\n\\t    });\\n\\n\\t    if ('function' === typeof exports.formatArgs) {\\n\\t      args = exports.formatArgs.apply(self, args);\\n\\t    }\\n\\t    var logFn = enabled.log || exports.log || console.log.bind(console);\\n\\t    logFn.apply(self, args);\\n\\t  }\\n\\t  enabled.enabled = true;\\n\\n\\t  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n\\t  fn.namespace = namespace;\\n\\n\\t  return fn;\\n\\t}\\n\\n\\t/**\\n\\t * Enables a debug mode by namespaces. This can include modes\\n\\t * separated by a colon and wildcards.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enable(namespaces) {\\n\\t  exports.save(namespaces);\\n\\n\\t  var split = (namespaces || '').split(/[\\\\s,]+/);\\n\\t  var len = split.length;\\n\\n\\t  for (var i = 0; i < len; i++) {\\n\\t    if (!split[i]) continue; // ignore empty strings\\n\\t    namespaces = split[i].replace(/\\\\*/g, '.*?');\\n\\t    if (namespaces[0] === '-') {\\n\\t      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n\\t    } else {\\n\\t      exports.names.push(new RegExp('^' + namespaces + '$'));\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Disable debug output.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction disable() {\\n\\t  exports.enable('');\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if the given mode name is enabled, false otherwise.\\n\\t *\\n\\t * @param {String} name\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enabled(name) {\\n\\t  var i, len;\\n\\t  for (i = 0, len = exports.skips.length; i < len; i++) {\\n\\t    if (exports.skips[i].test(name)) {\\n\\t      return false;\\n\\t    }\\n\\t  }\\n\\t  for (i = 0, len = exports.names.length; i < len; i++) {\\n\\t    if (exports.names[i].test(name)) {\\n\\t      return true;\\n\\t    }\\n\\t  }\\n\\t  return false;\\n\\t}\\n\\n\\t/**\\n\\t * Coerce `val`.\\n\\t *\\n\\t * @param {Mixed} val\\n\\t * @return {Mixed}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction coerce(val) {\\n\\t  if (val instanceof Error) return val.stack || val.message;\\n\\t  return val;\\n\\t}\\n\\n\\n/***/ },\\n/* 10 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Helpers.\\n\\t */\\n\\n\\tvar s = 1000;\\n\\tvar m = s * 60;\\n\\tvar h = m * 60;\\n\\tvar d = h * 24;\\n\\tvar y = d * 365.25;\\n\\n\\t/**\\n\\t * Parse or format the given `val`.\\n\\t *\\n\\t * Options:\\n\\t *\\n\\t *  - `long` verbose formatting [false]\\n\\t *\\n\\t * @param {String|Number} val\\n\\t * @param {Object} options\\n\\t * @return {String|Number}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(val, options){\\n\\t  options = options || {};\\n\\t  if ('string' == typeof val) return parse(val);\\n\\t  return options.long\\n\\t    ? long(val)\\n\\t    : short(val);\\n\\t};\\n\\n\\t/**\\n\\t * Parse the given `str` and return milliseconds.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction parse(str) {\\n\\t  str = '' + str;\\n\\t  if (str.length > 10000) return;\\n\\t  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\\n\\t  if (!match) return;\\n\\t  var n = parseFloat(match[1]);\\n\\t  var type = (match[2] || 'ms').toLowerCase();\\n\\t  switch (type) {\\n\\t    case 'years':\\n\\t    case 'year':\\n\\t    case 'yrs':\\n\\t    case 'yr':\\n\\t    case 'y':\\n\\t      return n * y;\\n\\t    case 'days':\\n\\t    case 'day':\\n\\t    case 'd':\\n\\t      return n * d;\\n\\t    case 'hours':\\n\\t    case 'hour':\\n\\t    case 'hrs':\\n\\t    case 'hr':\\n\\t    case 'h':\\n\\t      return n * h;\\n\\t    case 'minutes':\\n\\t    case 'minute':\\n\\t    case 'mins':\\n\\t    case 'min':\\n\\t    case 'm':\\n\\t      return n * m;\\n\\t    case 'seconds':\\n\\t    case 'second':\\n\\t    case 'secs':\\n\\t    case 'sec':\\n\\t    case 's':\\n\\t      return n * s;\\n\\t    case 'milliseconds':\\n\\t    case 'millisecond':\\n\\t    case 'msecs':\\n\\t    case 'msec':\\n\\t    case 'ms':\\n\\t      return n;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Short format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction short(ms) {\\n\\t  if (ms >= d) return Math.round(ms / d) + 'd';\\n\\t  if (ms >= h) return Math.round(ms / h) + 'h';\\n\\t  if (ms >= m) return Math.round(ms / m) + 'm';\\n\\t  if (ms >= s) return Math.round(ms / s) + 's';\\n\\t  return ms + 'ms';\\n\\t}\\n\\n\\t/**\\n\\t * Long format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction long(ms) {\\n\\t  return plural(ms, d, 'day')\\n\\t    || plural(ms, h, 'hour')\\n\\t    || plural(ms, m, 'minute')\\n\\t    || plural(ms, s, 'second')\\n\\t    || ms + ' ms';\\n\\t}\\n\\n\\t/**\\n\\t * Pluralization helper.\\n\\t */\\n\\n\\tfunction plural(ms, n, name) {\\n\\t  if (ms < n) return;\\n\\t  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\\n\\t  return Math.ceil(ms / n) + ' ' + name + 's';\\n\\t}\\n\\n\\n/***/ },\\n/* 11 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(module, global) {/*** IMPORTS FROM imports-loader ***/\\n\\tvar define = false;\\n\\n\\t/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\\n\\t;(function () {\\n\\t  // Detect the `define` function exposed by asynchronous module loaders. The\\n\\t  // strict `define` check is necessary for compatibility with `r.js`.\\n\\t  var isLoader = typeof define === \\\"function\\\" && define.amd;\\n\\n\\t  // A set of types used to distinguish objects from primitives.\\n\\t  var objectTypes = {\\n\\t    \\\"function\\\": true,\\n\\t    \\\"object\\\": true\\n\\t  };\\n\\n\\t  // Detect the `exports` object exposed by CommonJS implementations.\\n\\t  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\\n\\n\\t  // Use the `global` object exposed by Node (including Browserify via\\n\\t  // `insert-module-globals`), Narwhal, and Ringo as the default context,\\n\\t  // and the `window` object in browsers. Rhino exports a `global` function\\n\\t  // instead.\\n\\t  var root = objectTypes[typeof window] && window || this,\\n\\t      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \\\"object\\\" && global;\\n\\n\\t  if (freeGlobal && (freeGlobal[\\\"global\\\"] === freeGlobal || freeGlobal[\\\"window\\\"] === freeGlobal || freeGlobal[\\\"self\\\"] === freeGlobal)) {\\n\\t    root = freeGlobal;\\n\\t  }\\n\\n\\t  // Public: Initializes JSON 3 using the given `context` object, attaching the\\n\\t  // `stringify` and `parse` functions to the specified `exports` object.\\n\\t  function runInContext(context, exports) {\\n\\t    context || (context = root[\\\"Object\\\"]());\\n\\t    exports || (exports = root[\\\"Object\\\"]());\\n\\n\\t    // Native constructor aliases.\\n\\t    var Number = context[\\\"Number\\\"] || root[\\\"Number\\\"],\\n\\t        String = context[\\\"String\\\"] || root[\\\"String\\\"],\\n\\t        Object = context[\\\"Object\\\"] || root[\\\"Object\\\"],\\n\\t        Date = context[\\\"Date\\\"] || root[\\\"Date\\\"],\\n\\t        SyntaxError = context[\\\"SyntaxError\\\"] || root[\\\"SyntaxError\\\"],\\n\\t        TypeError = context[\\\"TypeError\\\"] || root[\\\"TypeError\\\"],\\n\\t        Math = context[\\\"Math\\\"] || root[\\\"Math\\\"],\\n\\t        nativeJSON = context[\\\"JSON\\\"] || root[\\\"JSON\\\"];\\n\\n\\t    // Delegate to the native `stringify` and `parse` implementations.\\n\\t    if (typeof nativeJSON == \\\"object\\\" && nativeJSON) {\\n\\t      exports.stringify = nativeJSON.stringify;\\n\\t      exports.parse = nativeJSON.parse;\\n\\t    }\\n\\n\\t    // Convenience aliases.\\n\\t    var objectProto = Object.prototype,\\n\\t        getClass = objectProto.toString,\\n\\t        isProperty, forEach, undef;\\n\\n\\t    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\\n\\t    var isExtended = new Date(-3509827334573292);\\n\\t    try {\\n\\t      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\\n\\t      // results for certain dates in Opera >= 10.53.\\n\\t      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\\n\\t        // Safari < 2.0.2 stores the internal millisecond time value correctly,\\n\\t        // but clips the values returned by the date methods to the range of\\n\\t        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\\n\\t        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\\n\\t    } catch (exception) {}\\n\\n\\t    // Internal: Determines whether the native `JSON.stringify` and `parse`\\n\\t    // implementations are spec-compliant. Based on work by Ken Snyder.\\n\\t    function has(name) {\\n\\t      if (has[name] !== undef) {\\n\\t        // Return cached feature test result.\\n\\t        return has[name];\\n\\t      }\\n\\t      var isSupported;\\n\\t      if (name == \\\"bug-string-char-index\\\") {\\n\\t        // IE <= 7 doesn't support accessing string characters using square\\n\\t        // bracket notation. IE 8 only supports this for primitives.\\n\\t        isSupported = \\\"a\\\"[0] != \\\"a\\\";\\n\\t      } else if (name == \\\"json\\\") {\\n\\t        // Indicates whether both `JSON.stringify` and `JSON.parse` are\\n\\t        // supported.\\n\\t        isSupported = has(\\\"json-stringify\\\") && has(\\\"json-parse\\\");\\n\\t      } else {\\n\\t        var value, serialized = '{\\\"a\\\":[1,true,false,null,\\\"\\\\\\\\u0000\\\\\\\\b\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\t\\\"]}';\\n\\t        // Test `JSON.stringify`.\\n\\t        if (name == \\\"json-stringify\\\") {\\n\\t          var stringify = exports.stringify, stringifySupported = typeof stringify == \\\"function\\\" && isExtended;\\n\\t          if (stringifySupported) {\\n\\t            // A test function object with a custom `toJSON` method.\\n\\t            (value = function () {\\n\\t              return 1;\\n\\t            }).toJSON = value;\\n\\t            try {\\n\\t              stringifySupported =\\n\\t                // Firefox 3.1b1 and b2 serialize string, number, and boolean\\n\\t                // primitives as object literals.\\n\\t                stringify(0) === \\\"0\\\" &&\\n\\t                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\\n\\t                // literals.\\n\\t                stringify(new Number()) === \\\"0\\\" &&\\n\\t                stringify(new String()) == '\\\"\\\"' &&\\n\\t                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\\n\\t                // does not define a canonical JSON representation (this applies to\\n\\t                // objects with `toJSON` properties as well, *unless* they are nested\\n\\t                // within an object or array).\\n\\t                stringify(getClass) === undef &&\\n\\t                // IE 8 serializes `undefined` as `\\\"undefined\\\"`. Safari <= 5.1.7 and\\n\\t                // FF 3.1b3 pass this test.\\n\\t                stringify(undef) === undef &&\\n\\t                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\\n\\t                // respectively, if the value is omitted entirely.\\n\\t                stringify() === undef &&\\n\\t                // FF 3.1b1, 2 throw an error if the given value is not a number,\\n\\t                // string, array, object, Boolean, or `null` literal. This applies to\\n\\t                // objects with custom `toJSON` methods as well, unless they are nested\\n\\t                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\\n\\t                // methods entirely.\\n\\t                stringify(value) === \\\"1\\\" &&\\n\\t                stringify([value]) == \\\"[1]\\\" &&\\n\\t                // Prototype <= 1.6.1 serializes `[undefined]` as `\\\"[]\\\"` instead of\\n\\t                // `\\\"[null]\\\"`.\\n\\t                stringify([undef]) == \\\"[null]\\\" &&\\n\\t                // YUI 3.0.0b1 fails to serialize `null` literals.\\n\\t                stringify(null) == \\\"null\\\" &&\\n\\t                // FF 3.1b1, 2 halts serialization if an array contains a function:\\n\\t                // `[1, true, getClass, 1]` serializes as \\\"[1,true,],\\\". FF 3.1b3\\n\\t                // elides non-JSON values from objects and arrays, unless they\\n\\t                // define custom `toJSON` methods.\\n\\t                stringify([undef, getClass, null]) == \\\"[null,null,null]\\\" &&\\n\\t                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\\n\\t                // where character escape codes are expected (e.g., `\\\\b` => `\\\\u0008`).\\n\\t                stringify({ \\\"a\\\": [value, true, false, null, \\\"\\\\x00\\\\b\\\\n\\\\f\\\\r\\\\t\\\"] }) == serialized &&\\n\\t                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\\n\\t                stringify(null, value) === \\\"1\\\" &&\\n\\t                stringify([1, 2], null, 1) == \\\"[\\\\n 1,\\\\n 2\\\\n]\\\" &&\\n\\t                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\\n\\t                // serialize extended years.\\n\\t                stringify(new Date(-8.64e15)) == '\\\"-271821-04-20T00:00:00.000Z\\\"' &&\\n\\t                // The milliseconds are optional in ES 5, but required in 5.1.\\n\\t                stringify(new Date(8.64e15)) == '\\\"+275760-09-13T00:00:00.000Z\\\"' &&\\n\\t                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\\n\\t                // four-digit years instead of six-digit years. Credits: @Yaffle.\\n\\t                stringify(new Date(-621987552e5)) == '\\\"-000001-01-01T00:00:00.000Z\\\"' &&\\n\\t                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\\n\\t                // values less than 1000. Credits: @Yaffle.\\n\\t                stringify(new Date(-1)) == '\\\"1969-12-31T23:59:59.999Z\\\"';\\n\\t            } catch (exception) {\\n\\t              stringifySupported = false;\\n\\t            }\\n\\t          }\\n\\t          isSupported = stringifySupported;\\n\\t        }\\n\\t        // Test `JSON.parse`.\\n\\t        if (name == \\\"json-parse\\\") {\\n\\t          var parse = exports.parse;\\n\\t          if (typeof parse == \\\"function\\\") {\\n\\t            try {\\n\\t              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\\n\\t              // Conforming implementations should also coerce the initial argument to\\n\\t              // a string prior to parsing.\\n\\t              if (parse(\\\"0\\\") === 0 && !parse(false)) {\\n\\t                // Simple parsing test.\\n\\t                value = parse(serialized);\\n\\t                var parseSupported = value[\\\"a\\\"].length == 5 && value[\\\"a\\\"][0] === 1;\\n\\t                if (parseSupported) {\\n\\t                  try {\\n\\t                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\\n\\t                    parseSupported = !parse('\\\"\\\\t\\\"');\\n\\t                  } catch (exception) {}\\n\\t                  if (parseSupported) {\\n\\t                    try {\\n\\t                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\\n\\t                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\\n\\t                      // certain octal literals.\\n\\t                      parseSupported = parse(\\\"01\\\") !== 1;\\n\\t                    } catch (exception) {}\\n\\t                  }\\n\\t                  if (parseSupported) {\\n\\t                    try {\\n\\t                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\\n\\t                      // points. These environments, along with FF 3.1b1 and 2,\\n\\t                      // also allow trailing commas in JSON objects and arrays.\\n\\t                      parseSupported = parse(\\\"1.\\\") !== 1;\\n\\t                    } catch (exception) {}\\n\\t                  }\\n\\t                }\\n\\t              }\\n\\t            } catch (exception) {\\n\\t              parseSupported = false;\\n\\t            }\\n\\t          }\\n\\t          isSupported = parseSupported;\\n\\t        }\\n\\t      }\\n\\t      return has[name] = !!isSupported;\\n\\t    }\\n\\n\\t    if (!has(\\\"json\\\")) {\\n\\t      // Common `[[Class]]` name aliases.\\n\\t      var functionClass = \\\"[object Function]\\\",\\n\\t          dateClass = \\\"[object Date]\\\",\\n\\t          numberClass = \\\"[object Number]\\\",\\n\\t          stringClass = \\\"[object String]\\\",\\n\\t          arrayClass = \\\"[object Array]\\\",\\n\\t          booleanClass = \\\"[object Boolean]\\\";\\n\\n\\t      // Detect incomplete support for accessing string characters by index.\\n\\t      var charIndexBuggy = has(\\\"bug-string-char-index\\\");\\n\\n\\t      // Define additional utility methods if the `Date` methods are buggy.\\n\\t      if (!isExtended) {\\n\\t        var floor = Math.floor;\\n\\t        // A mapping between the months of the year and the number of days between\\n\\t        // January 1st and the first of the respective month.\\n\\t        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\\n\\t        // Internal: Calculates the number of days between the Unix epoch and the\\n\\t        // first day of the given month.\\n\\t        var getDay = function (year, month) {\\n\\t          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\\n\\t        };\\n\\t      }\\n\\n\\t      // Internal: Determines if a property is a direct property of the given\\n\\t      // object. Delegates to the native `Object#hasOwnProperty` method.\\n\\t      if (!(isProperty = objectProto.hasOwnProperty)) {\\n\\t        isProperty = function (property) {\\n\\t          var members = {}, constructor;\\n\\t          if ((members.__proto__ = null, members.__proto__ = {\\n\\t            // The *proto* property cannot be set multiple times in recent\\n\\t            // versions of Firefox and SeaMonkey.\\n\\t            \\\"toString\\\": 1\\n\\t          }, members).toString != getClass) {\\n\\t            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\\n\\t            // supports the mutable *proto* property.\\n\\t            isProperty = function (property) {\\n\\t              // Capture and break the object's prototype chain (see section 8.6.2\\n\\t              // of the ES 5.1 spec). The parenthesized expression prevents an\\n\\t              // unsafe transformation by the Closure Compiler.\\n\\t              var original = this.__proto__, result = property in (this.__proto__ = null, this);\\n\\t              // Restore the original prototype chain.\\n\\t              this.__proto__ = original;\\n\\t              return result;\\n\\t            };\\n\\t          } else {\\n\\t            // Capture a reference to the top-level `Object` constructor.\\n\\t            constructor = members.constructor;\\n\\t            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\\n\\t            // other environments.\\n\\t            isProperty = function (property) {\\n\\t              var parent = (this.constructor || constructor).prototype;\\n\\t              return property in this && !(property in parent && this[property] === parent[property]);\\n\\t            };\\n\\t          }\\n\\t          members = null;\\n\\t          return isProperty.call(this, property);\\n\\t        };\\n\\t      }\\n\\n\\t      // Internal: Normalizes the `for...in` iteration algorithm across\\n\\t      // environments. Each enumerated key is yielded to a `callback` function.\\n\\t      forEach = function (object, callback) {\\n\\t        var size = 0, Properties, members, property;\\n\\n\\t        // Tests for bugs in the current environment's `for...in` algorithm. The\\n\\t        // `valueOf` property inherits the non-enumerable flag from\\n\\t        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\\n\\t        (Properties = function () {\\n\\t          this.valueOf = 0;\\n\\t        }).prototype.valueOf = 0;\\n\\n\\t        // Iterate over a new instance of the `Properties` class.\\n\\t        members = new Properties();\\n\\t        for (property in members) {\\n\\t          // Ignore all properties inherited from `Object.prototype`.\\n\\t          if (isProperty.call(members, property)) {\\n\\t            size++;\\n\\t          }\\n\\t        }\\n\\t        Properties = members = null;\\n\\n\\t        // Normalize the iteration algorithm.\\n\\t        if (!size) {\\n\\t          // A list of non-enumerable properties inherited from `Object.prototype`.\\n\\t          members = [\\\"valueOf\\\", \\\"toString\\\", \\\"toLocaleString\\\", \\\"propertyIsEnumerable\\\", \\\"isPrototypeOf\\\", \\\"hasOwnProperty\\\", \\\"constructor\\\"];\\n\\t          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\\n\\t          // properties.\\n\\t          forEach = function (object, callback) {\\n\\t            var isFunction = getClass.call(object) == functionClass, property, length;\\n\\t            var hasProperty = !isFunction && typeof object.constructor != \\\"function\\\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\\n\\t            for (property in object) {\\n\\t              // Gecko <= 1.0 enumerates the `prototype` property of functions under\\n\\t              // certain conditions; IE does not.\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && hasProperty.call(object, property)) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t            // Manually invoke the callback for each non-enumerable property.\\n\\t            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\\n\\t          };\\n\\t        } else if (size == 2) {\\n\\t          // Safari <= 2.0.4 enumerates shadowed properties twice.\\n\\t          forEach = function (object, callback) {\\n\\t            // Create a set of iterated properties.\\n\\t            var members = {}, isFunction = getClass.call(object) == functionClass, property;\\n\\t            for (property in object) {\\n\\t              // Store each property name to prevent double enumeration. The\\n\\t              // `prototype` property of functions is not enumerated due to cross-\\n\\t              // environment inconsistencies.\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t          };\\n\\t        } else {\\n\\t          // No bugs detected; use the standard `for...in` algorithm.\\n\\t          forEach = function (object, callback) {\\n\\t            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\\n\\t            for (property in object) {\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && isProperty.call(object, property) && !(isConstructor = property === \\\"constructor\\\")) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t            // Manually invoke the callback for the `constructor` property due to\\n\\t            // cross-environment inconsistencies.\\n\\t            if (isConstructor || isProperty.call(object, (property = \\\"constructor\\\"))) {\\n\\t              callback(property);\\n\\t            }\\n\\t          };\\n\\t        }\\n\\t        return forEach(object, callback);\\n\\t      };\\n\\n\\t      // Public: Serializes a JavaScript `value` as a JSON string. The optional\\n\\t      // `filter` argument may specify either a function that alters how object and\\n\\t      // array members are serialized, or an array of strings and numbers that\\n\\t      // indicates which properties should be serialized. The optional `width`\\n\\t      // argument may be either a string or number that specifies the indentation\\n\\t      // level of the output.\\n\\t      if (!has(\\\"json-stringify\\\")) {\\n\\t        // Internal: A map of control characters and their escaped equivalents.\\n\\t        var Escapes = {\\n\\t          92: \\\"\\\\\\\\\\\\\\\\\\\",\\n\\t          34: '\\\\\\\\\\\"',\\n\\t          8: \\\"\\\\\\\\b\\\",\\n\\t          12: \\\"\\\\\\\\f\\\",\\n\\t          10: \\\"\\\\\\\\n\\\",\\n\\t          13: \\\"\\\\\\\\r\\\",\\n\\t          9: \\\"\\\\\\\\t\\\"\\n\\t        };\\n\\n\\t        // Internal: Converts `value` into a zero-padded string such that its\\n\\t        // length is at least equal to `width`. The `width` must be <= 6.\\n\\t        var leadingZeroes = \\\"000000\\\";\\n\\t        var toPaddedString = function (width, value) {\\n\\t          // The `|| 0` expression is necessary to work around a bug in\\n\\t          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \\\"0\\\"`.\\n\\t          return (leadingZeroes + (value || 0)).slice(-width);\\n\\t        };\\n\\n\\t        // Internal: Double-quotes a string `value`, replacing all ASCII control\\n\\t        // characters (characters with code unit values between 0 and 31) with\\n\\t        // their escaped equivalents. This is an implementation of the\\n\\t        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\\n\\t        var unicodePrefix = \\\"\\\\\\\\u00\\\";\\n\\t        var quote = function (value) {\\n\\t          var result = '\\\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\\n\\t          var symbols = useCharIndex && (charIndexBuggy ? value.split(\\\"\\\") : value);\\n\\t          for (; index < length; index++) {\\n\\t            var charCode = value.charCodeAt(index);\\n\\t            // If the character is a control character, append its Unicode or\\n\\t            // shorthand escape sequence; otherwise, append the character as-is.\\n\\t            switch (charCode) {\\n\\t              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\\n\\t                result += Escapes[charCode];\\n\\t                break;\\n\\t              default:\\n\\t                if (charCode < 32) {\\n\\t                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\\n\\t                  break;\\n\\t                }\\n\\t                result += useCharIndex ? symbols[index] : value.charAt(index);\\n\\t            }\\n\\t          }\\n\\t          return result + '\\\"';\\n\\t        };\\n\\n\\t        // Internal: Recursively serializes an object. Implements the\\n\\t        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\\n\\t        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\\n\\t          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\\n\\t          try {\\n\\t            // Necessary for host object support.\\n\\t            value = object[property];\\n\\t          } catch (exception) {}\\n\\t          if (typeof value == \\\"object\\\" && value) {\\n\\t            className = getClass.call(value);\\n\\t            if (className == dateClass && !isProperty.call(value, \\\"toJSON\\\")) {\\n\\t              if (value > -1 / 0 && value < 1 / 0) {\\n\\t                // Dates are serialized according to the `Date#toJSON` method\\n\\t                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\\n\\t                // for the ISO 8601 date time string format.\\n\\t                if (getDay) {\\n\\t                  // Manually compute the year, month, date, hours, minutes,\\n\\t                  // seconds, and milliseconds if the `getUTC*` methods are\\n\\t                  // buggy. Adapted from @Yaffle's `date-shim` project.\\n\\t                  date = floor(value / 864e5);\\n\\t                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\\n\\t                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\\n\\t                  date = 1 + date - getDay(year, month);\\n\\t                  // The `time` value specifies the time within the day (see ES\\n\\t                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\\n\\t                  // to compute `A modulo B`, as the `%` operator does not\\n\\t                  // correspond to the `modulo` operation for negative numbers.\\n\\t                  time = (value % 864e5 + 864e5) % 864e5;\\n\\t                  // The hours, minutes, seconds, and milliseconds are obtained by\\n\\t                  // decomposing the time within the day. See section 15.9.1.10.\\n\\t                  hours = floor(time / 36e5) % 24;\\n\\t                  minutes = floor(time / 6e4) % 60;\\n\\t                  seconds = floor(time / 1e3) % 60;\\n\\t                  milliseconds = time % 1e3;\\n\\t                } else {\\n\\t                  year = value.getUTCFullYear();\\n\\t                  month = value.getUTCMonth();\\n\\t                  date = value.getUTCDate();\\n\\t                  hours = value.getUTCHours();\\n\\t                  minutes = value.getUTCMinutes();\\n\\t                  seconds = value.getUTCSeconds();\\n\\t                  milliseconds = value.getUTCMilliseconds();\\n\\t                }\\n\\t                // Serialize extended years correctly.\\n\\t                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \\\"-\\\" : \\\"+\\\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\\n\\t                  \\\"-\\\" + toPaddedString(2, month + 1) + \\\"-\\\" + toPaddedString(2, date) +\\n\\t                  // Months, dates, hours, minutes, and seconds should have two\\n\\t                  // digits; milliseconds should have three.\\n\\t                  \\\"T\\\" + toPaddedString(2, hours) + \\\":\\\" + toPaddedString(2, minutes) + \\\":\\\" + toPaddedString(2, seconds) +\\n\\t                  // Milliseconds are optional in ES 5.0, but required in 5.1.\\n\\t                  \\\".\\\" + toPaddedString(3, milliseconds) + \\\"Z\\\";\\n\\t              } else {\\n\\t                value = null;\\n\\t              }\\n\\t            } else if (typeof value.toJSON == \\\"function\\\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \\\"toJSON\\\"))) {\\n\\t              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\\n\\t              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\\n\\t              // ignores all `toJSON` methods on these objects unless they are\\n\\t              // defined directly on an instance.\\n\\t              value = value.toJSON(property);\\n\\t            }\\n\\t          }\\n\\t          if (callback) {\\n\\t            // If a replacement function was provided, call it to obtain the value\\n\\t            // for serialization.\\n\\t            value = callback.call(object, property, value);\\n\\t          }\\n\\t          if (value === null) {\\n\\t            return \\\"null\\\";\\n\\t          }\\n\\t          className = getClass.call(value);\\n\\t          if (className == booleanClass) {\\n\\t            // Booleans are represented literally.\\n\\t            return \\\"\\\" + value;\\n\\t          } else if (className == numberClass) {\\n\\t            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\\n\\t            // `\\\"null\\\"`.\\n\\t            return value > -1 / 0 && value < 1 / 0 ? \\\"\\\" + value : \\\"null\\\";\\n\\t          } else if (className == stringClass) {\\n\\t            // Strings are double-quoted and escaped.\\n\\t            return quote(\\\"\\\" + value);\\n\\t          }\\n\\t          // Recursively serialize objects and arrays.\\n\\t          if (typeof value == \\\"object\\\") {\\n\\t            // Check for cyclic structures. This is a linear search; performance\\n\\t            // is inversely proportional to the number of unique nested objects.\\n\\t            for (length = stack.length; length--;) {\\n\\t              if (stack[length] === value) {\\n\\t                // Cyclic structures cannot be serialized by `JSON.stringify`.\\n\\t                throw TypeError();\\n\\t              }\\n\\t            }\\n\\t            // Add the object to the stack of traversed objects.\\n\\t            stack.push(value);\\n\\t            results = [];\\n\\t            // Save the current indentation level and indent one additional level.\\n\\t            prefix = indentation;\\n\\t            indentation += whitespace;\\n\\t            if (className == arrayClass) {\\n\\t              // Recursively serialize array elements.\\n\\t              for (index = 0, length = value.length; index < length; index++) {\\n\\t                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\\n\\t                results.push(element === undef ? \\\"null\\\" : element);\\n\\t              }\\n\\t              result = results.length ? (whitespace ? \\\"[\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"]\\\" : (\\\"[\\\" + results.join(\\\",\\\") + \\\"]\\\")) : \\\"[]\\\";\\n\\t            } else {\\n\\t              // Recursively serialize object members. Members are selected from\\n\\t              // either a user-specified list of property names, or the object\\n\\t              // itself.\\n\\t              forEach(properties || value, function (property) {\\n\\t                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\\n\\t                if (element !== undef) {\\n\\t                  // According to ES 5.1 section 15.12.3: \\\"If `gap` {whitespace}\\n\\t                  // is not the empty string, let `member` {quote(property) + \\\":\\\"}\\n\\t                  // be the concatenation of `member` and the `space` character.\\\"\\n\\t                  // The \\\"`space` character\\\" refers to the literal space\\n\\t                  // character, not the `space` {width} argument provided to\\n\\t                  // `JSON.stringify`.\\n\\t                  results.push(quote(property) + \\\":\\\" + (whitespace ? \\\" \\\" : \\\"\\\") + element);\\n\\t                }\\n\\t              });\\n\\t              result = results.length ? (whitespace ? \\\"{\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"}\\\" : (\\\"{\\\" + results.join(\\\",\\\") + \\\"}\\\")) : \\\"{}\\\";\\n\\t            }\\n\\t            // Remove the object from the traversed object stack.\\n\\t            stack.pop();\\n\\t            return result;\\n\\t          }\\n\\t        };\\n\\n\\t        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\\n\\t        exports.stringify = function (source, filter, width) {\\n\\t          var whitespace, callback, properties, className;\\n\\t          if (objectTypes[typeof filter] && filter) {\\n\\t            if ((className = getClass.call(filter)) == functionClass) {\\n\\t              callback = filter;\\n\\t            } else if (className == arrayClass) {\\n\\t              // Convert the property names array into a makeshift set.\\n\\t              properties = {};\\n\\t              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\\n\\t            }\\n\\t          }\\n\\t          if (width) {\\n\\t            if ((className = getClass.call(width)) == numberClass) {\\n\\t              // Convert the `width` to an integer and create a string containing\\n\\t              // `width` number of space characters.\\n\\t              if ((width -= width % 1) > 0) {\\n\\t                for (whitespace = \\\"\\\", width > 10 && (width = 10); whitespace.length < width; whitespace += \\\" \\\");\\n\\t              }\\n\\t            } else if (className == stringClass) {\\n\\t              whitespace = width.length <= 10 ? width : width.slice(0, 10);\\n\\t            }\\n\\t          }\\n\\t          // Opera <= 7.54u2 discards the values associated with empty string keys\\n\\t          // (`\\\"\\\"`) only if they are used directly within an object member list\\n\\t          // (e.g., `!(\\\"\\\" in { \\\"\\\": 1})`).\\n\\t          return serialize(\\\"\\\", (value = {}, value[\\\"\\\"] = source, value), callback, properties, whitespace, \\\"\\\", []);\\n\\t        };\\n\\t      }\\n\\n\\t      // Public: Parses a JSON source string.\\n\\t      if (!has(\\\"json-parse\\\")) {\\n\\t        var fromCharCode = String.fromCharCode;\\n\\n\\t        // Internal: A map of escaped control characters and their unescaped\\n\\t        // equivalents.\\n\\t        var Unescapes = {\\n\\t          92: \\\"\\\\\\\\\\\",\\n\\t          34: '\\\"',\\n\\t          47: \\\"/\\\",\\n\\t          98: \\\"\\\\b\\\",\\n\\t          116: \\\"\\\\t\\\",\\n\\t          110: \\\"\\\\n\\\",\\n\\t          102: \\\"\\\\f\\\",\\n\\t          114: \\\"\\\\r\\\"\\n\\t        };\\n\\n\\t        // Internal: Stores the parser state.\\n\\t        var Index, Source;\\n\\n\\t        // Internal: Resets the parser state and throws a `SyntaxError`.\\n\\t        var abort = function () {\\n\\t          Index = Source = null;\\n\\t          throw SyntaxError();\\n\\t        };\\n\\n\\t        // Internal: Returns the next token, or `\\\"$\\\"` if the parser has reached\\n\\t        // the end of the source string. A token may be a string, number, `null`\\n\\t        // literal, or Boolean literal.\\n\\t        var lex = function () {\\n\\t          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\\n\\t          while (Index < length) {\\n\\t            charCode = source.charCodeAt(Index);\\n\\t            switch (charCode) {\\n\\t              case 9: case 10: case 13: case 32:\\n\\t                // Skip whitespace tokens, including tabs, carriage returns, line\\n\\t                // feeds, and space characters.\\n\\t                Index++;\\n\\t                break;\\n\\t              case 123: case 125: case 91: case 93: case 58: case 44:\\n\\t                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\\n\\t                // the current position.\\n\\t                value = charIndexBuggy ? source.charAt(Index) : source[Index];\\n\\t                Index++;\\n\\t                return value;\\n\\t              case 34:\\n\\t                // `\\\"` delimits a JSON string; advance to the next character and\\n\\t                // begin parsing the string. String tokens are prefixed with the\\n\\t                // sentinel `@` character to distinguish them from punctuators and\\n\\t                // end-of-string tokens.\\n\\t                for (value = \\\"@\\\", Index++; Index < length;) {\\n\\t                  charCode = source.charCodeAt(Index);\\n\\t                  if (charCode < 32) {\\n\\t                    // Unescaped ASCII control characters (those with a code unit\\n\\t                    // less than the space character) are not permitted.\\n\\t                    abort();\\n\\t                  } else if (charCode == 92) {\\n\\t                    // A reverse solidus (`\\\\`) marks the beginning of an escaped\\n\\t                    // control character (including `\\\"`, `\\\\`, and `/`) or Unicode\\n\\t                    // escape sequence.\\n\\t                    charCode = source.charCodeAt(++Index);\\n\\t                    switch (charCode) {\\n\\t                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\\n\\t                        // Revive escaped control characters.\\n\\t                        value += Unescapes[charCode];\\n\\t                        Index++;\\n\\t                        break;\\n\\t                      case 117:\\n\\t                        // `\\\\u` marks the beginning of a Unicode escape sequence.\\n\\t                        // Advance to the first character and validate the\\n\\t                        // four-digit code point.\\n\\t                        begin = ++Index;\\n\\t                        for (position = Index + 4; Index < position; Index++) {\\n\\t                          charCode = source.charCodeAt(Index);\\n\\t                          // A valid sequence comprises four hexdigits (case-\\n\\t                          // insensitive) that form a single hexadecimal value.\\n\\t                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\\n\\t                            // Invalid Unicode escape sequence.\\n\\t                            abort();\\n\\t                          }\\n\\t                        }\\n\\t                        // Revive the escaped character.\\n\\t                        value += fromCharCode(\\\"0x\\\" + source.slice(begin, Index));\\n\\t                        break;\\n\\t                      default:\\n\\t                        // Invalid escape sequence.\\n\\t                        abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    if (charCode == 34) {\\n\\t                      // An unescaped double-quote character marks the end of the\\n\\t                      // string.\\n\\t                      break;\\n\\t                    }\\n\\t                    charCode = source.charCodeAt(Index);\\n\\t                    begin = Index;\\n\\t                    // Optimize for the common case where a string is valid.\\n\\t                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\\n\\t                      charCode = source.charCodeAt(++Index);\\n\\t                    }\\n\\t                    // Append the string as-is.\\n\\t                    value += source.slice(begin, Index);\\n\\t                  }\\n\\t                }\\n\\t                if (source.charCodeAt(Index) == 34) {\\n\\t                  // Advance to the next character and return the revived string.\\n\\t                  Index++;\\n\\t                  return value;\\n\\t                }\\n\\t                // Unterminated string.\\n\\t                abort();\\n\\t              default:\\n\\t                // Parse numbers and literals.\\n\\t                begin = Index;\\n\\t                // Advance past the negative sign, if one is specified.\\n\\t                if (charCode == 45) {\\n\\t                  isSigned = true;\\n\\t                  charCode = source.charCodeAt(++Index);\\n\\t                }\\n\\t                // Parse an integer or floating-point value.\\n\\t                if (charCode >= 48 && charCode <= 57) {\\n\\t                  // Leading zeroes are interpreted as octal literals.\\n\\t                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\\n\\t                    // Illegal octal literal.\\n\\t                    abort();\\n\\t                  }\\n\\t                  isSigned = false;\\n\\t                  // Parse the integer component.\\n\\t                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\\n\\t                  // Floats cannot contain a leading decimal point; however, this\\n\\t                  // case is already accounted for by the parser.\\n\\t                  if (source.charCodeAt(Index) == 46) {\\n\\t                    position = ++Index;\\n\\t                    // Parse the decimal component.\\n\\t                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n\\t                    if (position == Index) {\\n\\t                      // Illegal trailing decimal.\\n\\t                      abort();\\n\\t                    }\\n\\t                    Index = position;\\n\\t                  }\\n\\t                  // Parse exponents. The `e` denoting the exponent is\\n\\t                  // case-insensitive.\\n\\t                  charCode = source.charCodeAt(Index);\\n\\t                  if (charCode == 101 || charCode == 69) {\\n\\t                    charCode = source.charCodeAt(++Index);\\n\\t                    // Skip past the sign following the exponent, if one is\\n\\t                    // specified.\\n\\t                    if (charCode == 43 || charCode == 45) {\\n\\t                      Index++;\\n\\t                    }\\n\\t                    // Parse the exponential component.\\n\\t                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n\\t                    if (position == Index) {\\n\\t                      // Illegal empty exponent.\\n\\t                      abort();\\n\\t                    }\\n\\t                    Index = position;\\n\\t                  }\\n\\t                  // Coerce the parsed value to a JavaScript number.\\n\\t                  return +source.slice(begin, Index);\\n\\t                }\\n\\t                // A negative sign may only precede numbers.\\n\\t                if (isSigned) {\\n\\t                  abort();\\n\\t                }\\n\\t                // `true`, `false`, and `null` literals.\\n\\t                if (source.slice(Index, Index + 4) == \\\"true\\\") {\\n\\t                  Index += 4;\\n\\t                  return true;\\n\\t                } else if (source.slice(Index, Index + 5) == \\\"false\\\") {\\n\\t                  Index += 5;\\n\\t                  return false;\\n\\t                } else if (source.slice(Index, Index + 4) == \\\"null\\\") {\\n\\t                  Index += 4;\\n\\t                  return null;\\n\\t                }\\n\\t                // Unrecognized token.\\n\\t                abort();\\n\\t            }\\n\\t          }\\n\\t          // Return the sentinel `$` character if the parser has reached the end\\n\\t          // of the source string.\\n\\t          return \\\"$\\\";\\n\\t        };\\n\\n\\t        // Internal: Parses a JSON `value` token.\\n\\t        var get = function (value) {\\n\\t          var results, hasMembers;\\n\\t          if (value == \\\"$\\\") {\\n\\t            // Unexpected end of input.\\n\\t            abort();\\n\\t          }\\n\\t          if (typeof value == \\\"string\\\") {\\n\\t            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \\\"@\\\") {\\n\\t              // Remove the sentinel `@` character.\\n\\t              return value.slice(1);\\n\\t            }\\n\\t            // Parse object and array literals.\\n\\t            if (value == \\\"[\\\") {\\n\\t              // Parses a JSON array, returning a new JavaScript array.\\n\\t              results = [];\\n\\t              for (;; hasMembers || (hasMembers = true)) {\\n\\t                value = lex();\\n\\t                // A closing square bracket marks the end of the array literal.\\n\\t                if (value == \\\"]\\\") {\\n\\t                  break;\\n\\t                }\\n\\t                // If the array literal contains elements, the current token\\n\\t                // should be a comma separating the previous element from the\\n\\t                // next.\\n\\t                if (hasMembers) {\\n\\t                  if (value == \\\",\\\") {\\n\\t                    value = lex();\\n\\t                    if (value == \\\"]\\\") {\\n\\t                      // Unexpected trailing `,` in array literal.\\n\\t                      abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    // A `,` must separate each array element.\\n\\t                    abort();\\n\\t                  }\\n\\t                }\\n\\t                // Elisions and leading commas are not permitted.\\n\\t                if (value == \\\",\\\") {\\n\\t                  abort();\\n\\t                }\\n\\t                results.push(get(value));\\n\\t              }\\n\\t              return results;\\n\\t            } else if (value == \\\"{\\\") {\\n\\t              // Parses a JSON object, returning a new JavaScript object.\\n\\t              results = {};\\n\\t              for (;; hasMembers || (hasMembers = true)) {\\n\\t                value = lex();\\n\\t                // A closing curly brace marks the end of the object literal.\\n\\t                if (value == \\\"}\\\") {\\n\\t                  break;\\n\\t                }\\n\\t                // If the object literal contains members, the current token\\n\\t                // should be a comma separator.\\n\\t                if (hasMembers) {\\n\\t                  if (value == \\\",\\\") {\\n\\t                    value = lex();\\n\\t                    if (value == \\\"}\\\") {\\n\\t                      // Unexpected trailing `,` in object literal.\\n\\t                      abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    // A `,` must separate each object member.\\n\\t                    abort();\\n\\t                  }\\n\\t                }\\n\\t                // Leading commas are not permitted, object property names must be\\n\\t                // double-quoted strings, and a `:` must separate each property\\n\\t                // name and value.\\n\\t                if (value == \\\",\\\" || typeof value != \\\"string\\\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \\\"@\\\" || lex() != \\\":\\\") {\\n\\t                  abort();\\n\\t                }\\n\\t                results[value.slice(1)] = get(lex());\\n\\t              }\\n\\t              return results;\\n\\t            }\\n\\t            // Unexpected token encountered.\\n\\t            abort();\\n\\t          }\\n\\t          return value;\\n\\t        };\\n\\n\\t        // Internal: Updates a traversed object member.\\n\\t        var update = function (source, property, callback) {\\n\\t          var element = walk(source, property, callback);\\n\\t          if (element === undef) {\\n\\t            delete source[property];\\n\\t          } else {\\n\\t            source[property] = element;\\n\\t          }\\n\\t        };\\n\\n\\t        // Internal: Recursively traverses a parsed JSON object, invoking the\\n\\t        // `callback` function for each value. This is an implementation of the\\n\\t        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\\n\\t        var walk = function (source, property, callback) {\\n\\t          var value = source[property], length;\\n\\t          if (typeof value == \\\"object\\\" && value) {\\n\\t            // `forEach` can't be used to traverse an array in Opera <= 8.54\\n\\t            // because its `Object#hasOwnProperty` implementation returns `false`\\n\\t            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\\\"0\\\")`).\\n\\t            if (getClass.call(value) == arrayClass) {\\n\\t              for (length = value.length; length--;) {\\n\\t                update(value, length, callback);\\n\\t              }\\n\\t            } else {\\n\\t              forEach(value, function (property) {\\n\\t                update(value, property, callback);\\n\\t              });\\n\\t            }\\n\\t          }\\n\\t          return callback.call(source, property, value);\\n\\t        };\\n\\n\\t        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\\n\\t        exports.parse = function (source, callback) {\\n\\t          var result, value;\\n\\t          Index = 0;\\n\\t          Source = \\\"\\\" + source;\\n\\t          result = get(lex());\\n\\t          // If a JSON string contains multiple tokens, it is invalid.\\n\\t          if (lex() != \\\"$\\\") {\\n\\t            abort();\\n\\t          }\\n\\t          // Reset the parser state.\\n\\t          Index = Source = null;\\n\\t          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\\\"\\\"] = result, value), \\\"\\\", callback) : result;\\n\\t        };\\n\\t      }\\n\\t    }\\n\\n\\t    exports[\\\"runInContext\\\"] = runInContext;\\n\\t    return exports;\\n\\t  }\\n\\n\\t  if (freeExports && !isLoader) {\\n\\t    // Export for CommonJS environments.\\n\\t    runInContext(root, freeExports);\\n\\t  } else {\\n\\t    // Export for web browsers and JavaScript engines.\\n\\t    var nativeJSON = root.JSON,\\n\\t        previousJSON = root[\\\"JSON3\\\"],\\n\\t        isRestored = false;\\n\\n\\t    var JSON3 = runInContext(root, (root[\\\"JSON3\\\"] = {\\n\\t      // Public: Restores the original value of the global `JSON` object and\\n\\t      // returns a reference to the `JSON3` object.\\n\\t      \\\"noConflict\\\": function () {\\n\\t        if (!isRestored) {\\n\\t          isRestored = true;\\n\\t          root.JSON = nativeJSON;\\n\\t          root[\\\"JSON3\\\"] = previousJSON;\\n\\t          nativeJSON = previousJSON = null;\\n\\t        }\\n\\t        return JSON3;\\n\\t      }\\n\\t    }));\\n\\n\\t    root.JSON = {\\n\\t      \\\"parse\\\": JSON3.parse,\\n\\t      \\\"stringify\\\": JSON3.stringify\\n\\t    };\\n\\t  }\\n\\n\\t  // Export for asynchronous module loaders.\\n\\t  if (isLoader) {\\n\\t    define(function () {\\n\\t      return JSON3;\\n\\t    });\\n\\t  }\\n\\t}).call(this);\\n\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))\\n\\n/***/ },\\n/* 12 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = function(module) {\\r\\n\\t\\tif(!module.webpackPolyfill) {\\r\\n\\t\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\t\\tmodule.paths = [];\\r\\n\\t\\t\\t// module.parent = undefined by default\\r\\n\\t\\t\\tmodule.children = [];\\r\\n\\t\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t\\t}\\r\\n\\t\\treturn module;\\r\\n\\t}\\r\\n\\n\\n/***/ },\\n/* 13 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Expose `Emitter`.\\n\\t */\\n\\n\\tmodule.exports = Emitter;\\n\\n\\t/**\\n\\t * Initialize a new `Emitter`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Emitter(obj) {\\n\\t  if (obj) return mixin(obj);\\n\\t};\\n\\n\\t/**\\n\\t * Mixin the emitter properties.\\n\\t *\\n\\t * @param {Object} obj\\n\\t * @return {Object}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction mixin(obj) {\\n\\t  for (var key in Emitter.prototype) {\\n\\t    obj[key] = Emitter.prototype[key];\\n\\t  }\\n\\t  return obj;\\n\\t}\\n\\n\\t/**\\n\\t * Listen on the given `event` with `fn`.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.on =\\n\\tEmitter.prototype.addEventListener = function(event, fn){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  (this._callbacks[event] = this._callbacks[event] || [])\\n\\t    .push(fn);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Adds an `event` listener that will be invoked a single\\n\\t * time then automatically removed.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.once = function(event, fn){\\n\\t  var self = this;\\n\\t  this._callbacks = this._callbacks || {};\\n\\n\\t  function on() {\\n\\t    self.off(event, on);\\n\\t    fn.apply(this, arguments);\\n\\t  }\\n\\n\\t  on.fn = fn;\\n\\t  this.on(event, on);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Remove the given callback for `event` or all\\n\\t * registered callbacks.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.off =\\n\\tEmitter.prototype.removeListener =\\n\\tEmitter.prototype.removeAllListeners =\\n\\tEmitter.prototype.removeEventListener = function(event, fn){\\n\\t  this._callbacks = this._callbacks || {};\\n\\n\\t  // all\\n\\t  if (0 == arguments.length) {\\n\\t    this._callbacks = {};\\n\\t    return this;\\n\\t  }\\n\\n\\t  // specific event\\n\\t  var callbacks = this._callbacks[event];\\n\\t  if (!callbacks) return this;\\n\\n\\t  // remove all handlers\\n\\t  if (1 == arguments.length) {\\n\\t    delete this._callbacks[event];\\n\\t    return this;\\n\\t  }\\n\\n\\t  // remove specific handler\\n\\t  var cb;\\n\\t  for (var i = 0; i < callbacks.length; i++) {\\n\\t    cb = callbacks[i];\\n\\t    if (cb === fn || cb.fn === fn) {\\n\\t      callbacks.splice(i, 1);\\n\\t      break;\\n\\t    }\\n\\t  }\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Emit `event` with the given args.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Mixed} ...\\n\\t * @return {Emitter}\\n\\t */\\n\\n\\tEmitter.prototype.emit = function(event){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  var args = [].slice.call(arguments, 1)\\n\\t    , callbacks = this._callbacks[event];\\n\\n\\t  if (callbacks) {\\n\\t    callbacks = callbacks.slice(0);\\n\\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\\n\\t      callbacks[i].apply(this, args);\\n\\t    }\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Return array of callbacks for `event`.\\n\\t *\\n\\t * @param {String} event\\n\\t * @return {Array}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.listeners = function(event){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  return this._callbacks[event] || [];\\n\\t};\\n\\n\\t/**\\n\\t * Check if this emitter has `event` handlers.\\n\\t *\\n\\t * @param {String} event\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.hasListeners = function(event){\\n\\t  return !! this.listeners(event).length;\\n\\t};\\n\\n\\n/***/ },\\n/* 14 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/\\n\\n\\t/**\\n\\t * Module requirements\\n\\t */\\n\\n\\tvar isArray = __webpack_require__(15);\\n\\tvar isBuf = __webpack_require__(16);\\n\\n\\t/**\\n\\t * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\\n\\t * Anything with blobs or files should be fed through removeBlobs before coming\\n\\t * here.\\n\\t *\\n\\t * @param {Object} packet - socket.io event packet\\n\\t * @return {Object} with deconstructed packet and list of buffers\\n\\t * @api public\\n\\t */\\n\\n\\texports.deconstructPacket = function(packet){\\n\\t  var buffers = [];\\n\\t  var packetData = packet.data;\\n\\n\\t  function _deconstructPacket(data) {\\n\\t    if (!data) return data;\\n\\n\\t    if (isBuf(data)) {\\n\\t      var placeholder = { _placeholder: true, num: buffers.length };\\n\\t      buffers.push(data);\\n\\t      return placeholder;\\n\\t    } else if (isArray(data)) {\\n\\t      var newData = new Array(data.length);\\n\\t      for (var i = 0; i < data.length; i++) {\\n\\t        newData[i] = _deconstructPacket(data[i]);\\n\\t      }\\n\\t      return newData;\\n\\t    } else if ('object' == typeof data && !(data instanceof Date)) {\\n\\t      var newData = {};\\n\\t      for (var key in data) {\\n\\t        newData[key] = _deconstructPacket(data[key]);\\n\\t      }\\n\\t      return newData;\\n\\t    }\\n\\t    return data;\\n\\t  }\\n\\n\\t  var pack = packet;\\n\\t  pack.data = _deconstructPacket(packetData);\\n\\t  pack.attachments = buffers.length; // number of binary 'attachments'\\n\\t  return {packet: pack, buffers: buffers};\\n\\t};\\n\\n\\t/**\\n\\t * Reconstructs a binary packet from its placeholder packet and buffers\\n\\t *\\n\\t * @param {Object} packet - event packet with placeholders\\n\\t * @param {Array} buffers - binary buffers to put in placeholder positions\\n\\t * @return {Object} reconstructed packet\\n\\t * @api public\\n\\t */\\n\\n\\texports.reconstructPacket = function(packet, buffers) {\\n\\t  var curPlaceHolder = 0;\\n\\n\\t  function _reconstructPacket(data) {\\n\\t    if (data && data._placeholder) {\\n\\t      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\\n\\t      return buf;\\n\\t    } else if (isArray(data)) {\\n\\t      for (var i = 0; i < data.length; i++) {\\n\\t        data[i] = _reconstructPacket(data[i]);\\n\\t      }\\n\\t      return data;\\n\\t    } else if (data && 'object' == typeof data) {\\n\\t      for (var key in data) {\\n\\t        data[key] = _reconstructPacket(data[key]);\\n\\t      }\\n\\t      return data;\\n\\t    }\\n\\t    return data;\\n\\t  }\\n\\n\\t  packet.data = _reconstructPacket(packet.data);\\n\\t  packet.attachments = undefined; // no longer useful\\n\\t  return packet;\\n\\t};\\n\\n\\t/**\\n\\t * Asynchronously removes Blobs or Files from data via\\n\\t * FileReader's readAsArrayBuffer method. Used before encoding\\n\\t * data as msgpack. Calls callback with the blobless data.\\n\\t *\\n\\t * @param {Object} data\\n\\t * @param {Function} callback\\n\\t * @api private\\n\\t */\\n\\n\\texports.removeBlobs = function(data, callback) {\\n\\t  function _removeBlobs(obj, curKey, containingObject) {\\n\\t    if (!obj) return obj;\\n\\n\\t    // convert any blob\\n\\t    if ((global.Blob && obj instanceof Blob) ||\\n\\t        (global.File && obj instanceof File)) {\\n\\t      pendingBlobs++;\\n\\n\\t      // async filereader\\n\\t      var fileReader = new FileReader();\\n\\t      fileReader.onload = function() { // this.result == arraybuffer\\n\\t        if (containingObject) {\\n\\t          containingObject[curKey] = this.result;\\n\\t        }\\n\\t        else {\\n\\t          bloblessData = this.result;\\n\\t        }\\n\\n\\t        // if nothing pending its callback time\\n\\t        if(! --pendingBlobs) {\\n\\t          callback(bloblessData);\\n\\t        }\\n\\t      };\\n\\n\\t      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\\n\\t    } else if (isArray(obj)) { // handle array\\n\\t      for (var i = 0; i < obj.length; i++) {\\n\\t        _removeBlobs(obj[i], i, obj);\\n\\t      }\\n\\t    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\\n\\t      for (var key in obj) {\\n\\t        _removeBlobs(obj[key], key, obj);\\n\\t      }\\n\\t    }\\n\\t  }\\n\\n\\t  var pendingBlobs = 0;\\n\\t  var bloblessData = data;\\n\\t  _removeBlobs(bloblessData);\\n\\t  if (!pendingBlobs) {\\n\\t    callback(bloblessData);\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 15 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = Array.isArray || function (arr) {\\n\\t  return Object.prototype.toString.call(arr) == '[object Array]';\\n\\t};\\n\\n\\n/***/ },\\n/* 16 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\tmodule.exports = isBuf;\\n\\n\\t/**\\n\\t * Returns true if obj is a buffer or an arraybuffer.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tfunction isBuf(obj) {\\n\\t  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\\n\\t         (global.ArrayBuffer && obj instanceof ArrayBuffer);\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 17 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\tvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar eio = __webpack_require__(18);\\n\\tvar Socket = __webpack_require__(44);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar parser = __webpack_require__(7);\\n\\tvar on = __webpack_require__(46);\\n\\tvar bind = __webpack_require__(47);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:manager');\\n\\tvar indexOf = __webpack_require__(42);\\n\\tvar Backoff = __webpack_require__(48);\\n\\n\\t/**\\n\\t * IE6+ hasOwnProperty\\n\\t */\\n\\n\\tvar has = Object.prototype.hasOwnProperty;\\n\\n\\t/**\\n\\t * Module exports\\n\\t */\\n\\n\\tmodule.exports = Manager;\\n\\n\\t/**\\n\\t * `Manager` constructor.\\n\\t *\\n\\t * @param {String} engine instance or engine uri/opts\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Manager(uri, opts) {\\n\\t  if (!(this instanceof Manager)) return new Manager(uri, opts);\\n\\t  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {\\n\\t    opts = uri;\\n\\t    uri = undefined;\\n\\t  }\\n\\t  opts = opts || {};\\n\\n\\t  opts.path = opts.path || '/socket.io';\\n\\t  this.nsps = {};\\n\\t  this.subs = [];\\n\\t  this.opts = opts;\\n\\t  this.reconnection(opts.reconnection !== false);\\n\\t  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\\n\\t  this.reconnectionDelay(opts.reconnectionDelay || 1000);\\n\\t  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\\n\\t  this.randomizationFactor(opts.randomizationFactor || 0.5);\\n\\t  this.backoff = new Backoff({\\n\\t    min: this.reconnectionDelay(),\\n\\t    max: this.reconnectionDelayMax(),\\n\\t    jitter: this.randomizationFactor()\\n\\t  });\\n\\t  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\\n\\t  this.readyState = 'closed';\\n\\t  this.uri = uri;\\n\\t  this.connecting = [];\\n\\t  this.lastPing = null;\\n\\t  this.encoding = false;\\n\\t  this.packetBuffer = [];\\n\\t  this.encoder = new parser.Encoder();\\n\\t  this.decoder = new parser.Decoder();\\n\\t  this.autoConnect = opts.autoConnect !== false;\\n\\t  if (this.autoConnect) this.open();\\n\\t}\\n\\n\\t/**\\n\\t * Propagate given event to sockets and emit on `this`\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.emitAll = function () {\\n\\t  this.emit.apply(this, arguments);\\n\\t  for (var nsp in this.nsps) {\\n\\t    if (has.call(this.nsps, nsp)) {\\n\\t      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Update `socket.id` of all sockets\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.updateSocketIds = function () {\\n\\t  for (var nsp in this.nsps) {\\n\\t    if (has.call(this.nsps, nsp)) {\\n\\t      this.nsps[nsp].id = this.engine.id;\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Manager.prototype);\\n\\n\\t/**\\n\\t * Sets the `reconnection` config.\\n\\t *\\n\\t * @param {Boolean} true/false if it should automatically reconnect\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnection = function (v) {\\n\\t  if (!arguments.length) return this._reconnection;\\n\\t  this._reconnection = !!v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the reconnection attempts config.\\n\\t *\\n\\t * @param {Number} max reconnection attempts before giving up\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionAttempts = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionAttempts;\\n\\t  this._reconnectionAttempts = v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the delay between reconnections.\\n\\t *\\n\\t * @param {Number} delay\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionDelay = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionDelay;\\n\\t  this._reconnectionDelay = v;\\n\\t  this.backoff && this.backoff.setMin(v);\\n\\t  return this;\\n\\t};\\n\\n\\tManager.prototype.randomizationFactor = function (v) {\\n\\t  if (!arguments.length) return this._randomizationFactor;\\n\\t  this._randomizationFactor = v;\\n\\t  this.backoff && this.backoff.setJitter(v);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the maximum delay between reconnections.\\n\\t *\\n\\t * @param {Number} delay\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionDelayMax = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionDelayMax;\\n\\t  this._reconnectionDelayMax = v;\\n\\t  this.backoff && this.backoff.setMax(v);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the connection timeout. `false` to disable\\n\\t *\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.timeout = function (v) {\\n\\t  if (!arguments.length) return this._timeout;\\n\\t  this._timeout = v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Starts trying to reconnect if reconnection is enabled and we have not\\n\\t * started reconnecting yet\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.maybeReconnectOnOpen = function () {\\n\\t  // Only try to reconnect if it's the first time we're connecting\\n\\t  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\\n\\t    // keeps reconnection from firing twice for the same reconnection loop\\n\\t    this.reconnect();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Sets the current transport `socket`.\\n\\t *\\n\\t * @param {Function} optional, callback\\n\\t * @return {Manager} self\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.open = Manager.prototype.connect = function (fn, opts) {\\n\\t  debug('readyState %s', this.readyState);\\n\\t  if (~this.readyState.indexOf('open')) return this;\\n\\n\\t  debug('opening %s', this.uri);\\n\\t  this.engine = eio(this.uri, this.opts);\\n\\t  var socket = this.engine;\\n\\t  var self = this;\\n\\t  this.readyState = 'opening';\\n\\t  this.skipReconnect = false;\\n\\n\\t  // emit `open`\\n\\t  var openSub = on(socket, 'open', function () {\\n\\t    self.onopen();\\n\\t    fn && fn();\\n\\t  });\\n\\n\\t  // emit `connect_error`\\n\\t  var errorSub = on(socket, 'error', function (data) {\\n\\t    debug('connect_error');\\n\\t    self.cleanup();\\n\\t    self.readyState = 'closed';\\n\\t    self.emitAll('connect_error', data);\\n\\t    if (fn) {\\n\\t      var err = new Error('Connection error');\\n\\t      err.data = data;\\n\\t      fn(err);\\n\\t    } else {\\n\\t      // Only do this if there is no fn to handle the error\\n\\t      self.maybeReconnectOnOpen();\\n\\t    }\\n\\t  });\\n\\n\\t  // emit `connect_timeout`\\n\\t  if (false !== this._timeout) {\\n\\t    var timeout = this._timeout;\\n\\t    debug('connect attempt will timeout after %d', timeout);\\n\\n\\t    // set timer\\n\\t    var timer = setTimeout(function () {\\n\\t      debug('connect attempt timed out after %d', timeout);\\n\\t      openSub.destroy();\\n\\t      socket.close();\\n\\t      socket.emit('error', 'timeout');\\n\\t      self.emitAll('connect_timeout', timeout);\\n\\t    }, timeout);\\n\\n\\t    this.subs.push({\\n\\t      destroy: function destroy() {\\n\\t        clearTimeout(timer);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  this.subs.push(openSub);\\n\\t  this.subs.push(errorSub);\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport open.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onopen = function () {\\n\\t  debug('open');\\n\\n\\t  // clear old subs\\n\\t  this.cleanup();\\n\\n\\t  // mark as open\\n\\t  this.readyState = 'open';\\n\\t  this.emit('open');\\n\\n\\t  // add new subs\\n\\t  var socket = this.engine;\\n\\t  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\\n\\t  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\\n\\t  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\\n\\t  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\\n\\t  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\\n\\t  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a ping.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onping = function () {\\n\\t  this.lastPing = new Date();\\n\\t  this.emitAll('ping');\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onpong = function () {\\n\\t  this.emitAll('pong', new Date() - this.lastPing);\\n\\t};\\n\\n\\t/**\\n\\t * Called with data.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.ondata = function (data) {\\n\\t  this.decoder.add(data);\\n\\t};\\n\\n\\t/**\\n\\t * Called when parser fully decodes a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.ondecoded = function (packet) {\\n\\t  this.emit('packet', packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon socket error.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onerror = function (err) {\\n\\t  debug('error', err);\\n\\t  this.emitAll('error', err);\\n\\t};\\n\\n\\t/**\\n\\t * Creates a new socket for the given `nsp`.\\n\\t *\\n\\t * @return {Socket}\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.socket = function (nsp, opts) {\\n\\t  var socket = this.nsps[nsp];\\n\\t  if (!socket) {\\n\\t    socket = new Socket(this, nsp, opts);\\n\\t    this.nsps[nsp] = socket;\\n\\t    var self = this;\\n\\t    socket.on('connecting', onConnecting);\\n\\t    socket.on('connect', function () {\\n\\t      socket.id = self.engine.id;\\n\\t    });\\n\\n\\t    if (this.autoConnect) {\\n\\t      // manually call here since connecting evnet is fired before listening\\n\\t      onConnecting();\\n\\t    }\\n\\t  }\\n\\n\\t  function onConnecting() {\\n\\t    if (!~indexOf(self.connecting, socket)) {\\n\\t      self.connecting.push(socket);\\n\\t    }\\n\\t  }\\n\\n\\t  return socket;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a socket close.\\n\\t *\\n\\t * @param {Socket} socket\\n\\t */\\n\\n\\tManager.prototype.destroy = function (socket) {\\n\\t  var index = indexOf(this.connecting, socket);\\n\\t  if (~index) this.connecting.splice(index, 1);\\n\\t  if (this.connecting.length) return;\\n\\n\\t  this.close();\\n\\t};\\n\\n\\t/**\\n\\t * Writes a packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.packet = function (packet) {\\n\\t  debug('writing packet %j', packet);\\n\\t  var self = this;\\n\\t  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\\n\\n\\t  if (!self.encoding) {\\n\\t    // encode, then write to engine with result\\n\\t    self.encoding = true;\\n\\t    this.encoder.encode(packet, function (encodedPackets) {\\n\\t      for (var i = 0; i < encodedPackets.length; i++) {\\n\\t        self.engine.write(encodedPackets[i], packet.options);\\n\\t      }\\n\\t      self.encoding = false;\\n\\t      self.processPacketQueue();\\n\\t    });\\n\\t  } else {\\n\\t    // add packet to the queue\\n\\t    self.packetBuffer.push(packet);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * If packet buffer is non-empty, begins encoding the\\n\\t * next packet in line.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.processPacketQueue = function () {\\n\\t  if (this.packetBuffer.length > 0 && !this.encoding) {\\n\\t    var pack = this.packetBuffer.shift();\\n\\t    this.packet(pack);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Clean up transport subscriptions and packet buffer.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.cleanup = function () {\\n\\t  debug('cleanup');\\n\\n\\t  var subsLength = this.subs.length;\\n\\t  for (var i = 0; i < subsLength; i++) {\\n\\t    var sub = this.subs.shift();\\n\\t    sub.destroy();\\n\\t  }\\n\\n\\t  this.packetBuffer = [];\\n\\t  this.encoding = false;\\n\\t  this.lastPing = null;\\n\\n\\t  this.decoder.destroy();\\n\\t};\\n\\n\\t/**\\n\\t * Close the current socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.close = Manager.prototype.disconnect = function () {\\n\\t  debug('disconnect');\\n\\t  this.skipReconnect = true;\\n\\t  this.reconnecting = false;\\n\\t  if ('opening' === this.readyState) {\\n\\t    // `onclose` will not fire because\\n\\t    // an open event never happened\\n\\t    this.cleanup();\\n\\t  }\\n\\t  this.backoff.reset();\\n\\t  this.readyState = 'closed';\\n\\t  if (this.engine) this.engine.close();\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onclose = function (reason) {\\n\\t  debug('onclose');\\n\\n\\t  this.cleanup();\\n\\t  this.backoff.reset();\\n\\t  this.readyState = 'closed';\\n\\t  this.emit('close', reason);\\n\\n\\t  if (this._reconnection && !this.skipReconnect) {\\n\\t    this.reconnect();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Attempt a reconnection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.reconnect = function () {\\n\\t  if (this.reconnecting || this.skipReconnect) return this;\\n\\n\\t  var self = this;\\n\\n\\t  if (this.backoff.attempts >= this._reconnectionAttempts) {\\n\\t    debug('reconnect failed');\\n\\t    this.backoff.reset();\\n\\t    this.emitAll('reconnect_failed');\\n\\t    this.reconnecting = false;\\n\\t  } else {\\n\\t    var delay = this.backoff.duration();\\n\\t    debug('will wait %dms before reconnect attempt', delay);\\n\\n\\t    this.reconnecting = true;\\n\\t    var timer = setTimeout(function () {\\n\\t      if (self.skipReconnect) return;\\n\\n\\t      debug('attempting reconnect');\\n\\t      self.emitAll('reconnect_attempt', self.backoff.attempts);\\n\\t      self.emitAll('reconnecting', self.backoff.attempts);\\n\\n\\t      // check again for the case socket closed in above events\\n\\t      if (self.skipReconnect) return;\\n\\n\\t      self.open(function (err) {\\n\\t        if (err) {\\n\\t          debug('reconnect attempt error');\\n\\t          self.reconnecting = false;\\n\\t          self.reconnect();\\n\\t          self.emitAll('reconnect_error', err.data);\\n\\t        } else {\\n\\t          debug('reconnect success');\\n\\t          self.onreconnect();\\n\\t        }\\n\\t      });\\n\\t    }, delay);\\n\\n\\t    this.subs.push({\\n\\t      destroy: function destroy() {\\n\\t        clearTimeout(timer);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon successful reconnect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onreconnect = function () {\\n\\t  var attempt = this.backoff.attempts;\\n\\t  this.reconnecting = false;\\n\\t  this.backoff.reset();\\n\\t  this.updateSocketIds();\\n\\t  this.emitAll('reconnect', attempt);\\n\\t};\\n\\n/***/ },\\n/* 18 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\tmodule.exports = __webpack_require__(19);\\n\\n\\n/***/ },\\n/* 19 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\tmodule.exports = __webpack_require__(20);\\n\\n\\t/**\\n\\t * Exports parser\\n\\t *\\n\\t * @api public\\n\\t *\\n\\t */\\n\\tmodule.exports.parser = __webpack_require__(27);\\n\\n\\n/***/ },\\n/* 20 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar transports = __webpack_require__(21);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:socket');\\n\\tvar index = __webpack_require__(42);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar parseuri = __webpack_require__(2);\\n\\tvar parsejson = __webpack_require__(43);\\n\\tvar parseqs = __webpack_require__(36);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Socket;\\n\\n\\t/**\\n\\t * Socket constructor.\\n\\t *\\n\\t * @param {String|Object} uri or options\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Socket (uri, opts) {\\n\\t  if (!(this instanceof Socket)) return new Socket(uri, opts);\\n\\n\\t  opts = opts || {};\\n\\n\\t  if (uri && 'object' === typeof uri) {\\n\\t    opts = uri;\\n\\t    uri = null;\\n\\t  }\\n\\n\\t  if (uri) {\\n\\t    uri = parseuri(uri);\\n\\t    opts.hostname = uri.host;\\n\\t    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\\n\\t    opts.port = uri.port;\\n\\t    if (uri.query) opts.query = uri.query;\\n\\t  } else if (opts.host) {\\n\\t    opts.hostname = parseuri(opts.host).host;\\n\\t  }\\n\\n\\t  this.secure = null != opts.secure ? opts.secure\\n\\t    : (global.location && 'https:' === location.protocol);\\n\\n\\t  if (opts.hostname && !opts.port) {\\n\\t    // if no port is specified manually, use the protocol default\\n\\t    opts.port = this.secure ? '443' : '80';\\n\\t  }\\n\\n\\t  this.agent = opts.agent || false;\\n\\t  this.hostname = opts.hostname ||\\n\\t    (global.location ? location.hostname : 'localhost');\\n\\t  this.port = opts.port || (global.location && location.port\\n\\t      ? location.port\\n\\t      : (this.secure ? 443 : 80));\\n\\t  this.query = opts.query || {};\\n\\t  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\\n\\t  this.upgrade = false !== opts.upgrade;\\n\\t  this.path = (opts.path || '/engine.io').replace(/\\\\/$/, '') + '/';\\n\\t  this.forceJSONP = !!opts.forceJSONP;\\n\\t  this.jsonp = false !== opts.jsonp;\\n\\t  this.forceBase64 = !!opts.forceBase64;\\n\\t  this.enablesXDR = !!opts.enablesXDR;\\n\\t  this.timestampParam = opts.timestampParam || 't';\\n\\t  this.timestampRequests = opts.timestampRequests;\\n\\t  this.transports = opts.transports || ['polling', 'websocket'];\\n\\t  this.readyState = '';\\n\\t  this.writeBuffer = [];\\n\\t  this.prevBufferLen = 0;\\n\\t  this.policyPort = opts.policyPort || 843;\\n\\t  this.rememberUpgrade = opts.rememberUpgrade || false;\\n\\t  this.binaryType = null;\\n\\t  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\\n\\t  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\\n\\n\\t  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\\n\\t  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\\n\\t    this.perMessageDeflate.threshold = 1024;\\n\\t  }\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx || null;\\n\\t  this.key = opts.key || null;\\n\\t  this.passphrase = opts.passphrase || null;\\n\\t  this.cert = opts.cert || null;\\n\\t  this.ca = opts.ca || null;\\n\\t  this.ciphers = opts.ciphers || null;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n\\t  this.forceNode = !!opts.forceNode;\\n\\n\\t  // other options for Node.js client\\n\\t  var freeGlobal = typeof global === 'object' && global;\\n\\t  if (freeGlobal.global === freeGlobal) {\\n\\t    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\\n\\t      this.extraHeaders = opts.extraHeaders;\\n\\t    }\\n\\n\\t    if (opts.localAddress) {\\n\\t      this.localAddress = opts.localAddress;\\n\\t    }\\n\\t  }\\n\\n\\t  // set on handshake\\n\\t  this.id = null;\\n\\t  this.upgrades = null;\\n\\t  this.pingInterval = null;\\n\\t  this.pingTimeout = null;\\n\\n\\t  // set on heartbeat\\n\\t  this.pingIntervalTimer = null;\\n\\t  this.pingTimeoutTimer = null;\\n\\n\\t  this.open();\\n\\t}\\n\\n\\tSocket.priorWebsocketSuccess = false;\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Socket.prototype);\\n\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.protocol = parser.protocol; // this is an int\\n\\n\\t/**\\n\\t * Expose deps for legacy compatibility\\n\\t * and standalone browser access.\\n\\t */\\n\\n\\tSocket.Socket = Socket;\\n\\tSocket.Transport = __webpack_require__(26);\\n\\tSocket.transports = __webpack_require__(21);\\n\\tSocket.parser = __webpack_require__(27);\\n\\n\\t/**\\n\\t * Creates transport of the given type.\\n\\t *\\n\\t * @param {String} transport name\\n\\t * @return {Transport}\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.createTransport = function (name) {\\n\\t  debug('creating transport \\\"%s\\\"', name);\\n\\t  var query = clone(this.query);\\n\\n\\t  // append engine.io protocol identifier\\n\\t  query.EIO = parser.protocol;\\n\\n\\t  // transport name\\n\\t  query.transport = name;\\n\\n\\t  // session id if we already have one\\n\\t  if (this.id) query.sid = this.id;\\n\\n\\t  var transport = new transports[name]({\\n\\t    agent: this.agent,\\n\\t    hostname: this.hostname,\\n\\t    port: this.port,\\n\\t    secure: this.secure,\\n\\t    path: this.path,\\n\\t    query: query,\\n\\t    forceJSONP: this.forceJSONP,\\n\\t    jsonp: this.jsonp,\\n\\t    forceBase64: this.forceBase64,\\n\\t    enablesXDR: this.enablesXDR,\\n\\t    timestampRequests: this.timestampRequests,\\n\\t    timestampParam: this.timestampParam,\\n\\t    policyPort: this.policyPort,\\n\\t    socket: this,\\n\\t    pfx: this.pfx,\\n\\t    key: this.key,\\n\\t    passphrase: this.passphrase,\\n\\t    cert: this.cert,\\n\\t    ca: this.ca,\\n\\t    ciphers: this.ciphers,\\n\\t    rejectUnauthorized: this.rejectUnauthorized,\\n\\t    perMessageDeflate: this.perMessageDeflate,\\n\\t    extraHeaders: this.extraHeaders,\\n\\t    forceNode: this.forceNode,\\n\\t    localAddress: this.localAddress\\n\\t  });\\n\\n\\t  return transport;\\n\\t};\\n\\n\\tfunction clone (obj) {\\n\\t  var o = {};\\n\\t  for (var i in obj) {\\n\\t    if (obj.hasOwnProperty(i)) {\\n\\t      o[i] = obj[i];\\n\\t    }\\n\\t  }\\n\\t  return o;\\n\\t}\\n\\n\\t/**\\n\\t * Initializes transport to use and starts probe.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\tSocket.prototype.open = function () {\\n\\t  var transport;\\n\\t  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\\n\\t    transport = 'websocket';\\n\\t  } else if (0 === this.transports.length) {\\n\\t    // Emit error on next tick so it can be listened to\\n\\t    var self = this;\\n\\t    setTimeout(function () {\\n\\t      self.emit('error', 'No transports available');\\n\\t    }, 0);\\n\\t    return;\\n\\t  } else {\\n\\t    transport = this.transports[0];\\n\\t  }\\n\\t  this.readyState = 'opening';\\n\\n\\t  // Retry with the next transport if the transport is disabled (jsonp: false)\\n\\t  try {\\n\\t    transport = this.createTransport(transport);\\n\\t  } catch (e) {\\n\\t    this.transports.shift();\\n\\t    this.open();\\n\\t    return;\\n\\t  }\\n\\n\\t  transport.open();\\n\\t  this.setTransport(transport);\\n\\t};\\n\\n\\t/**\\n\\t * Sets the current transport. Disables the existing one (if any).\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.setTransport = function (transport) {\\n\\t  debug('setting transport %s', transport.name);\\n\\t  var self = this;\\n\\n\\t  if (this.transport) {\\n\\t    debug('clearing existing transport %s', this.transport.name);\\n\\t    this.transport.removeAllListeners();\\n\\t  }\\n\\n\\t  // set up transport\\n\\t  this.transport = transport;\\n\\n\\t  // set up transport listeners\\n\\t  transport\\n\\t  .on('drain', function () {\\n\\t    self.onDrain();\\n\\t  })\\n\\t  .on('packet', function (packet) {\\n\\t    self.onPacket(packet);\\n\\t  })\\n\\t  .on('error', function (e) {\\n\\t    self.onError(e);\\n\\t  })\\n\\t  .on('close', function () {\\n\\t    self.onClose('transport close');\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Probes a transport.\\n\\t *\\n\\t * @param {String} transport name\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.probe = function (name) {\\n\\t  debug('probing transport \\\"%s\\\"', name);\\n\\t  var transport = this.createTransport(name, { probe: 1 });\\n\\t  var failed = false;\\n\\t  var self = this;\\n\\n\\t  Socket.priorWebsocketSuccess = false;\\n\\n\\t  function onTransportOpen () {\\n\\t    if (self.onlyBinaryUpgrades) {\\n\\t      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\\n\\t      failed = failed || upgradeLosesBinary;\\n\\t    }\\n\\t    if (failed) return;\\n\\n\\t    debug('probe transport \\\"%s\\\" opened', name);\\n\\t    transport.send([{ type: 'ping', data: 'probe' }]);\\n\\t    transport.once('packet', function (msg) {\\n\\t      if (failed) return;\\n\\t      if ('pong' === msg.type && 'probe' === msg.data) {\\n\\t        debug('probe transport \\\"%s\\\" pong', name);\\n\\t        self.upgrading = true;\\n\\t        self.emit('upgrading', transport);\\n\\t        if (!transport) return;\\n\\t        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\\n\\n\\t        debug('pausing current transport \\\"%s\\\"', self.transport.name);\\n\\t        self.transport.pause(function () {\\n\\t          if (failed) return;\\n\\t          if ('closed' === self.readyState) return;\\n\\t          debug('changing transport and sending upgrade packet');\\n\\n\\t          cleanup();\\n\\n\\t          self.setTransport(transport);\\n\\t          transport.send([{ type: 'upgrade' }]);\\n\\t          self.emit('upgrade', transport);\\n\\t          transport = null;\\n\\t          self.upgrading = false;\\n\\t          self.flush();\\n\\t        });\\n\\t      } else {\\n\\t        debug('probe transport \\\"%s\\\" failed', name);\\n\\t        var err = new Error('probe error');\\n\\t        err.transport = transport.name;\\n\\t        self.emit('upgradeError', err);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  function freezeTransport () {\\n\\t    if (failed) return;\\n\\n\\t    // Any callback called by transport should be ignored since now\\n\\t    failed = true;\\n\\n\\t    cleanup();\\n\\n\\t    transport.close();\\n\\t    transport = null;\\n\\t  }\\n\\n\\t  // Handle any error that happens while probing\\n\\t  function onerror (err) {\\n\\t    var error = new Error('probe error: ' + err);\\n\\t    error.transport = transport.name;\\n\\n\\t    freezeTransport();\\n\\n\\t    debug('probe transport \\\"%s\\\" failed because of error: %s', name, err);\\n\\n\\t    self.emit('upgradeError', error);\\n\\t  }\\n\\n\\t  function onTransportClose () {\\n\\t    onerror('transport closed');\\n\\t  }\\n\\n\\t  // When the socket is closed while we're probing\\n\\t  function onclose () {\\n\\t    onerror('socket closed');\\n\\t  }\\n\\n\\t  // When the socket is upgraded while we're probing\\n\\t  function onupgrade (to) {\\n\\t    if (transport && to.name !== transport.name) {\\n\\t      debug('\\\"%s\\\" works - aborting \\\"%s\\\"', to.name, transport.name);\\n\\t      freezeTransport();\\n\\t    }\\n\\t  }\\n\\n\\t  // Remove all listeners on the transport and on self\\n\\t  function cleanup () {\\n\\t    transport.removeListener('open', onTransportOpen);\\n\\t    transport.removeListener('error', onerror);\\n\\t    transport.removeListener('close', onTransportClose);\\n\\t    self.removeListener('close', onclose);\\n\\t    self.removeListener('upgrading', onupgrade);\\n\\t  }\\n\\n\\t  transport.once('open', onTransportOpen);\\n\\t  transport.once('error', onerror);\\n\\t  transport.once('close', onTransportClose);\\n\\n\\t  this.once('close', onclose);\\n\\t  this.once('upgrading', onupgrade);\\n\\n\\t  transport.open();\\n\\t};\\n\\n\\t/**\\n\\t * Called when connection is deemed open.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.onOpen = function () {\\n\\t  debug('socket open');\\n\\t  this.readyState = 'open';\\n\\t  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\\n\\t  this.emit('open');\\n\\t  this.flush();\\n\\n\\t  // we check for `readyState` in case an `open`\\n\\t  // listener already closed the socket\\n\\t  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\\n\\t    debug('starting upgrade probes');\\n\\t    for (var i = 0, l = this.upgrades.length; i < l; i++) {\\n\\t      this.probe(this.upgrades[i]);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Handles a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onPacket = function (packet) {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState ||\\n\\t      'closing' === this.readyState) {\\n\\t    debug('socket receive: type \\\"%s\\\", data \\\"%s\\\"', packet.type, packet.data);\\n\\n\\t    this.emit('packet', packet);\\n\\n\\t    // Socket is live - any packet counts\\n\\t    this.emit('heartbeat');\\n\\n\\t    switch (packet.type) {\\n\\t      case 'open':\\n\\t        this.onHandshake(parsejson(packet.data));\\n\\t        break;\\n\\n\\t      case 'pong':\\n\\t        this.setPing();\\n\\t        this.emit('pong');\\n\\t        break;\\n\\n\\t      case 'error':\\n\\t        var err = new Error('server error');\\n\\t        err.code = packet.data;\\n\\t        this.onError(err);\\n\\t        break;\\n\\n\\t      case 'message':\\n\\t        this.emit('data', packet.data);\\n\\t        this.emit('message', packet.data);\\n\\t        break;\\n\\t    }\\n\\t  } else {\\n\\t    debug('packet received with socket readyState \\\"%s\\\"', this.readyState);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon handshake completion.\\n\\t *\\n\\t * @param {Object} handshake obj\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onHandshake = function (data) {\\n\\t  this.emit('handshake', data);\\n\\t  this.id = data.sid;\\n\\t  this.transport.query.sid = data.sid;\\n\\t  this.upgrades = this.filterUpgrades(data.upgrades);\\n\\t  this.pingInterval = data.pingInterval;\\n\\t  this.pingTimeout = data.pingTimeout;\\n\\t  this.onOpen();\\n\\t  // In case open handler closes socket\\n\\t  if ('closed' === this.readyState) return;\\n\\t  this.setPing();\\n\\n\\t  // Prolong liveness of socket on heartbeat\\n\\t  this.removeListener('heartbeat', this.onHeartbeat);\\n\\t  this.on('heartbeat', this.onHeartbeat);\\n\\t};\\n\\n\\t/**\\n\\t * Resets ping timeout.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onHeartbeat = function (timeout) {\\n\\t  clearTimeout(this.pingTimeoutTimer);\\n\\t  var self = this;\\n\\t  self.pingTimeoutTimer = setTimeout(function () {\\n\\t    if ('closed' === self.readyState) return;\\n\\t    self.onClose('ping timeout');\\n\\t  }, timeout || (self.pingInterval + self.pingTimeout));\\n\\t};\\n\\n\\t/**\\n\\t * Pings server every `this.pingInterval` and expects response\\n\\t * within `this.pingTimeout` or closes connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.setPing = function () {\\n\\t  var self = this;\\n\\t  clearTimeout(self.pingIntervalTimer);\\n\\t  self.pingIntervalTimer = setTimeout(function () {\\n\\t    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\\n\\t    self.ping();\\n\\t    self.onHeartbeat(self.pingTimeout);\\n\\t  }, self.pingInterval);\\n\\t};\\n\\n\\t/**\\n\\t* Sends a ping packet.\\n\\t*\\n\\t* @api private\\n\\t*/\\n\\n\\tSocket.prototype.ping = function () {\\n\\t  var self = this;\\n\\t  this.sendPacket('ping', function () {\\n\\t    self.emit('ping');\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Called on `drain` event\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onDrain = function () {\\n\\t  this.writeBuffer.splice(0, this.prevBufferLen);\\n\\n\\t  // setting prevBufferLen = 0 is very important\\n\\t  // for example, when upgrading, upgrade packet is sent over,\\n\\t  // and a nonzero prevBufferLen could cause problems on `drain`\\n\\t  this.prevBufferLen = 0;\\n\\n\\t  if (0 === this.writeBuffer.length) {\\n\\t    this.emit('drain');\\n\\t  } else {\\n\\t    this.flush();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Flush write buffers.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.flush = function () {\\n\\t  if ('closed' !== this.readyState && this.transport.writable &&\\n\\t    !this.upgrading && this.writeBuffer.length) {\\n\\t    debug('flushing %d packets in socket', this.writeBuffer.length);\\n\\t    this.transport.send(this.writeBuffer);\\n\\t    // keep track of current length of writeBuffer\\n\\t    // splice writeBuffer and callbackBuffer on `drain`\\n\\t    this.prevBufferLen = this.writeBuffer.length;\\n\\t    this.emit('flush');\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Sends a message.\\n\\t *\\n\\t * @param {String} message.\\n\\t * @param {Function} callback function.\\n\\t * @param {Object} options.\\n\\t * @return {Socket} for chaining.\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.write =\\n\\tSocket.prototype.send = function (msg, options, fn) {\\n\\t  this.sendPacket('message', msg, options, fn);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a packet.\\n\\t *\\n\\t * @param {String} packet type.\\n\\t * @param {String} data.\\n\\t * @param {Object} options.\\n\\t * @param {Function} callback function.\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.sendPacket = function (type, data, options, fn) {\\n\\t  if ('function' === typeof data) {\\n\\t    fn = data;\\n\\t    data = undefined;\\n\\t  }\\n\\n\\t  if ('function' === typeof options) {\\n\\t    fn = options;\\n\\t    options = null;\\n\\t  }\\n\\n\\t  if ('closing' === this.readyState || 'closed' === this.readyState) {\\n\\t    return;\\n\\t  }\\n\\n\\t  options = options || {};\\n\\t  options.compress = false !== options.compress;\\n\\n\\t  var packet = {\\n\\t    type: type,\\n\\t    data: data,\\n\\t    options: options\\n\\t  };\\n\\t  this.emit('packetCreate', packet);\\n\\t  this.writeBuffer.push(packet);\\n\\t  if (fn) this.once('flush', fn);\\n\\t  this.flush();\\n\\t};\\n\\n\\t/**\\n\\t * Closes the connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.close = function () {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState) {\\n\\t    this.readyState = 'closing';\\n\\n\\t    var self = this;\\n\\n\\t    if (this.writeBuffer.length) {\\n\\t      this.once('drain', function () {\\n\\t        if (this.upgrading) {\\n\\t          waitForUpgrade();\\n\\t        } else {\\n\\t          close();\\n\\t        }\\n\\t      });\\n\\t    } else if (this.upgrading) {\\n\\t      waitForUpgrade();\\n\\t    } else {\\n\\t      close();\\n\\t    }\\n\\t  }\\n\\n\\t  function close () {\\n\\t    self.onClose('forced close');\\n\\t    debug('socket closing - telling transport to close');\\n\\t    self.transport.close();\\n\\t  }\\n\\n\\t  function cleanupAndClose () {\\n\\t    self.removeListener('upgrade', cleanupAndClose);\\n\\t    self.removeListener('upgradeError', cleanupAndClose);\\n\\t    close();\\n\\t  }\\n\\n\\t  function waitForUpgrade () {\\n\\t    // wait for upgrade to finish since we can't send packets while pausing a transport\\n\\t    self.once('upgrade', cleanupAndClose);\\n\\t    self.once('upgradeError', cleanupAndClose);\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport error\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onError = function (err) {\\n\\t  debug('socket error %j', err);\\n\\t  Socket.priorWebsocketSuccess = false;\\n\\t  this.emit('error', err);\\n\\t  this.onClose('transport error', err);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onClose = function (reason, desc) {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\\n\\t    debug('socket close with reason: \\\"%s\\\"', reason);\\n\\t    var self = this;\\n\\n\\t    // clear timers\\n\\t    clearTimeout(this.pingIntervalTimer);\\n\\t    clearTimeout(this.pingTimeoutTimer);\\n\\n\\t    // stop event from firing again for transport\\n\\t    this.transport.removeAllListeners('close');\\n\\n\\t    // ensure transport won't stay open\\n\\t    this.transport.close();\\n\\n\\t    // ignore further transport communication\\n\\t    this.transport.removeAllListeners();\\n\\n\\t    // set ready state\\n\\t    this.readyState = 'closed';\\n\\n\\t    // clear session id\\n\\t    this.id = null;\\n\\n\\t    // emit close event\\n\\t    this.emit('close', reason, desc);\\n\\n\\t    // clean buffers after, so users can still\\n\\t    // grab the buffers on `close` event\\n\\t    self.writeBuffer = [];\\n\\t    self.prevBufferLen = 0;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Filters upgrades, returning only those matching client transports.\\n\\t *\\n\\t * @param {Array} server upgrades\\n\\t * @api private\\n\\t *\\n\\t */\\n\\n\\tSocket.prototype.filterUpgrades = function (upgrades) {\\n\\t  var filteredUpgrades = [];\\n\\t  for (var i = 0, j = upgrades.length; i < j; i++) {\\n\\t    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\\n\\t  }\\n\\t  return filteredUpgrades;\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 21 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies\\n\\t */\\n\\n\\tvar XMLHttpRequest = __webpack_require__(22);\\n\\tvar XHR = __webpack_require__(24);\\n\\tvar JSONP = __webpack_require__(39);\\n\\tvar websocket = __webpack_require__(40);\\n\\n\\t/**\\n\\t * Export transports.\\n\\t */\\n\\n\\texports.polling = polling;\\n\\texports.websocket = websocket;\\n\\n\\t/**\\n\\t * Polling transport polymorphic constructor.\\n\\t * Decides on xhr vs jsonp based on feature detection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tfunction polling (opts) {\\n\\t  var xhr;\\n\\t  var xd = false;\\n\\t  var xs = false;\\n\\t  var jsonp = false !== opts.jsonp;\\n\\n\\t  if (global.location) {\\n\\t    var isSSL = 'https:' === location.protocol;\\n\\t    var port = location.port;\\n\\n\\t    // some user agents have empty `location.port`\\n\\t    if (!port) {\\n\\t      port = isSSL ? 443 : 80;\\n\\t    }\\n\\n\\t    xd = opts.hostname !== location.hostname || port !== opts.port;\\n\\t    xs = opts.secure !== isSSL;\\n\\t  }\\n\\n\\t  opts.xdomain = xd;\\n\\t  opts.xscheme = xs;\\n\\t  xhr = new XMLHttpRequest(opts);\\n\\n\\t  if ('open' in xhr && !opts.forceJSONP) {\\n\\t    return new XHR(opts);\\n\\t  } else {\\n\\t    if (!jsonp) throw new Error('JSONP disabled');\\n\\t    return new JSONP(opts);\\n\\t  }\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 22 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module\\n\\n\\tvar hasCORS = __webpack_require__(23);\\n\\n\\tmodule.exports = function (opts) {\\n\\t  var xdomain = opts.xdomain;\\n\\n\\t  // scheme must be same when usign XDomainRequest\\n\\t  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\\n\\t  var xscheme = opts.xscheme;\\n\\n\\t  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\\n\\t  // https://github.com/Automattic/engine.io-client/pull/217\\n\\t  var enablesXDR = opts.enablesXDR;\\n\\n\\t  // XMLHttpRequest can be disabled on IE\\n\\t  try {\\n\\t    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\\n\\t      return new XMLHttpRequest();\\n\\t    }\\n\\t  } catch (e) { }\\n\\n\\t  // Use XDomainRequest for IE8 if enablesXDR is true\\n\\t  // because loading bar keeps flashing when using jsonp-polling\\n\\t  // https://github.com/yujiosaka/socke.io-ie8-loading-example\\n\\t  try {\\n\\t    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\\n\\t      return new XDomainRequest();\\n\\t    }\\n\\t  } catch (e) { }\\n\\n\\t  if (!xdomain) {\\n\\t    try {\\n\\t      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\\n\\t    } catch (e) { }\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 23 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Module exports.\\n\\t *\\n\\t * Logic borrowed from Modernizr:\\n\\t *\\n\\t *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\\n\\t */\\n\\n\\ttry {\\n\\t  module.exports = typeof XMLHttpRequest !== 'undefined' &&\\n\\t    'withCredentials' in new XMLHttpRequest();\\n\\t} catch (err) {\\n\\t  // if XMLHttp support is disabled in IE then it will throw\\n\\t  // when trying to create\\n\\t  module.exports = false;\\n\\t}\\n\\n\\n/***/ },\\n/* 24 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar XMLHttpRequest = __webpack_require__(22);\\n\\tvar Polling = __webpack_require__(25);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:polling-xhr');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = XHR;\\n\\tmodule.exports.Request = Request;\\n\\n\\t/**\\n\\t * Empty function\\n\\t */\\n\\n\\tfunction empty () {}\\n\\n\\t/**\\n\\t * XHR Polling constructor.\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api public\\n\\t */\\n\\n\\tfunction XHR (opts) {\\n\\t  Polling.call(this, opts);\\n\\t  this.requestTimeout = opts.requestTimeout;\\n\\n\\t  if (global.location) {\\n\\t    var isSSL = 'https:' === location.protocol;\\n\\t    var port = location.port;\\n\\n\\t    // some user agents have empty `location.port`\\n\\t    if (!port) {\\n\\t      port = isSSL ? 443 : 80;\\n\\t    }\\n\\n\\t    this.xd = opts.hostname !== global.location.hostname ||\\n\\t      port !== opts.port;\\n\\t    this.xs = opts.secure !== isSSL;\\n\\t  } else {\\n\\t    this.extraHeaders = opts.extraHeaders;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Polling.\\n\\t */\\n\\n\\tinherit(XHR, Polling);\\n\\n\\t/**\\n\\t * XHR supports binary\\n\\t */\\n\\n\\tXHR.prototype.supportsBinary = true;\\n\\n\\t/**\\n\\t * Creates a request.\\n\\t *\\n\\t * @param {String} method\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.request = function (opts) {\\n\\t  opts = opts || {};\\n\\t  opts.uri = this.uri();\\n\\t  opts.xd = this.xd;\\n\\t  opts.xs = this.xs;\\n\\t  opts.agent = this.agent || false;\\n\\t  opts.supportsBinary = this.supportsBinary;\\n\\t  opts.enablesXDR = this.enablesXDR;\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\t  opts.requestTimeout = this.requestTimeout;\\n\\n\\t  // other options for Node.js client\\n\\t  opts.extraHeaders = this.extraHeaders;\\n\\n\\t  return new Request(opts);\\n\\t};\\n\\n\\t/**\\n\\t * Sends data.\\n\\t *\\n\\t * @param {String} data to send.\\n\\t * @param {Function} called upon flush.\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.doWrite = function (data, fn) {\\n\\t  var isBinary = typeof data !== 'string' && data !== undefined;\\n\\t  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\\n\\t  var self = this;\\n\\t  req.on('success', fn);\\n\\t  req.on('error', function (err) {\\n\\t    self.onError('xhr post error', err);\\n\\t  });\\n\\t  this.sendXhr = req;\\n\\t};\\n\\n\\t/**\\n\\t * Starts a poll cycle.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.doPoll = function () {\\n\\t  debug('xhr poll');\\n\\t  var req = this.request();\\n\\t  var self = this;\\n\\t  req.on('data', function (data) {\\n\\t    self.onData(data);\\n\\t  });\\n\\t  req.on('error', function (err) {\\n\\t    self.onError('xhr poll error', err);\\n\\t  });\\n\\t  this.pollXhr = req;\\n\\t};\\n\\n\\t/**\\n\\t * Request constructor\\n\\t *\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Request (opts) {\\n\\t  this.method = opts.method || 'GET';\\n\\t  this.uri = opts.uri;\\n\\t  this.xd = !!opts.xd;\\n\\t  this.xs = !!opts.xs;\\n\\t  this.async = false !== opts.async;\\n\\t  this.data = undefined !== opts.data ? opts.data : null;\\n\\t  this.agent = opts.agent;\\n\\t  this.isBinary = opts.isBinary;\\n\\t  this.supportsBinary = opts.supportsBinary;\\n\\t  this.enablesXDR = opts.enablesXDR;\\n\\t  this.requestTimeout = opts.requestTimeout;\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx;\\n\\t  this.key = opts.key;\\n\\t  this.passphrase = opts.passphrase;\\n\\t  this.cert = opts.cert;\\n\\t  this.ca = opts.ca;\\n\\t  this.ciphers = opts.ciphers;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized;\\n\\n\\t  // other options for Node.js client\\n\\t  this.extraHeaders = opts.extraHeaders;\\n\\n\\t  this.create();\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Request.prototype);\\n\\n\\t/**\\n\\t * Creates the XHR object and sends the request.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.create = function () {\\n\\t  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\n\\t  var xhr = this.xhr = new XMLHttpRequest(opts);\\n\\t  var self = this;\\n\\n\\t  try {\\n\\t    debug('xhr open %s: %s', this.method, this.uri);\\n\\t    xhr.open(this.method, this.uri, this.async);\\n\\t    try {\\n\\t      if (this.extraHeaders) {\\n\\t        xhr.setDisableHeaderCheck(true);\\n\\t        for (var i in this.extraHeaders) {\\n\\t          if (this.extraHeaders.hasOwnProperty(i)) {\\n\\t            xhr.setRequestHeader(i, this.extraHeaders[i]);\\n\\t          }\\n\\t        }\\n\\t      }\\n\\t    } catch (e) {}\\n\\t    if (this.supportsBinary) {\\n\\t      // This has to be done after open because Firefox is stupid\\n\\t      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\\n\\t      xhr.responseType = 'arraybuffer';\\n\\t    }\\n\\n\\t    if ('POST' === this.method) {\\n\\t      try {\\n\\t        if (this.isBinary) {\\n\\t          xhr.setRequestHeader('Content-type', 'application/octet-stream');\\n\\t        } else {\\n\\t          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\\n\\t        }\\n\\t      } catch (e) {}\\n\\t    }\\n\\n\\t    try {\\n\\t      xhr.setRequestHeader('Accept', '*/*');\\n\\t    } catch (e) {}\\n\\n\\t    // ie6 check\\n\\t    if ('withCredentials' in xhr) {\\n\\t      xhr.withCredentials = true;\\n\\t    }\\n\\n\\t    if (this.requestTimeout) {\\n\\t      xhr.timeout = this.requestTimeout;\\n\\t    }\\n\\n\\t    if (this.hasXDR()) {\\n\\t      xhr.onload = function () {\\n\\t        self.onLoad();\\n\\t      };\\n\\t      xhr.onerror = function () {\\n\\t        self.onError(xhr.responseText);\\n\\t      };\\n\\t    } else {\\n\\t      xhr.onreadystatechange = function () {\\n\\t        if (4 !== xhr.readyState) return;\\n\\t        if (200 === xhr.status || 1223 === xhr.status) {\\n\\t          self.onLoad();\\n\\t        } else {\\n\\t          // make sure the `error` event handler that's user-set\\n\\t          // does not throw in the same tick and gets caught here\\n\\t          setTimeout(function () {\\n\\t            self.onError(xhr.status);\\n\\t          }, 0);\\n\\t        }\\n\\t      };\\n\\t    }\\n\\n\\t    debug('xhr data %s', this.data);\\n\\t    xhr.send(this.data);\\n\\t  } catch (e) {\\n\\t    // Need to defer since .create() is called directly fhrom the constructor\\n\\t    // and thus the 'error' event can only be only bound *after* this exception\\n\\t    // occurs.  Therefore, also, we cannot throw here at all.\\n\\t    setTimeout(function () {\\n\\t      self.onError(e);\\n\\t    }, 0);\\n\\t    return;\\n\\t  }\\n\\n\\t  if (global.document) {\\n\\t    this.index = Request.requestsCount++;\\n\\t    Request.requests[this.index] = this;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon successful response.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onSuccess = function () {\\n\\t  this.emit('success');\\n\\t  this.cleanup();\\n\\t};\\n\\n\\t/**\\n\\t * Called if we have data.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onData = function (data) {\\n\\t  this.emit('data', data);\\n\\t  this.onSuccess();\\n\\t};\\n\\n\\t/**\\n\\t * Called upon error.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onError = function (err) {\\n\\t  this.emit('error', err);\\n\\t  this.cleanup(true);\\n\\t};\\n\\n\\t/**\\n\\t * Cleans up house.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.cleanup = function (fromError) {\\n\\t  if ('undefined' === typeof this.xhr || null === this.xhr) {\\n\\t    return;\\n\\t  }\\n\\t  // xmlhttprequest\\n\\t  if (this.hasXDR()) {\\n\\t    this.xhr.onload = this.xhr.onerror = empty;\\n\\t  } else {\\n\\t    this.xhr.onreadystatechange = empty;\\n\\t  }\\n\\n\\t  if (fromError) {\\n\\t    try {\\n\\t      this.xhr.abort();\\n\\t    } catch (e) {}\\n\\t  }\\n\\n\\t  if (global.document) {\\n\\t    delete Request.requests[this.index];\\n\\t  }\\n\\n\\t  this.xhr = null;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon load.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onLoad = function () {\\n\\t  var data;\\n\\t  try {\\n\\t    var contentType;\\n\\t    try {\\n\\t      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\\n\\t    } catch (e) {}\\n\\t    if (contentType === 'application/octet-stream') {\\n\\t      data = this.xhr.response || this.xhr.responseText;\\n\\t    } else {\\n\\t      if (!this.supportsBinary) {\\n\\t        data = this.xhr.responseText;\\n\\t      } else {\\n\\t        try {\\n\\t          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\\n\\t        } catch (e) {\\n\\t          var ui8Arr = new Uint8Array(this.xhr.response);\\n\\t          var dataArray = [];\\n\\t          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\\n\\t            dataArray.push(ui8Arr[idx]);\\n\\t          }\\n\\n\\t          data = String.fromCharCode.apply(null, dataArray);\\n\\t        }\\n\\t      }\\n\\t    }\\n\\t  } catch (e) {\\n\\t    this.onError(e);\\n\\t  }\\n\\t  if (null != data) {\\n\\t    this.onData(data);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Check if it has XDomainRequest.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.hasXDR = function () {\\n\\t  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\\n\\t};\\n\\n\\t/**\\n\\t * Aborts the request.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tRequest.prototype.abort = function () {\\n\\t  this.cleanup();\\n\\t};\\n\\n\\t/**\\n\\t * Aborts pending requests when unloading the window. This is needed to prevent\\n\\t * memory leaks (e.g. when using IE) and to ensure that no spurious error is\\n\\t * emitted.\\n\\t */\\n\\n\\tRequest.requestsCount = 0;\\n\\tRequest.requests = {};\\n\\n\\tif (global.document) {\\n\\t  if (global.attachEvent) {\\n\\t    global.attachEvent('onunload', unloadHandler);\\n\\t  } else if (global.addEventListener) {\\n\\t    global.addEventListener('beforeunload', unloadHandler, false);\\n\\t  }\\n\\t}\\n\\n\\tfunction unloadHandler () {\\n\\t  for (var i in Request.requests) {\\n\\t    if (Request.requests.hasOwnProperty(i)) {\\n\\t      Request.requests[i].abort();\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 25 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar Transport = __webpack_require__(26);\\n\\tvar parseqs = __webpack_require__(36);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar yeast = __webpack_require__(38);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:polling');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Polling;\\n\\n\\t/**\\n\\t * Is XHR2 supported?\\n\\t */\\n\\n\\tvar hasXHR2 = (function () {\\n\\t  var XMLHttpRequest = __webpack_require__(22);\\n\\t  var xhr = new XMLHttpRequest({ xdomain: false });\\n\\t  return null != xhr.responseType;\\n\\t})();\\n\\n\\t/**\\n\\t * Polling interface.\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api private\\n\\t */\\n\\n\\tfunction Polling (opts) {\\n\\t  var forceBase64 = (opts && opts.forceBase64);\\n\\t  if (!hasXHR2 || forceBase64) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\t  Transport.call(this, opts);\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Transport.\\n\\t */\\n\\n\\tinherit(Polling, Transport);\\n\\n\\t/**\\n\\t * Transport name.\\n\\t */\\n\\n\\tPolling.prototype.name = 'polling';\\n\\n\\t/**\\n\\t * Opens the socket (triggers polling). We write a PING message to determine\\n\\t * when the transport is open.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.doOpen = function () {\\n\\t  this.poll();\\n\\t};\\n\\n\\t/**\\n\\t * Pauses polling.\\n\\t *\\n\\t * @param {Function} callback upon buffers are flushed and transport is paused\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.pause = function (onPause) {\\n\\t  var self = this;\\n\\n\\t  this.readyState = 'pausing';\\n\\n\\t  function pause () {\\n\\t    debug('paused');\\n\\t    self.readyState = 'paused';\\n\\t    onPause();\\n\\t  }\\n\\n\\t  if (this.polling || !this.writable) {\\n\\t    var total = 0;\\n\\n\\t    if (this.polling) {\\n\\t      debug('we are currently polling - waiting to pause');\\n\\t      total++;\\n\\t      this.once('pollComplete', function () {\\n\\t        debug('pre-pause polling complete');\\n\\t        --total || pause();\\n\\t      });\\n\\t    }\\n\\n\\t    if (!this.writable) {\\n\\t      debug('we are currently writing - waiting to pause');\\n\\t      total++;\\n\\t      this.once('drain', function () {\\n\\t        debug('pre-pause writing complete');\\n\\t        --total || pause();\\n\\t      });\\n\\t    }\\n\\t  } else {\\n\\t    pause();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Starts polling cycle.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tPolling.prototype.poll = function () {\\n\\t  debug('polling');\\n\\t  this.polling = true;\\n\\t  this.doPoll();\\n\\t  this.emit('poll');\\n\\t};\\n\\n\\t/**\\n\\t * Overloads onData to detect payloads.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.onData = function (data) {\\n\\t  var self = this;\\n\\t  debug('polling got data %s', data);\\n\\t  var callback = function (packet, index, total) {\\n\\t    // if its the first message we consider the transport open\\n\\t    if ('opening' === self.readyState) {\\n\\t      self.onOpen();\\n\\t    }\\n\\n\\t    // if its a close packet, we close the ongoing requests\\n\\t    if ('close' === packet.type) {\\n\\t      self.onClose();\\n\\t      return false;\\n\\t    }\\n\\n\\t    // otherwise bypass onData and handle the message\\n\\t    self.onPacket(packet);\\n\\t  };\\n\\n\\t  // decode payload\\n\\t  parser.decodePayload(data, this.socket.binaryType, callback);\\n\\n\\t  // if an event did not trigger closing\\n\\t  if ('closed' !== this.readyState) {\\n\\t    // if we got data we're not polling\\n\\t    this.polling = false;\\n\\t    this.emit('pollComplete');\\n\\n\\t    if ('open' === this.readyState) {\\n\\t      this.poll();\\n\\t    } else {\\n\\t      debug('ignoring poll - transport state \\\"%s\\\"', this.readyState);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * For polling, send a close packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.doClose = function () {\\n\\t  var self = this;\\n\\n\\t  function close () {\\n\\t    debug('writing close packet');\\n\\t    self.write([{ type: 'close' }]);\\n\\t  }\\n\\n\\t  if ('open' === this.readyState) {\\n\\t    debug('transport open - closing');\\n\\t    close();\\n\\t  } else {\\n\\t    // in case we're trying to close while\\n\\t    // handshaking is in progress (GH-164)\\n\\t    debug('transport not open - deferring close');\\n\\t    this.once('open', close);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Writes a packets payload.\\n\\t *\\n\\t * @param {Array} data packets\\n\\t * @param {Function} drain callback\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.write = function (packets) {\\n\\t  var self = this;\\n\\t  this.writable = false;\\n\\t  var callbackfn = function () {\\n\\t    self.writable = true;\\n\\t    self.emit('drain');\\n\\t  };\\n\\n\\t  parser.encodePayload(packets, this.supportsBinary, function (data) {\\n\\t    self.doWrite(data, callbackfn);\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Generates uri for connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.uri = function () {\\n\\t  var query = this.query || {};\\n\\t  var schema = this.secure ? 'https' : 'http';\\n\\t  var port = '';\\n\\n\\t  // cache busting is forced\\n\\t  if (false !== this.timestampRequests) {\\n\\t    query[this.timestampParam] = yeast();\\n\\t  }\\n\\n\\t  if (!this.supportsBinary && !query.sid) {\\n\\t    query.b64 = 1;\\n\\t  }\\n\\n\\t  query = parseqs.encode(query);\\n\\n\\t  // avoid port if default for schema\\n\\t  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\\n\\t     ('http' === schema && Number(this.port) !== 80))) {\\n\\t    port = ':' + this.port;\\n\\t  }\\n\\n\\t  // prepend ? to query\\n\\t  if (query.length) {\\n\\t    query = '?' + query;\\n\\t  }\\n\\n\\t  var ipv6 = this.hostname.indexOf(':') !== -1;\\n\\t  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n\\t};\\n\\n\\n/***/ },\\n/* 26 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parser = __webpack_require__(27);\\n\\tvar Emitter = __webpack_require__(35);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Transport;\\n\\n\\t/**\\n\\t * Transport abstract constructor.\\n\\t *\\n\\t * @param {Object} options.\\n\\t * @api private\\n\\t */\\n\\n\\tfunction Transport (opts) {\\n\\t  this.path = opts.path;\\n\\t  this.hostname = opts.hostname;\\n\\t  this.port = opts.port;\\n\\t  this.secure = opts.secure;\\n\\t  this.query = opts.query;\\n\\t  this.timestampParam = opts.timestampParam;\\n\\t  this.timestampRequests = opts.timestampRequests;\\n\\t  this.readyState = '';\\n\\t  this.agent = opts.agent || false;\\n\\t  this.socket = opts.socket;\\n\\t  this.enablesXDR = opts.enablesXDR;\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx;\\n\\t  this.key = opts.key;\\n\\t  this.passphrase = opts.passphrase;\\n\\t  this.cert = opts.cert;\\n\\t  this.ca = opts.ca;\\n\\t  this.ciphers = opts.ciphers;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized;\\n\\t  this.forceNode = opts.forceNode;\\n\\n\\t  // other options for Node.js client\\n\\t  this.extraHeaders = opts.extraHeaders;\\n\\t  this.localAddress = opts.localAddress;\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Transport.prototype);\\n\\n\\t/**\\n\\t * Emits an error.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Transport} for chaining\\n\\t * @api public\\n\\t */\\n\\n\\tTransport.prototype.onError = function (msg, desc) {\\n\\t  var err = new Error(msg);\\n\\t  err.type = 'TransportError';\\n\\t  err.description = desc;\\n\\t  this.emit('error', err);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Opens the transport.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tTransport.prototype.open = function () {\\n\\t  if ('closed' === this.readyState || '' === this.readyState) {\\n\\t    this.readyState = 'opening';\\n\\t    this.doOpen();\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Closes the transport.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.close = function () {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState) {\\n\\t    this.doClose();\\n\\t    this.onClose();\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends multiple packets.\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.send = function (packets) {\\n\\t  if ('open' === this.readyState) {\\n\\t    this.write(packets);\\n\\t  } else {\\n\\t    throw new Error('Transport not open');\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon open\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onOpen = function () {\\n\\t  this.readyState = 'open';\\n\\t  this.writable = true;\\n\\t  this.emit('open');\\n\\t};\\n\\n\\t/**\\n\\t * Called with data.\\n\\t *\\n\\t * @param {String} data\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onData = function (data) {\\n\\t  var packet = parser.decodePacket(data, this.socket.binaryType);\\n\\t  this.onPacket(packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called with a decoded packet.\\n\\t */\\n\\n\\tTransport.prototype.onPacket = function (packet) {\\n\\t  this.emit('packet', packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onClose = function () {\\n\\t  this.readyState = 'closed';\\n\\t  this.emit('close');\\n\\t};\\n\\n\\n/***/ },\\n/* 27 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar keys = __webpack_require__(28);\\n\\tvar hasBinary = __webpack_require__(29);\\n\\tvar sliceBuffer = __webpack_require__(30);\\n\\tvar after = __webpack_require__(31);\\n\\tvar utf8 = __webpack_require__(32);\\n\\n\\tvar base64encoder;\\n\\tif (global && global.ArrayBuffer) {\\n\\t  base64encoder = __webpack_require__(33);\\n\\t}\\n\\n\\t/**\\n\\t * Check if we are running an android browser. That requires us to use\\n\\t * ArrayBuffer with polling transports...\\n\\t *\\n\\t * http://ghinda.net/jpeg-blob-ajax-android/\\n\\t */\\n\\n\\tvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\\n\\n\\t/**\\n\\t * Check if we are running in PhantomJS.\\n\\t * Uploading a Blob with PhantomJS does not work correctly, as reported here:\\n\\t * https://github.com/ariya/phantomjs/issues/11395\\n\\t * @type boolean\\n\\t */\\n\\tvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\\n\\n\\t/**\\n\\t * When true, avoids using Blobs to encode payloads.\\n\\t * @type boolean\\n\\t */\\n\\tvar dontSendBlobs = isAndroid || isPhantomJS;\\n\\n\\t/**\\n\\t * Current protocol version.\\n\\t */\\n\\n\\texports.protocol = 3;\\n\\n\\t/**\\n\\t * Packet types.\\n\\t */\\n\\n\\tvar packets = exports.packets = {\\n\\t    open:     0    // non-ws\\n\\t  , close:    1    // non-ws\\n\\t  , ping:     2\\n\\t  , pong:     3\\n\\t  , message:  4\\n\\t  , upgrade:  5\\n\\t  , noop:     6\\n\\t};\\n\\n\\tvar packetslist = keys(packets);\\n\\n\\t/**\\n\\t * Premade error packet.\\n\\t */\\n\\n\\tvar err = { type: 'error', data: 'parser error' };\\n\\n\\t/**\\n\\t * Create a blob api even for blob builder when vendor prefixes exist\\n\\t */\\n\\n\\tvar Blob = __webpack_require__(34);\\n\\n\\t/**\\n\\t * Encodes a packet.\\n\\t *\\n\\t *     <packet type id> [ <data> ]\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *     5hello world\\n\\t *     3\\n\\t *     4\\n\\t *\\n\\t * Binary is encoded in an identical principle\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\\n\\t  if ('function' == typeof supportsBinary) {\\n\\t    callback = supportsBinary;\\n\\t    supportsBinary = false;\\n\\t  }\\n\\n\\t  if ('function' == typeof utf8encode) {\\n\\t    callback = utf8encode;\\n\\t    utf8encode = null;\\n\\t  }\\n\\n\\t  var data = (packet.data === undefined)\\n\\t    ? undefined\\n\\t    : packet.data.buffer || packet.data;\\n\\n\\t  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\\n\\t    return encodeArrayBuffer(packet, supportsBinary, callback);\\n\\t  } else if (Blob && data instanceof global.Blob) {\\n\\t    return encodeBlob(packet, supportsBinary, callback);\\n\\t  }\\n\\n\\t  // might be an object with { base64: true, data: dataAsBase64String }\\n\\t  if (data && data.base64) {\\n\\t    return encodeBase64Object(packet, callback);\\n\\t  }\\n\\n\\t  // Sending data as a utf-8 string\\n\\t  var encoded = packets[packet.type];\\n\\n\\t  // data fragment is optional\\n\\t  if (undefined !== packet.data) {\\n\\t    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\\n\\t  }\\n\\n\\t  return callback('' + encoded);\\n\\n\\t};\\n\\n\\tfunction encodeBase64Object(packet, callback) {\\n\\t  // packet data is an object { base64: true, data: dataAsBase64String }\\n\\t  var message = 'b' + exports.packets[packet.type] + packet.data.data;\\n\\t  return callback(message);\\n\\t}\\n\\n\\t/**\\n\\t * Encode packet helpers for binary types\\n\\t */\\n\\n\\tfunction encodeArrayBuffer(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  var data = packet.data;\\n\\t  var contentArray = new Uint8Array(data);\\n\\t  var resultBuffer = new Uint8Array(1 + data.byteLength);\\n\\n\\t  resultBuffer[0] = packets[packet.type];\\n\\t  for (var i = 0; i < contentArray.length; i++) {\\n\\t    resultBuffer[i+1] = contentArray[i];\\n\\t  }\\n\\n\\t  return callback(resultBuffer.buffer);\\n\\t}\\n\\n\\tfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  var fr = new FileReader();\\n\\t  fr.onload = function() {\\n\\t    packet.data = fr.result;\\n\\t    exports.encodePacket(packet, supportsBinary, true, callback);\\n\\t  };\\n\\t  return fr.readAsArrayBuffer(packet.data);\\n\\t}\\n\\n\\tfunction encodeBlob(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  if (dontSendBlobs) {\\n\\t    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\\n\\t  }\\n\\n\\t  var length = new Uint8Array(1);\\n\\t  length[0] = packets[packet.type];\\n\\t  var blob = new Blob([length.buffer, packet.data]);\\n\\n\\t  return callback(blob);\\n\\t}\\n\\n\\t/**\\n\\t * Encodes a packet with binary data in a base64 string\\n\\t *\\n\\t * @param {Object} packet, has `type` and `data`\\n\\t * @return {String} base64 encoded message\\n\\t */\\n\\n\\texports.encodeBase64Packet = function(packet, callback) {\\n\\t  var message = 'b' + exports.packets[packet.type];\\n\\t  if (Blob && packet.data instanceof global.Blob) {\\n\\t    var fr = new FileReader();\\n\\t    fr.onload = function() {\\n\\t      var b64 = fr.result.split(',')[1];\\n\\t      callback(message + b64);\\n\\t    };\\n\\t    return fr.readAsDataURL(packet.data);\\n\\t  }\\n\\n\\t  var b64data;\\n\\t  try {\\n\\t    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\\n\\t  } catch (e) {\\n\\t    // iPhone Safari doesn't let you apply with typed arrays\\n\\t    var typed = new Uint8Array(packet.data);\\n\\t    var basic = new Array(typed.length);\\n\\t    for (var i = 0; i < typed.length; i++) {\\n\\t      basic[i] = typed[i];\\n\\t    }\\n\\t    b64data = String.fromCharCode.apply(null, basic);\\n\\t  }\\n\\t  message += global.btoa(b64data);\\n\\t  return callback(message);\\n\\t};\\n\\n\\t/**\\n\\t * Decodes a packet. Changes format to Blob if requested.\\n\\t *\\n\\t * @return {Object} with `type` and `data` (if any)\\n\\t * @api private\\n\\t */\\n\\n\\texports.decodePacket = function (data, binaryType, utf8decode) {\\n\\t  if (data === undefined) {\\n\\t    return err;\\n\\t  }\\n\\t  // String data\\n\\t  if (typeof data == 'string') {\\n\\t    if (data.charAt(0) == 'b') {\\n\\t      return exports.decodeBase64Packet(data.substr(1), binaryType);\\n\\t    }\\n\\n\\t    if (utf8decode) {\\n\\t      data = tryDecode(data);\\n\\t      if (data === false) {\\n\\t        return err;\\n\\t      }\\n\\t    }\\n\\t    var type = data.charAt(0);\\n\\n\\t    if (Number(type) != type || !packetslist[type]) {\\n\\t      return err;\\n\\t    }\\n\\n\\t    if (data.length > 1) {\\n\\t      return { type: packetslist[type], data: data.substring(1) };\\n\\t    } else {\\n\\t      return { type: packetslist[type] };\\n\\t    }\\n\\t  }\\n\\n\\t  var asArray = new Uint8Array(data);\\n\\t  var type = asArray[0];\\n\\t  var rest = sliceBuffer(data, 1);\\n\\t  if (Blob && binaryType === 'blob') {\\n\\t    rest = new Blob([rest]);\\n\\t  }\\n\\t  return { type: packetslist[type], data: rest };\\n\\t};\\n\\n\\tfunction tryDecode(data) {\\n\\t  try {\\n\\t    data = utf8.decode(data);\\n\\t  } catch (e) {\\n\\t    return false;\\n\\t  }\\n\\t  return data;\\n\\t}\\n\\n\\t/**\\n\\t * Decodes a packet encoded in a base64 string\\n\\t *\\n\\t * @param {String} base64 encoded message\\n\\t * @return {Object} with `type` and `data` (if any)\\n\\t */\\n\\n\\texports.decodeBase64Packet = function(msg, binaryType) {\\n\\t  var type = packetslist[msg.charAt(0)];\\n\\t  if (!base64encoder) {\\n\\t    return { type: type, data: { base64: true, data: msg.substr(1) } };\\n\\t  }\\n\\n\\t  var data = base64encoder.decode(msg.substr(1));\\n\\n\\t  if (binaryType === 'blob' && Blob) {\\n\\t    data = new Blob([data]);\\n\\t  }\\n\\n\\t  return { type: type, data: data };\\n\\t};\\n\\n\\t/**\\n\\t * Encodes multiple messages (payload).\\n\\t *\\n\\t *     <length>:data\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *     11:hello world2:hi\\n\\t *\\n\\t * If any contents are binary, they will be encoded as base64 strings. Base64\\n\\t * encoded strings are marked with a b before the length specifier\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePayload = function (packets, supportsBinary, callback) {\\n\\t  if (typeof supportsBinary == 'function') {\\n\\t    callback = supportsBinary;\\n\\t    supportsBinary = null;\\n\\t  }\\n\\n\\t  var isBinary = hasBinary(packets);\\n\\n\\t  if (supportsBinary && isBinary) {\\n\\t    if (Blob && !dontSendBlobs) {\\n\\t      return exports.encodePayloadAsBlob(packets, callback);\\n\\t    }\\n\\n\\t    return exports.encodePayloadAsArrayBuffer(packets, callback);\\n\\t  }\\n\\n\\t  if (!packets.length) {\\n\\t    return callback('0:');\\n\\t  }\\n\\n\\t  function setLengthHeader(message) {\\n\\t    return message.length + ':' + message;\\n\\t  }\\n\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\\n\\t      doneCallback(null, setLengthHeader(message));\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, results) {\\n\\t    return callback(results.join(''));\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Async array map using after\\n\\t */\\n\\n\\tfunction map(ary, each, done) {\\n\\t  var result = new Array(ary.length);\\n\\t  var next = after(ary.length, done);\\n\\n\\t  var eachWithIndex = function(i, el, cb) {\\n\\t    each(el, function(error, msg) {\\n\\t      result[i] = msg;\\n\\t      cb(error, result);\\n\\t    });\\n\\t  };\\n\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    eachWithIndex(i, ary[i], next);\\n\\t  }\\n\\t}\\n\\n\\t/*\\n\\t * Decodes data when a payload is maybe expected. Possible binary contents are\\n\\t * decoded from their base64 representation\\n\\t *\\n\\t * @param {String} data, callback method\\n\\t * @api public\\n\\t */\\n\\n\\texports.decodePayload = function (data, binaryType, callback) {\\n\\t  if (typeof data != 'string') {\\n\\t    return exports.decodePayloadAsBinary(data, binaryType, callback);\\n\\t  }\\n\\n\\t  if (typeof binaryType === 'function') {\\n\\t    callback = binaryType;\\n\\t    binaryType = null;\\n\\t  }\\n\\n\\t  var packet;\\n\\t  if (data == '') {\\n\\t    // parser error - ignoring payload\\n\\t    return callback(err, 0, 1);\\n\\t  }\\n\\n\\t  var length = ''\\n\\t    , n, msg;\\n\\n\\t  for (var i = 0, l = data.length; i < l; i++) {\\n\\t    var chr = data.charAt(i);\\n\\n\\t    if (':' != chr) {\\n\\t      length += chr;\\n\\t    } else {\\n\\t      if ('' == length || (length != (n = Number(length)))) {\\n\\t        // parser error - ignoring payload\\n\\t        return callback(err, 0, 1);\\n\\t      }\\n\\n\\t      msg = data.substr(i + 1, n);\\n\\n\\t      if (length != msg.length) {\\n\\t        // parser error - ignoring payload\\n\\t        return callback(err, 0, 1);\\n\\t      }\\n\\n\\t      if (msg.length) {\\n\\t        packet = exports.decodePacket(msg, binaryType, true);\\n\\n\\t        if (err.type == packet.type && err.data == packet.data) {\\n\\t          // parser error in individual packet - ignoring payload\\n\\t          return callback(err, 0, 1);\\n\\t        }\\n\\n\\t        var ret = callback(packet, i + n, l);\\n\\t        if (false === ret) return;\\n\\t      }\\n\\n\\t      // advance cursor\\n\\t      i += n;\\n\\t      length = '';\\n\\t    }\\n\\t  }\\n\\n\\t  if (length != '') {\\n\\t    // parser error - ignoring payload\\n\\t    return callback(err, 0, 1);\\n\\t  }\\n\\n\\t};\\n\\n\\t/**\\n\\t * Encodes multiple messages (payload) as binary.\\n\\t *\\n\\t * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\\n\\t * 255><data>\\n\\t *\\n\\t * Example:\\n\\t * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @return {ArrayBuffer} encoded payload\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePayloadAsArrayBuffer = function(packets, callback) {\\n\\t  if (!packets.length) {\\n\\t    return callback(new ArrayBuffer(0));\\n\\t  }\\n\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, true, true, function(data) {\\n\\t      return doneCallback(null, data);\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, encodedPackets) {\\n\\t    var totalLength = encodedPackets.reduce(function(acc, p) {\\n\\t      var len;\\n\\t      if (typeof p === 'string'){\\n\\t        len = p.length;\\n\\t      } else {\\n\\t        len = p.byteLength;\\n\\t      }\\n\\t      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\\n\\t    }, 0);\\n\\n\\t    var resultArray = new Uint8Array(totalLength);\\n\\n\\t    var bufferIndex = 0;\\n\\t    encodedPackets.forEach(function(p) {\\n\\t      var isString = typeof p === 'string';\\n\\t      var ab = p;\\n\\t      if (isString) {\\n\\t        var view = new Uint8Array(p.length);\\n\\t        for (var i = 0; i < p.length; i++) {\\n\\t          view[i] = p.charCodeAt(i);\\n\\t        }\\n\\t        ab = view.buffer;\\n\\t      }\\n\\n\\t      if (isString) { // not true binary\\n\\t        resultArray[bufferIndex++] = 0;\\n\\t      } else { // true binary\\n\\t        resultArray[bufferIndex++] = 1;\\n\\t      }\\n\\n\\t      var lenStr = ab.byteLength.toString();\\n\\t      for (var i = 0; i < lenStr.length; i++) {\\n\\t        resultArray[bufferIndex++] = parseInt(lenStr[i]);\\n\\t      }\\n\\t      resultArray[bufferIndex++] = 255;\\n\\n\\t      var view = new Uint8Array(ab);\\n\\t      for (var i = 0; i < view.length; i++) {\\n\\t        resultArray[bufferIndex++] = view[i];\\n\\t      }\\n\\t    });\\n\\n\\t    return callback(resultArray.buffer);\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Encode as Blob\\n\\t */\\n\\n\\texports.encodePayloadAsBlob = function(packets, callback) {\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, true, true, function(encoded) {\\n\\t      var binaryIdentifier = new Uint8Array(1);\\n\\t      binaryIdentifier[0] = 1;\\n\\t      if (typeof encoded === 'string') {\\n\\t        var view = new Uint8Array(encoded.length);\\n\\t        for (var i = 0; i < encoded.length; i++) {\\n\\t          view[i] = encoded.charCodeAt(i);\\n\\t        }\\n\\t        encoded = view.buffer;\\n\\t        binaryIdentifier[0] = 0;\\n\\t      }\\n\\n\\t      var len = (encoded instanceof ArrayBuffer)\\n\\t        ? encoded.byteLength\\n\\t        : encoded.size;\\n\\n\\t      var lenStr = len.toString();\\n\\t      var lengthAry = new Uint8Array(lenStr.length + 1);\\n\\t      for (var i = 0; i < lenStr.length; i++) {\\n\\t        lengthAry[i] = parseInt(lenStr[i]);\\n\\t      }\\n\\t      lengthAry[lenStr.length] = 255;\\n\\n\\t      if (Blob) {\\n\\t        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\\n\\t        doneCallback(null, blob);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, results) {\\n\\t    return callback(new Blob(results));\\n\\t  });\\n\\t};\\n\\n\\t/*\\n\\t * Decodes data when a payload is maybe expected. Strings are decoded by\\n\\t * interpreting each byte as a key code for entries marked to start with 0. See\\n\\t * description of encodePayloadAsBinary\\n\\t *\\n\\t * @param {ArrayBuffer} data, callback method\\n\\t * @api public\\n\\t */\\n\\n\\texports.decodePayloadAsBinary = function (data, binaryType, callback) {\\n\\t  if (typeof binaryType === 'function') {\\n\\t    callback = binaryType;\\n\\t    binaryType = null;\\n\\t  }\\n\\n\\t  var bufferTail = data;\\n\\t  var buffers = [];\\n\\n\\t  var numberTooLong = false;\\n\\t  while (bufferTail.byteLength > 0) {\\n\\t    var tailArray = new Uint8Array(bufferTail);\\n\\t    var isString = tailArray[0] === 0;\\n\\t    var msgLength = '';\\n\\n\\t    for (var i = 1; ; i++) {\\n\\t      if (tailArray[i] == 255) break;\\n\\n\\t      if (msgLength.length > 310) {\\n\\t        numberTooLong = true;\\n\\t        break;\\n\\t      }\\n\\n\\t      msgLength += tailArray[i];\\n\\t    }\\n\\n\\t    if(numberTooLong) return callback(err, 0, 1);\\n\\n\\t    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\\n\\t    msgLength = parseInt(msgLength);\\n\\n\\t    var msg = sliceBuffer(bufferTail, 0, msgLength);\\n\\t    if (isString) {\\n\\t      try {\\n\\t        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\\n\\t      } catch (e) {\\n\\t        // iPhone Safari doesn't let you apply to typed arrays\\n\\t        var typed = new Uint8Array(msg);\\n\\t        msg = '';\\n\\t        for (var i = 0; i < typed.length; i++) {\\n\\t          msg += String.fromCharCode(typed[i]);\\n\\t        }\\n\\t      }\\n\\t    }\\n\\n\\t    buffers.push(msg);\\n\\t    bufferTail = sliceBuffer(bufferTail, msgLength);\\n\\t  }\\n\\n\\t  var total = buffers.length;\\n\\t  buffers.forEach(function(buffer, i) {\\n\\t    callback(exports.decodePacket(buffer, binaryType, true), i, total);\\n\\t  });\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 28 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Gets the keys for an object.\\n\\t *\\n\\t * @return {Array} keys\\n\\t * @api private\\n\\t */\\n\\n\\tmodule.exports = Object.keys || function keys (obj){\\n\\t  var arr = [];\\n\\t  var has = Object.prototype.hasOwnProperty;\\n\\n\\t  for (var i in obj) {\\n\\t    if (has.call(obj, i)) {\\n\\t      arr.push(i);\\n\\t    }\\n\\t  }\\n\\t  return arr;\\n\\t};\\n\\n\\n/***/ },\\n/* 29 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\t/*\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar isArray = __webpack_require__(15);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = hasBinary;\\n\\n\\t/**\\n\\t * Checks for binary data.\\n\\t *\\n\\t * Right now only Buffer and ArrayBuffer are supported..\\n\\t *\\n\\t * @param {Object} anything\\n\\t * @api public\\n\\t */\\n\\n\\tfunction hasBinary(data) {\\n\\n\\t  function _hasBinary(obj) {\\n\\t    if (!obj) return false;\\n\\n\\t    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\\n\\t         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||\\n\\t         (global.Blob && obj instanceof Blob) ||\\n\\t         (global.File && obj instanceof File)\\n\\t        ) {\\n\\t      return true;\\n\\t    }\\n\\n\\t    if (isArray(obj)) {\\n\\t      for (var i = 0; i < obj.length; i++) {\\n\\t          if (_hasBinary(obj[i])) {\\n\\t              return true;\\n\\t          }\\n\\t      }\\n\\t    } else if (obj && 'object' == typeof obj) {\\n\\t      // see: https://github.com/Automattic/has-binary/pull/4\\n\\t      if (obj.toJSON && 'function' == typeof obj.toJSON) {\\n\\t        obj = obj.toJSON();\\n\\t      }\\n\\n\\t      for (var key in obj) {\\n\\t        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\\n\\t          return true;\\n\\t        }\\n\\t      }\\n\\t    }\\n\\n\\t    return false;\\n\\t  }\\n\\n\\t  return _hasBinary(data);\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 30 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * An abstraction for slicing an arraybuffer even when\\n\\t * ArrayBuffer.prototype.slice is not supported\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(arraybuffer, start, end) {\\n\\t  var bytes = arraybuffer.byteLength;\\n\\t  start = start || 0;\\n\\t  end = end || bytes;\\n\\n\\t  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\\n\\n\\t  if (start < 0) { start += bytes; }\\n\\t  if (end < 0) { end += bytes; }\\n\\t  if (end > bytes) { end = bytes; }\\n\\n\\t  if (start >= bytes || start >= end || bytes === 0) {\\n\\t    return new ArrayBuffer(0);\\n\\t  }\\n\\n\\t  var abv = new Uint8Array(arraybuffer);\\n\\t  var result = new Uint8Array(end - start);\\n\\t  for (var i = start, ii = 0; i < end; i++, ii++) {\\n\\t    result[ii] = abv[i];\\n\\t  }\\n\\t  return result.buffer;\\n\\t};\\n\\n\\n/***/ },\\n/* 31 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = after\\n\\n\\tfunction after(count, callback, err_cb) {\\n\\t    var bail = false\\n\\t    err_cb = err_cb || noop\\n\\t    proxy.count = count\\n\\n\\t    return (count === 0) ? callback() : proxy\\n\\n\\t    function proxy(err, result) {\\n\\t        if (proxy.count <= 0) {\\n\\t            throw new Error('after called too many times')\\n\\t        }\\n\\t        --proxy.count\\n\\n\\t        // after first error, rest are passed to err_cb\\n\\t        if (err) {\\n\\t            bail = true\\n\\t            callback(err)\\n\\t            // future error callbacks will go to error handler\\n\\t            callback = err_cb\\n\\t        } else if (proxy.count === 0 && !bail) {\\n\\t            callback(null, result)\\n\\t        }\\n\\t    }\\n\\t}\\n\\n\\tfunction noop() {}\\n\\n\\n/***/ },\\n/* 32 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/wtf8 v1.0.0 by @mathias */\\n\\t;(function(root) {\\n\\n\\t\\t// Detect free variables `exports`\\n\\t\\tvar freeExports = typeof exports == 'object' && exports;\\n\\n\\t\\t// Detect free variable `module`\\n\\t\\tvar freeModule = typeof module == 'object' && module &&\\n\\t\\t\\tmodule.exports == freeExports && module;\\n\\n\\t\\t// Detect free variable `global`, from Node.js or Browserified code,\\n\\t\\t// and use it as `root`\\n\\t\\tvar freeGlobal = typeof global == 'object' && global;\\n\\t\\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\\n\\t\\t\\troot = freeGlobal;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tvar stringFromCharCode = String.fromCharCode;\\n\\n\\t\\t// Taken from https://mths.be/punycode\\n\\t\\tfunction ucs2decode(string) {\\n\\t\\t\\tvar output = [];\\n\\t\\t\\tvar counter = 0;\\n\\t\\t\\tvar length = string.length;\\n\\t\\t\\tvar value;\\n\\t\\t\\tvar extra;\\n\\t\\t\\twhile (counter < length) {\\n\\t\\t\\t\\tvalue = string.charCodeAt(counter++);\\n\\t\\t\\t\\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\\n\\t\\t\\t\\t\\t// high surrogate, and there is a next character\\n\\t\\t\\t\\t\\textra = string.charCodeAt(counter++);\\n\\t\\t\\t\\t\\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\\n\\t\\t\\t\\t\\t\\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// unmatched surrogate; only append this code unit, in case the next\\n\\t\\t\\t\\t\\t\\t// code unit is the high surrogate of a surrogate pair\\n\\t\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t\\t\\tcounter--;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn output;\\n\\t\\t}\\n\\n\\t\\t// Taken from https://mths.be/punycode\\n\\t\\tfunction ucs2encode(array) {\\n\\t\\t\\tvar length = array.length;\\n\\t\\t\\tvar index = -1;\\n\\t\\t\\tvar value;\\n\\t\\t\\tvar output = '';\\n\\t\\t\\twhile (++index < length) {\\n\\t\\t\\t\\tvalue = array[index];\\n\\t\\t\\t\\tif (value > 0xFFFF) {\\n\\t\\t\\t\\t\\tvalue -= 0x10000;\\n\\t\\t\\t\\t\\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\\n\\t\\t\\t\\t\\tvalue = 0xDC00 | value & 0x3FF;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\toutput += stringFromCharCode(value);\\n\\t\\t\\t}\\n\\t\\t\\treturn output;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tfunction createByte(codePoint, shift) {\\n\\t\\t\\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\\n\\t\\t}\\n\\n\\t\\tfunction encodeCodePoint(codePoint) {\\n\\t\\t\\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\\n\\t\\t\\t\\treturn stringFromCharCode(codePoint);\\n\\t\\t\\t}\\n\\t\\t\\tvar symbol = '';\\n\\t\\t\\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\\n\\t\\t\\t}\\n\\t\\t\\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t\\t}\\n\\t\\t\\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 12);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t\\t}\\n\\t\\t\\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\\n\\t\\t\\treturn symbol;\\n\\t\\t}\\n\\n\\t\\tfunction wtf8encode(string) {\\n\\t\\t\\tvar codePoints = ucs2decode(string);\\n\\t\\t\\tvar length = codePoints.length;\\n\\t\\t\\tvar index = -1;\\n\\t\\t\\tvar codePoint;\\n\\t\\t\\tvar byteString = '';\\n\\t\\t\\twhile (++index < length) {\\n\\t\\t\\t\\tcodePoint = codePoints[index];\\n\\t\\t\\t\\tbyteString += encodeCodePoint(codePoint);\\n\\t\\t\\t}\\n\\t\\t\\treturn byteString;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tfunction readContinuationByte() {\\n\\t\\t\\tif (byteIndex >= byteCount) {\\n\\t\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar continuationByte = byteArray[byteIndex] & 0xFF;\\n\\t\\t\\tbyteIndex++;\\n\\n\\t\\t\\tif ((continuationByte & 0xC0) == 0x80) {\\n\\t\\t\\t\\treturn continuationByte & 0x3F;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we end up here, it’s not a continuation byte.\\n\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t}\\n\\n\\t\\tfunction decodeSymbol() {\\n\\t\\t\\tvar byte1;\\n\\t\\t\\tvar byte2;\\n\\t\\t\\tvar byte3;\\n\\t\\t\\tvar byte4;\\n\\t\\t\\tvar codePoint;\\n\\n\\t\\t\\tif (byteIndex > byteCount) {\\n\\t\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (byteIndex == byteCount) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Read the first byte.\\n\\t\\t\\tbyte1 = byteArray[byteIndex] & 0xFF;\\n\\t\\t\\tbyteIndex++;\\n\\n\\t\\t\\t// 1-byte sequence (no continuation bytes)\\n\\t\\t\\tif ((byte1 & 0x80) == 0) {\\n\\t\\t\\t\\treturn byte1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 2-byte sequence\\n\\t\\t\\tif ((byte1 & 0xE0) == 0xC0) {\\n\\t\\t\\t\\tvar byte2 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\\n\\t\\t\\t\\tif (codePoint >= 0x80) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 3-byte sequence (may include unpaired surrogates)\\n\\t\\t\\tif ((byte1 & 0xF0) == 0xE0) {\\n\\t\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\\n\\t\\t\\t\\tif (codePoint >= 0x0800) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 4-byte sequence\\n\\t\\t\\tif ((byte1 & 0xF8) == 0xF0) {\\n\\t\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\t\\tbyte4 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\\n\\t\\t\\t\\t\\t(byte3 << 0x06) | byte4;\\n\\t\\t\\t\\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthrow Error('Invalid WTF-8 detected');\\n\\t\\t}\\n\\n\\t\\tvar byteArray;\\n\\t\\tvar byteCount;\\n\\t\\tvar byteIndex;\\n\\t\\tfunction wtf8decode(byteString) {\\n\\t\\t\\tbyteArray = ucs2decode(byteString);\\n\\t\\t\\tbyteCount = byteArray.length;\\n\\t\\t\\tbyteIndex = 0;\\n\\t\\t\\tvar codePoints = [];\\n\\t\\t\\tvar tmp;\\n\\t\\t\\twhile ((tmp = decodeSymbol()) !== false) {\\n\\t\\t\\t\\tcodePoints.push(tmp);\\n\\t\\t\\t}\\n\\t\\t\\treturn ucs2encode(codePoints);\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tvar wtf8 = {\\n\\t\\t\\t'version': '1.0.0',\\n\\t\\t\\t'encode': wtf8encode,\\n\\t\\t\\t'decode': wtf8decode\\n\\t\\t};\\n\\n\\t\\t// Some AMD build optimizers, like r.js, check for specific condition patterns\\n\\t\\t// like the following:\\n\\t\\tif (\\n\\t\\t\\ttrue\\n\\t\\t) {\\n\\t\\t\\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\\n\\t\\t\\t\\treturn wtf8;\\n\\t\\t\\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t\\t}\\telse if (freeExports && !freeExports.nodeType) {\\n\\t\\t\\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\\n\\t\\t\\t\\tfreeModule.exports = wtf8;\\n\\t\\t\\t} else { // in Narwhal or RingoJS v0.7.0-\\n\\t\\t\\t\\tvar object = {};\\n\\t\\t\\t\\tvar hasOwnProperty = object.hasOwnProperty;\\n\\t\\t\\t\\tfor (var key in wtf8) {\\n\\t\\t\\t\\t\\thasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else { // in Rhino or a web browser\\n\\t\\t\\troot.wtf8 = wtf8;\\n\\t\\t}\\n\\n\\t}(this));\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))\\n\\n/***/ },\\n/* 33 */\\n/***/ function(module, exports) {\\n\\n\\t/*\\n\\t * base64-arraybuffer\\n\\t * https://github.com/niklasvh/base64-arraybuffer\\n\\t *\\n\\t * Copyright (c) 2012 Niklas von Hertzen\\n\\t * Licensed under the MIT license.\\n\\t */\\n\\t(function(){\\n\\t  \\\"use strict\\\";\\n\\n\\t  var chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\t  // Use a lookup table to find the index.\\n\\t  var lookup = new Uint8Array(256);\\n\\t  for (var i = 0; i < chars.length; i++) {\\n\\t    lookup[chars.charCodeAt(i)] = i;\\n\\t  }\\n\\n\\t  exports.encode = function(arraybuffer) {\\n\\t    var bytes = new Uint8Array(arraybuffer),\\n\\t    i, len = bytes.length, base64 = \\\"\\\";\\n\\n\\t    for (i = 0; i < len; i+=3) {\\n\\t      base64 += chars[bytes[i] >> 2];\\n\\t      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\\n\\t      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\\n\\t      base64 += chars[bytes[i + 2] & 63];\\n\\t    }\\n\\n\\t    if ((len % 3) === 2) {\\n\\t      base64 = base64.substring(0, base64.length - 1) + \\\"=\\\";\\n\\t    } else if (len % 3 === 1) {\\n\\t      base64 = base64.substring(0, base64.length - 2) + \\\"==\\\";\\n\\t    }\\n\\n\\t    return base64;\\n\\t  };\\n\\n\\t  exports.decode =  function(base64) {\\n\\t    var bufferLength = base64.length * 0.75,\\n\\t    len = base64.length, i, p = 0,\\n\\t    encoded1, encoded2, encoded3, encoded4;\\n\\n\\t    if (base64[base64.length - 1] === \\\"=\\\") {\\n\\t      bufferLength--;\\n\\t      if (base64[base64.length - 2] === \\\"=\\\") {\\n\\t        bufferLength--;\\n\\t      }\\n\\t    }\\n\\n\\t    var arraybuffer = new ArrayBuffer(bufferLength),\\n\\t    bytes = new Uint8Array(arraybuffer);\\n\\n\\t    for (i = 0; i < len; i+=4) {\\n\\t      encoded1 = lookup[base64.charCodeAt(i)];\\n\\t      encoded2 = lookup[base64.charCodeAt(i+1)];\\n\\t      encoded3 = lookup[base64.charCodeAt(i+2)];\\n\\t      encoded4 = lookup[base64.charCodeAt(i+3)];\\n\\n\\t      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\\n\\t      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\\n\\t      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\\n\\t    }\\n\\n\\t    return arraybuffer;\\n\\t  };\\n\\t})();\\n\\n\\n/***/ },\\n/* 34 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Create a blob builder even when vendor prefixes exist\\n\\t */\\n\\n\\tvar BlobBuilder = global.BlobBuilder\\n\\t  || global.WebKitBlobBuilder\\n\\t  || global.MSBlobBuilder\\n\\t  || global.MozBlobBuilder;\\n\\n\\t/**\\n\\t * Check if Blob constructor is supported\\n\\t */\\n\\n\\tvar blobSupported = (function() {\\n\\t  try {\\n\\t    var a = new Blob(['hi']);\\n\\t    return a.size === 2;\\n\\t  } catch(e) {\\n\\t    return false;\\n\\t  }\\n\\t})();\\n\\n\\t/**\\n\\t * Check if Blob constructor supports ArrayBufferViews\\n\\t * Fails in Safari 6, so we need to map to ArrayBuffers there.\\n\\t */\\n\\n\\tvar blobSupportsArrayBufferView = blobSupported && (function() {\\n\\t  try {\\n\\t    var b = new Blob([new Uint8Array([1,2])]);\\n\\t    return b.size === 2;\\n\\t  } catch(e) {\\n\\t    return false;\\n\\t  }\\n\\t})();\\n\\n\\t/**\\n\\t * Check if BlobBuilder is supported\\n\\t */\\n\\n\\tvar blobBuilderSupported = BlobBuilder\\n\\t  && BlobBuilder.prototype.append\\n\\t  && BlobBuilder.prototype.getBlob;\\n\\n\\t/**\\n\\t * Helper function that maps ArrayBufferViews to ArrayBuffers\\n\\t * Used by BlobBuilder constructor and old browsers that didn't\\n\\t * support it in the Blob constructor.\\n\\t */\\n\\n\\tfunction mapArrayBufferViews(ary) {\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    var chunk = ary[i];\\n\\t    if (chunk.buffer instanceof ArrayBuffer) {\\n\\t      var buf = chunk.buffer;\\n\\n\\t      // if this is a subarray, make a copy so we only\\n\\t      // include the subarray region from the underlying buffer\\n\\t      if (chunk.byteLength !== buf.byteLength) {\\n\\t        var copy = new Uint8Array(chunk.byteLength);\\n\\t        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\\n\\t        buf = copy.buffer;\\n\\t      }\\n\\n\\t      ary[i] = buf;\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\tfunction BlobBuilderConstructor(ary, options) {\\n\\t  options = options || {};\\n\\n\\t  var bb = new BlobBuilder();\\n\\t  mapArrayBufferViews(ary);\\n\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    bb.append(ary[i]);\\n\\t  }\\n\\n\\t  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\\n\\t};\\n\\n\\tfunction BlobConstructor(ary, options) {\\n\\t  mapArrayBufferViews(ary);\\n\\t  return new Blob(ary, options || {});\\n\\t};\\n\\n\\tmodule.exports = (function() {\\n\\t  if (blobSupported) {\\n\\t    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\\n\\t  } else if (blobBuilderSupported) {\\n\\t    return BlobBuilderConstructor;\\n\\t  } else {\\n\\t    return undefined;\\n\\t  }\\n\\t})();\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 35 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\r\\n\\t/**\\r\\n\\t * Expose `Emitter`.\\r\\n\\t */\\r\\n\\r\\n\\tif (true) {\\r\\n\\t  module.exports = Emitter;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Initialize a new `Emitter`.\\r\\n\\t *\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tfunction Emitter(obj) {\\r\\n\\t  if (obj) return mixin(obj);\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Mixin the emitter properties.\\r\\n\\t *\\r\\n\\t * @param {Object} obj\\r\\n\\t * @return {Object}\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tfunction mixin(obj) {\\r\\n\\t  for (var key in Emitter.prototype) {\\r\\n\\t    obj[key] = Emitter.prototype[key];\\r\\n\\t  }\\r\\n\\t  return obj;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Listen on the given `event` with `fn`.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.on =\\r\\n\\tEmitter.prototype.addEventListener = function(event, fn){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\\r\\n\\t    .push(fn);\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Adds an `event` listener that will be invoked a single\\r\\n\\t * time then automatically removed.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.once = function(event, fn){\\r\\n\\t  function on() {\\r\\n\\t    this.off(event, on);\\r\\n\\t    fn.apply(this, arguments);\\r\\n\\t  }\\r\\n\\r\\n\\t  on.fn = fn;\\r\\n\\t  this.on(event, on);\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Remove the given callback for `event` or all\\r\\n\\t * registered callbacks.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.off =\\r\\n\\tEmitter.prototype.removeListener =\\r\\n\\tEmitter.prototype.removeAllListeners =\\r\\n\\tEmitter.prototype.removeEventListener = function(event, fn){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\r\\n\\t  // all\\r\\n\\t  if (0 == arguments.length) {\\r\\n\\t    this._callbacks = {};\\r\\n\\t    return this;\\r\\n\\t  }\\r\\n\\r\\n\\t  // specific event\\r\\n\\t  var callbacks = this._callbacks['$' + event];\\r\\n\\t  if (!callbacks) return this;\\r\\n\\r\\n\\t  // remove all handlers\\r\\n\\t  if (1 == arguments.length) {\\r\\n\\t    delete this._callbacks['$' + event];\\r\\n\\t    return this;\\r\\n\\t  }\\r\\n\\r\\n\\t  // remove specific handler\\r\\n\\t  var cb;\\r\\n\\t  for (var i = 0; i < callbacks.length; i++) {\\r\\n\\t    cb = callbacks[i];\\r\\n\\t    if (cb === fn || cb.fn === fn) {\\r\\n\\t      callbacks.splice(i, 1);\\r\\n\\t      break;\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Emit `event` with the given args.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Mixed} ...\\r\\n\\t * @return {Emitter}\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.emit = function(event){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  var args = [].slice.call(arguments, 1)\\r\\n\\t    , callbacks = this._callbacks['$' + event];\\r\\n\\r\\n\\t  if (callbacks) {\\r\\n\\t    callbacks = callbacks.slice(0);\\r\\n\\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\\r\\n\\t      callbacks[i].apply(this, args);\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Return array of callbacks for `event`.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @return {Array}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.listeners = function(event){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  return this._callbacks['$' + event] || [];\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Check if this emitter has `event` handlers.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @return {Boolean}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.hasListeners = function(event){\\r\\n\\t  return !! this.listeners(event).length;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 36 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\r\\n\\t * Compiles a querystring\\r\\n\\t * Returns string representation of the object\\r\\n\\t *\\r\\n\\t * @param {Object}\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\texports.encode = function (obj) {\\r\\n\\t  var str = '';\\r\\n\\r\\n\\t  for (var i in obj) {\\r\\n\\t    if (obj.hasOwnProperty(i)) {\\r\\n\\t      if (str.length) str += '&';\\r\\n\\t      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\r\\n\\t  return str;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Parses a simple querystring into an object\\r\\n\\t *\\r\\n\\t * @param {String} qs\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\texports.decode = function(qs){\\r\\n\\t  var qry = {};\\r\\n\\t  var pairs = qs.split('&');\\r\\n\\t  for (var i = 0, l = pairs.length; i < l; i++) {\\r\\n\\t    var pair = pairs[i].split('=');\\r\\n\\t    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\\r\\n\\t  }\\r\\n\\t  return qry;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 37 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\tmodule.exports = function(a, b){\\n\\t  var fn = function(){};\\n\\t  fn.prototype = b.prototype;\\n\\t  a.prototype = new fn;\\n\\t  a.prototype.constructor = a;\\n\\t};\\n\\n/***/ },\\n/* 38 */\\n/***/ function(module, exports) {\\n\\n\\t'use strict';\\n\\n\\tvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\\n\\t  , length = 64\\n\\t  , map = {}\\n\\t  , seed = 0\\n\\t  , i = 0\\n\\t  , prev;\\n\\n\\t/**\\n\\t * Return a string representing the specified number.\\n\\t *\\n\\t * @param {Number} num The number to convert.\\n\\t * @returns {String} The string representation of the number.\\n\\t * @api public\\n\\t */\\n\\tfunction encode(num) {\\n\\t  var encoded = '';\\n\\n\\t  do {\\n\\t    encoded = alphabet[num % length] + encoded;\\n\\t    num = Math.floor(num / length);\\n\\t  } while (num > 0);\\n\\n\\t  return encoded;\\n\\t}\\n\\n\\t/**\\n\\t * Return the integer value specified by the given string.\\n\\t *\\n\\t * @param {String} str The string to convert.\\n\\t * @returns {Number} The integer value represented by the string.\\n\\t * @api public\\n\\t */\\n\\tfunction decode(str) {\\n\\t  var decoded = 0;\\n\\n\\t  for (i = 0; i < str.length; i++) {\\n\\t    decoded = decoded * length + map[str.charAt(i)];\\n\\t  }\\n\\n\\t  return decoded;\\n\\t}\\n\\n\\t/**\\n\\t * Yeast: A tiny growing id generator.\\n\\t *\\n\\t * @returns {String} A unique id.\\n\\t * @api public\\n\\t */\\n\\tfunction yeast() {\\n\\t  var now = encode(+new Date());\\n\\n\\t  if (now !== prev) return seed = 0, prev = now;\\n\\t  return now +'.'+ encode(seed++);\\n\\t}\\n\\n\\t//\\n\\t// Map each character to its index.\\n\\t//\\n\\tfor (; i < length; i++) map[alphabet[i]] = i;\\n\\n\\t//\\n\\t// Expose the `yeast`, `encode` and `decode` functions.\\n\\t//\\n\\tyeast.encode = encode;\\n\\tyeast.decode = decode;\\n\\tmodule.exports = yeast;\\n\\n\\n/***/ },\\n/* 39 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\t/**\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar Polling = __webpack_require__(25);\\n\\tvar inherit = __webpack_require__(37);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = JSONPPolling;\\n\\n\\t/**\\n\\t * Cached regular expressions.\\n\\t */\\n\\n\\tvar rNewline = /\\\\n/g;\\n\\tvar rEscapedNewline = /\\\\\\\\n/g;\\n\\n\\t/**\\n\\t * Global JSONP callbacks.\\n\\t */\\n\\n\\tvar callbacks;\\n\\n\\t/**\\n\\t * Noop.\\n\\t */\\n\\n\\tfunction empty () { }\\n\\n\\t/**\\n\\t * JSONP Polling constructor.\\n\\t *\\n\\t * @param {Object} opts.\\n\\t * @api public\\n\\t */\\n\\n\\tfunction JSONPPolling (opts) {\\n\\t  Polling.call(this, opts);\\n\\n\\t  this.query = this.query || {};\\n\\n\\t  // define global callbacks array if not present\\n\\t  // we do this here (lazily) to avoid unneeded global pollution\\n\\t  if (!callbacks) {\\n\\t    // we need to consider multiple engines in the same page\\n\\t    if (!global.___eio) global.___eio = [];\\n\\t    callbacks = global.___eio;\\n\\t  }\\n\\n\\t  // callback identifier\\n\\t  this.index = callbacks.length;\\n\\n\\t  // add callback to jsonp global\\n\\t  var self = this;\\n\\t  callbacks.push(function (msg) {\\n\\t    self.onData(msg);\\n\\t  });\\n\\n\\t  // append to query string\\n\\t  this.query.j = this.index;\\n\\n\\t  // prevent spurious errors from being emitted when the window is unloaded\\n\\t  if (global.document && global.addEventListener) {\\n\\t    global.addEventListener('beforeunload', function () {\\n\\t      if (self.script) self.script.onerror = empty;\\n\\t    }, false);\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Polling.\\n\\t */\\n\\n\\tinherit(JSONPPolling, Polling);\\n\\n\\t/*\\n\\t * JSONP only supports binary as base64 encoded strings\\n\\t */\\n\\n\\tJSONPPolling.prototype.supportsBinary = false;\\n\\n\\t/**\\n\\t * Closes the socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doClose = function () {\\n\\t  if (this.script) {\\n\\t    this.script.parentNode.removeChild(this.script);\\n\\t    this.script = null;\\n\\t  }\\n\\n\\t  if (this.form) {\\n\\t    this.form.parentNode.removeChild(this.form);\\n\\t    this.form = null;\\n\\t    this.iframe = null;\\n\\t  }\\n\\n\\t  Polling.prototype.doClose.call(this);\\n\\t};\\n\\n\\t/**\\n\\t * Starts a poll cycle.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doPoll = function () {\\n\\t  var self = this;\\n\\t  var script = document.createElement('script');\\n\\n\\t  if (this.script) {\\n\\t    this.script.parentNode.removeChild(this.script);\\n\\t    this.script = null;\\n\\t  }\\n\\n\\t  script.async = true;\\n\\t  script.src = this.uri();\\n\\t  script.onerror = function (e) {\\n\\t    self.onError('jsonp poll error', e);\\n\\t  };\\n\\n\\t  var insertAt = document.getElementsByTagName('script')[0];\\n\\t  if (insertAt) {\\n\\t    insertAt.parentNode.insertBefore(script, insertAt);\\n\\t  } else {\\n\\t    (document.head || document.body).appendChild(script);\\n\\t  }\\n\\t  this.script = script;\\n\\n\\t  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\\n\\n\\t  if (isUAgecko) {\\n\\t    setTimeout(function () {\\n\\t      var iframe = document.createElement('iframe');\\n\\t      document.body.appendChild(iframe);\\n\\t      document.body.removeChild(iframe);\\n\\t    }, 100);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Writes with a hidden iframe.\\n\\t *\\n\\t * @param {String} data to send\\n\\t * @param {Function} called upon flush.\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doWrite = function (data, fn) {\\n\\t  var self = this;\\n\\n\\t  if (!this.form) {\\n\\t    var form = document.createElement('form');\\n\\t    var area = document.createElement('textarea');\\n\\t    var id = this.iframeId = 'eio_iframe_' + this.index;\\n\\t    var iframe;\\n\\n\\t    form.className = 'socketio';\\n\\t    form.style.position = 'absolute';\\n\\t    form.style.top = '-1000px';\\n\\t    form.style.left = '-1000px';\\n\\t    form.target = id;\\n\\t    form.method = 'POST';\\n\\t    form.setAttribute('accept-charset', 'utf-8');\\n\\t    area.name = 'd';\\n\\t    form.appendChild(area);\\n\\t    document.body.appendChild(form);\\n\\n\\t    this.form = form;\\n\\t    this.area = area;\\n\\t  }\\n\\n\\t  this.form.action = this.uri();\\n\\n\\t  function complete () {\\n\\t    initIframe();\\n\\t    fn();\\n\\t  }\\n\\n\\t  function initIframe () {\\n\\t    if (self.iframe) {\\n\\t      try {\\n\\t        self.form.removeChild(self.iframe);\\n\\t      } catch (e) {\\n\\t        self.onError('jsonp polling iframe removal error', e);\\n\\t      }\\n\\t    }\\n\\n\\t    try {\\n\\t      // ie6 dynamic iframes with target=\\\"\\\" support (thanks Chris Lambacher)\\n\\t      var html = '<iframe src=\\\"javascript:0\\\" name=\\\"' + self.iframeId + '\\\">';\\n\\t      iframe = document.createElement(html);\\n\\t    } catch (e) {\\n\\t      iframe = document.createElement('iframe');\\n\\t      iframe.name = self.iframeId;\\n\\t      iframe.src = 'javascript:0';\\n\\t    }\\n\\n\\t    iframe.id = self.iframeId;\\n\\n\\t    self.form.appendChild(iframe);\\n\\t    self.iframe = iframe;\\n\\t  }\\n\\n\\t  initIframe();\\n\\n\\t  // escape \\\\n to prevent it from being converted into \\\\r\\\\n by some UAs\\n\\t  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\\n\\t  data = data.replace(rEscapedNewline, '\\\\\\\\\\\\n');\\n\\t  this.area.value = data.replace(rNewline, '\\\\\\\\n');\\n\\n\\t  try {\\n\\t    this.form.submit();\\n\\t  } catch (e) {}\\n\\n\\t  if (this.iframe.attachEvent) {\\n\\t    this.iframe.onreadystatechange = function () {\\n\\t      if (self.iframe.readyState === 'complete') {\\n\\t        complete();\\n\\t      }\\n\\t    };\\n\\t  } else {\\n\\t    this.iframe.onload = complete;\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 40 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar Transport = __webpack_require__(26);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar parseqs = __webpack_require__(36);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar yeast = __webpack_require__(38);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:websocket');\\n\\tvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\\n\\tvar NodeWebSocket;\\n\\tif (typeof window === 'undefined') {\\n\\t  try {\\n\\t    NodeWebSocket = __webpack_require__(41);\\n\\t  } catch (e) { }\\n\\t}\\n\\n\\t/**\\n\\t * Get either the `WebSocket` or `MozWebSocket` globals\\n\\t * in the browser or try to resolve WebSocket-compatible\\n\\t * interface exposed by `ws` for Node-like environment.\\n\\t */\\n\\n\\tvar WebSocket = BrowserWebSocket;\\n\\tif (!WebSocket && typeof window === 'undefined') {\\n\\t  WebSocket = NodeWebSocket;\\n\\t}\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = WS;\\n\\n\\t/**\\n\\t * WebSocket transport constructor.\\n\\t *\\n\\t * @api {Object} connection options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction WS (opts) {\\n\\t  var forceBase64 = (opts && opts.forceBase64);\\n\\t  if (forceBase64) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\t  this.perMessageDeflate = opts.perMessageDeflate;\\n\\t  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\\n\\t  if (!this.usingBrowserWebSocket) {\\n\\t    WebSocket = NodeWebSocket;\\n\\t  }\\n\\t  Transport.call(this, opts);\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Transport.\\n\\t */\\n\\n\\tinherit(WS, Transport);\\n\\n\\t/**\\n\\t * Transport name.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tWS.prototype.name = 'websocket';\\n\\n\\t/*\\n\\t * WebSockets support binary\\n\\t */\\n\\n\\tWS.prototype.supportsBinary = true;\\n\\n\\t/**\\n\\t * Opens socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.doOpen = function () {\\n\\t  if (!this.check()) {\\n\\t    // let probe timeout\\n\\t    return;\\n\\t  }\\n\\n\\t  var uri = this.uri();\\n\\t  var protocols = void (0);\\n\\t  var opts = {\\n\\t    agent: this.agent,\\n\\t    perMessageDeflate: this.perMessageDeflate\\n\\t  };\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\t  if (this.extraHeaders) {\\n\\t    opts.headers = this.extraHeaders;\\n\\t  }\\n\\t  if (this.localAddress) {\\n\\t    opts.localAddress = this.localAddress;\\n\\t  }\\n\\n\\t  try {\\n\\t    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\\n\\t  } catch (err) {\\n\\t    return this.emit('error', err);\\n\\t  }\\n\\n\\t  if (this.ws.binaryType === undefined) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\n\\t  if (this.ws.supports && this.ws.supports.binary) {\\n\\t    this.supportsBinary = true;\\n\\t    this.ws.binaryType = 'nodebuffer';\\n\\t  } else {\\n\\t    this.ws.binaryType = 'arraybuffer';\\n\\t  }\\n\\n\\t  this.addEventListeners();\\n\\t};\\n\\n\\t/**\\n\\t * Adds event listeners to the socket\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.addEventListeners = function () {\\n\\t  var self = this;\\n\\n\\t  this.ws.onopen = function () {\\n\\t    self.onOpen();\\n\\t  };\\n\\t  this.ws.onclose = function () {\\n\\t    self.onClose();\\n\\t  };\\n\\t  this.ws.onmessage = function (ev) {\\n\\t    self.onData(ev.data);\\n\\t  };\\n\\t  this.ws.onerror = function (e) {\\n\\t    self.onError('websocket error', e);\\n\\t  };\\n\\t};\\n\\n\\t/**\\n\\t * Writes data to socket.\\n\\t *\\n\\t * @param {Array} array of packets.\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.write = function (packets) {\\n\\t  var self = this;\\n\\t  this.writable = false;\\n\\n\\t  // encodePacket efficient as it uses WS framing\\n\\t  // no need for encodePayload\\n\\t  var total = packets.length;\\n\\t  for (var i = 0, l = total; i < l; i++) {\\n\\t    (function (packet) {\\n\\t      parser.encodePacket(packet, self.supportsBinary, function (data) {\\n\\t        if (!self.usingBrowserWebSocket) {\\n\\t          // always create a new object (GH-437)\\n\\t          var opts = {};\\n\\t          if (packet.options) {\\n\\t            opts.compress = packet.options.compress;\\n\\t          }\\n\\n\\t          if (self.perMessageDeflate) {\\n\\t            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\\n\\t            if (len < self.perMessageDeflate.threshold) {\\n\\t              opts.compress = false;\\n\\t            }\\n\\t          }\\n\\t        }\\n\\n\\t        // Sometimes the websocket has already been closed but the browser didn't\\n\\t        // have a chance of informing us about it yet, in that case send will\\n\\t        // throw an error\\n\\t        try {\\n\\t          if (self.usingBrowserWebSocket) {\\n\\t            // TypeError is thrown when passing the second argument on Safari\\n\\t            self.ws.send(data);\\n\\t          } else {\\n\\t            self.ws.send(data, opts);\\n\\t          }\\n\\t        } catch (e) {\\n\\t          debug('websocket closed before onclose event');\\n\\t        }\\n\\n\\t        --total || done();\\n\\t      });\\n\\t    })(packets[i]);\\n\\t  }\\n\\n\\t  function done () {\\n\\t    self.emit('flush');\\n\\n\\t    // fake drain\\n\\t    // defer to next tick to allow Socket to clear writeBuffer\\n\\t    setTimeout(function () {\\n\\t      self.writable = true;\\n\\t      self.emit('drain');\\n\\t    }, 0);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon close\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.onClose = function () {\\n\\t  Transport.prototype.onClose.call(this);\\n\\t};\\n\\n\\t/**\\n\\t * Closes socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.doClose = function () {\\n\\t  if (typeof this.ws !== 'undefined') {\\n\\t    this.ws.close();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Generates uri for connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.uri = function () {\\n\\t  var query = this.query || {};\\n\\t  var schema = this.secure ? 'wss' : 'ws';\\n\\t  var port = '';\\n\\n\\t  // avoid port if default for schema\\n\\t  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\\n\\t    ('ws' === schema && Number(this.port) !== 80))) {\\n\\t    port = ':' + this.port;\\n\\t  }\\n\\n\\t  // append timestamp to URI\\n\\t  if (this.timestampRequests) {\\n\\t    query[this.timestampParam] = yeast();\\n\\t  }\\n\\n\\t  // communicate binary support capabilities\\n\\t  if (!this.supportsBinary) {\\n\\t    query.b64 = 1;\\n\\t  }\\n\\n\\t  query = parseqs.encode(query);\\n\\n\\t  // prepend ? to query\\n\\t  if (query.length) {\\n\\t    query = '?' + query;\\n\\t  }\\n\\n\\t  var ipv6 = this.hostname.indexOf(':') !== -1;\\n\\t  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n\\t};\\n\\n\\t/**\\n\\t * Feature detection for WebSocket.\\n\\t *\\n\\t * @return {Boolean} whether this transport is available.\\n\\t * @api public\\n\\t */\\n\\n\\tWS.prototype.check = function () {\\n\\t  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 41 */\\n/***/ function(module, exports) {\\n\\n\\t/* (ignored) */\\n\\n/***/ },\\n/* 42 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\tvar indexOf = [].indexOf;\\n\\n\\tmodule.exports = function(arr, obj){\\n\\t  if (indexOf) return arr.indexOf(obj);\\n\\t  for (var i = 0; i < arr.length; ++i) {\\n\\t    if (arr[i] === obj) return i;\\n\\t  }\\n\\t  return -1;\\n\\t};\\n\\n/***/ },\\n/* 43 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\r\\n\\t * JSON parse.\\r\\n\\t *\\r\\n\\t * @see Based on jQuery#parseJSON (MIT) and JSON2\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tvar rvalidchars = /^[\\\\],:{}\\\\s]*$/;\\r\\n\\tvar rvalidescape = /\\\\\\\\(?:[\\\"\\\\\\\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\\r\\n\\tvar rvalidtokens = /\\\"[^\\\"\\\\\\\\\\\\n\\\\r]*\\\"|true|false|null|-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?/g;\\r\\n\\tvar rvalidbraces = /(?:^|:|,)(?:\\\\s*\\\\[)+/g;\\r\\n\\tvar rtrimLeft = /^\\\\s+/;\\r\\n\\tvar rtrimRight = /\\\\s+$/;\\r\\n\\r\\n\\tmodule.exports = function parsejson(data) {\\r\\n\\t  if ('string' != typeof data || !data) {\\r\\n\\t    return null;\\r\\n\\t  }\\r\\n\\r\\n\\t  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\\r\\n\\r\\n\\t  // Attempt to parse using the native JSON parser first\\r\\n\\t  if (global.JSON && JSON.parse) {\\r\\n\\t    return JSON.parse(data);\\r\\n\\t  }\\r\\n\\r\\n\\t  if (rvalidchars.test(data.replace(rvalidescape, '@')\\r\\n\\t      .replace(rvalidtokens, ']')\\r\\n\\t      .replace(rvalidbraces, ''))) {\\r\\n\\t    return (new Function('return ' + data))();\\r\\n\\t  }\\r\\n\\t};\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 44 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parser = __webpack_require__(7);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar toArray = __webpack_require__(45);\\n\\tvar on = __webpack_require__(46);\\n\\tvar bind = __webpack_require__(47);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:socket');\\n\\tvar hasBin = __webpack_require__(29);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = exports = Socket;\\n\\n\\t/**\\n\\t * Internal events (blacklisted).\\n\\t * These events can't be emitted by the user.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tvar events = {\\n\\t  connect: 1,\\n\\t  connect_error: 1,\\n\\t  connect_timeout: 1,\\n\\t  connecting: 1,\\n\\t  disconnect: 1,\\n\\t  error: 1,\\n\\t  reconnect: 1,\\n\\t  reconnect_attempt: 1,\\n\\t  reconnect_failed: 1,\\n\\t  reconnect_error: 1,\\n\\t  reconnecting: 1,\\n\\t  ping: 1,\\n\\t  pong: 1\\n\\t};\\n\\n\\t/**\\n\\t * Shortcut to `Emitter#emit`.\\n\\t */\\n\\n\\tvar emit = Emitter.prototype.emit;\\n\\n\\t/**\\n\\t * `Socket` constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Socket(io, nsp, opts) {\\n\\t  this.io = io;\\n\\t  this.nsp = nsp;\\n\\t  this.json = this; // compat\\n\\t  this.ids = 0;\\n\\t  this.acks = {};\\n\\t  this.receiveBuffer = [];\\n\\t  this.sendBuffer = [];\\n\\t  this.connected = false;\\n\\t  this.disconnected = true;\\n\\t  if (opts && opts.query) {\\n\\t    this.query = opts.query;\\n\\t  }\\n\\t  if (this.io.autoConnect) this.open();\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Socket.prototype);\\n\\n\\t/**\\n\\t * Subscribe to open, close and packet events\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.subEvents = function () {\\n\\t  if (this.subs) return;\\n\\n\\t  var io = this.io;\\n\\t  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];\\n\\t};\\n\\n\\t/**\\n\\t * \\\"Opens\\\" the socket.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.open = Socket.prototype.connect = function () {\\n\\t  if (this.connected) return this;\\n\\n\\t  this.subEvents();\\n\\t  this.io.open(); // ensure open\\n\\t  if ('open' === this.io.readyState) this.onopen();\\n\\t  this.emit('connecting');\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a `message` event.\\n\\t *\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.send = function () {\\n\\t  var args = toArray(arguments);\\n\\t  args.unshift('message');\\n\\t  this.emit.apply(this, args);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Override `emit`.\\n\\t * If the event is in `events`, it's emitted normally.\\n\\t *\\n\\t * @param {String} event name\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.emit = function (ev) {\\n\\t  if (events.hasOwnProperty(ev)) {\\n\\t    emit.apply(this, arguments);\\n\\t    return this;\\n\\t  }\\n\\n\\t  var args = toArray(arguments);\\n\\t  var parserType = parser.EVENT; // default\\n\\t  if (hasBin(args)) {\\n\\t    parserType = parser.BINARY_EVENT;\\n\\t  } // binary\\n\\t  var packet = { type: parserType, data: args };\\n\\n\\t  packet.options = {};\\n\\t  packet.options.compress = !this.flags || false !== this.flags.compress;\\n\\n\\t  // event ack callback\\n\\t  if ('function' === typeof args[args.length - 1]) {\\n\\t    debug('emitting packet with ack id %d', this.ids);\\n\\t    this.acks[this.ids] = args.pop();\\n\\t    packet.id = this.ids++;\\n\\t  }\\n\\n\\t  if (this.connected) {\\n\\t    this.packet(packet);\\n\\t  } else {\\n\\t    this.sendBuffer.push(packet);\\n\\t  }\\n\\n\\t  delete this.flags;\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.packet = function (packet) {\\n\\t  packet.nsp = this.nsp;\\n\\t  this.io.packet(packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine `open`.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onopen = function () {\\n\\t  debug('transport is open - connecting');\\n\\n\\t  // write connect packet if necessary\\n\\t  if ('/' !== this.nsp) {\\n\\t    if (this.query) {\\n\\t      this.packet({ type: parser.CONNECT, query: this.query });\\n\\t    } else {\\n\\t      this.packet({ type: parser.CONNECT });\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine `close`.\\n\\t *\\n\\t * @param {String} reason\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onclose = function (reason) {\\n\\t  debug('close (%s)', reason);\\n\\t  this.connected = false;\\n\\t  this.disconnected = true;\\n\\t  delete this.id;\\n\\t  this.emit('disconnect', reason);\\n\\t};\\n\\n\\t/**\\n\\t * Called with socket packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onpacket = function (packet) {\\n\\t  if (packet.nsp !== this.nsp) return;\\n\\n\\t  switch (packet.type) {\\n\\t    case parser.CONNECT:\\n\\t      this.onconnect();\\n\\t      break;\\n\\n\\t    case parser.EVENT:\\n\\t      this.onevent(packet);\\n\\t      break;\\n\\n\\t    case parser.BINARY_EVENT:\\n\\t      this.onevent(packet);\\n\\t      break;\\n\\n\\t    case parser.ACK:\\n\\t      this.onack(packet);\\n\\t      break;\\n\\n\\t    case parser.BINARY_ACK:\\n\\t      this.onack(packet);\\n\\t      break;\\n\\n\\t    case parser.DISCONNECT:\\n\\t      this.ondisconnect();\\n\\t      break;\\n\\n\\t    case parser.ERROR:\\n\\t      this.emit('error', packet.data);\\n\\t      break;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a server event.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onevent = function (packet) {\\n\\t  var args = packet.data || [];\\n\\t  debug('emitting event %j', args);\\n\\n\\t  if (null != packet.id) {\\n\\t    debug('attaching ack callback to event');\\n\\t    args.push(this.ack(packet.id));\\n\\t  }\\n\\n\\t  if (this.connected) {\\n\\t    emit.apply(this, args);\\n\\t  } else {\\n\\t    this.receiveBuffer.push(args);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Produces an ack callback to emit with an event.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.ack = function (id) {\\n\\t  var self = this;\\n\\t  var sent = false;\\n\\t  return function () {\\n\\t    // prevent double callbacks\\n\\t    if (sent) return;\\n\\t    sent = true;\\n\\t    var args = toArray(arguments);\\n\\t    debug('sending ack %j', args);\\n\\n\\t    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\\n\\t    self.packet({\\n\\t      type: type,\\n\\t      id: id,\\n\\t      data: args\\n\\t    });\\n\\t  };\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a server acknowlegement.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onack = function (packet) {\\n\\t  var ack = this.acks[packet.id];\\n\\t  if ('function' === typeof ack) {\\n\\t    debug('calling ack %s with %j', packet.id, packet.data);\\n\\t    ack.apply(this, packet.data);\\n\\t    delete this.acks[packet.id];\\n\\t  } else {\\n\\t    debug('bad ack %s', packet.id);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon server connect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onconnect = function () {\\n\\t  this.connected = true;\\n\\t  this.disconnected = false;\\n\\t  this.emit('connect');\\n\\t  this.emitBuffered();\\n\\t};\\n\\n\\t/**\\n\\t * Emit buffered events (received and emitted).\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.emitBuffered = function () {\\n\\t  var i;\\n\\t  for (i = 0; i < this.receiveBuffer.length; i++) {\\n\\t    emit.apply(this, this.receiveBuffer[i]);\\n\\t  }\\n\\t  this.receiveBuffer = [];\\n\\n\\t  for (i = 0; i < this.sendBuffer.length; i++) {\\n\\t    this.packet(this.sendBuffer[i]);\\n\\t  }\\n\\t  this.sendBuffer = [];\\n\\t};\\n\\n\\t/**\\n\\t * Called upon server disconnect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.ondisconnect = function () {\\n\\t  debug('server disconnect (%s)', this.nsp);\\n\\t  this.destroy();\\n\\t  this.onclose('io server disconnect');\\n\\t};\\n\\n\\t/**\\n\\t * Called upon forced client/server side disconnections,\\n\\t * this method ensures the manager stops tracking us and\\n\\t * that reconnections don't get triggered for this.\\n\\t *\\n\\t * @api private.\\n\\t */\\n\\n\\tSocket.prototype.destroy = function () {\\n\\t  if (this.subs) {\\n\\t    // clean subscriptions to avoid reconnections\\n\\t    for (var i = 0; i < this.subs.length; i++) {\\n\\t      this.subs[i].destroy();\\n\\t    }\\n\\t    this.subs = null;\\n\\t  }\\n\\n\\t  this.io.destroy(this);\\n\\t};\\n\\n\\t/**\\n\\t * Disconnects the socket manually.\\n\\t *\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.close = Socket.prototype.disconnect = function () {\\n\\t  if (this.connected) {\\n\\t    debug('performing disconnect (%s)', this.nsp);\\n\\t    this.packet({ type: parser.DISCONNECT });\\n\\t  }\\n\\n\\t  // remove socket from pool\\n\\t  this.destroy();\\n\\n\\t  if (this.connected) {\\n\\t    // fire events\\n\\t    this.onclose('io client disconnect');\\n\\t  }\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the compress flag.\\n\\t *\\n\\t * @param {Boolean} if `true`, compresses the sending data\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.compress = function (compress) {\\n\\t  this.flags = this.flags || {};\\n\\t  this.flags.compress = compress;\\n\\t  return this;\\n\\t};\\n\\n/***/ },\\n/* 45 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = toArray\\n\\n\\tfunction toArray(list, index) {\\n\\t    var array = []\\n\\n\\t    index = index || 0\\n\\n\\t    for (var i = index || 0; i < list.length; i++) {\\n\\t        array[i - index] = list[i]\\n\\t    }\\n\\n\\t    return array\\n\\t}\\n\\n\\n/***/ },\\n/* 46 */\\n/***/ function(module, exports) {\\n\\n\\t\\\"use strict\\\";\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = on;\\n\\n\\t/**\\n\\t * Helper for subscriptions.\\n\\t *\\n\\t * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\\n\\t * @param {String} event name\\n\\t * @param {Function} callback\\n\\t * @api public\\n\\t */\\n\\n\\tfunction on(obj, ev, fn) {\\n\\t  obj.on(ev, fn);\\n\\t  return {\\n\\t    destroy: function destroy() {\\n\\t      obj.removeListener(ev, fn);\\n\\t    }\\n\\t  };\\n\\t\\t}\\n\\n/***/ },\\n/* 47 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Slice reference.\\n\\t */\\n\\n\\tvar slice = [].slice;\\n\\n\\t/**\\n\\t * Bind `obj` to `fn`.\\n\\t *\\n\\t * @param {Object} obj\\n\\t * @param {Function|String} fn or string\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(obj, fn){\\n\\t  if ('string' == typeof fn) fn = obj[fn];\\n\\t  if ('function' != typeof fn) throw new Error('bind() requires a function');\\n\\t  var args = slice.call(arguments, 2);\\n\\t  return function(){\\n\\t    return fn.apply(obj, args.concat(slice.call(arguments)));\\n\\t  }\\n\\t};\\n\\n\\n/***/ },\\n/* 48 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Expose `Backoff`.\\n\\t */\\n\\n\\tmodule.exports = Backoff;\\n\\n\\t/**\\n\\t * Initialize backoff timer with `opts`.\\n\\t *\\n\\t * - `min` initial timeout in milliseconds [100]\\n\\t * - `max` max timeout [10000]\\n\\t * - `jitter` [0]\\n\\t * - `factor` [2]\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Backoff(opts) {\\n\\t  opts = opts || {};\\n\\t  this.ms = opts.min || 100;\\n\\t  this.max = opts.max || 10000;\\n\\t  this.factor = opts.factor || 2;\\n\\t  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\\n\\t  this.attempts = 0;\\n\\t}\\n\\n\\t/**\\n\\t * Return the backoff duration.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.duration = function(){\\n\\t  var ms = this.ms * Math.pow(this.factor, this.attempts++);\\n\\t  if (this.jitter) {\\n\\t    var rand =  Math.random();\\n\\t    var deviation = Math.floor(rand * this.jitter * ms);\\n\\t    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\\n\\t  }\\n\\t  return Math.min(ms, this.max) | 0;\\n\\t};\\n\\n\\t/**\\n\\t * Reset the number of attempts.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.reset = function(){\\n\\t  this.attempts = 0;\\n\\t};\\n\\n\\t/**\\n\\t * Set the minimum duration\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setMin = function(min){\\n\\t  this.ms = min;\\n\\t};\\n\\n\\t/**\\n\\t * Set the maximum duration\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setMax = function(max){\\n\\t  this.max = max;\\n\\t};\\n\\n\\t/**\\n\\t * Set the jitter\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setJitter = function(jitter){\\n\\t  this.jitter = jitter;\\n\\t};\\n\\n\\n\\n/***/ }\\n/******/ ])\\n});\\n;\\n//# sourceMappingURL=socket.io.js.map\"\n\n/***/ }),\n\n/***/ 734:\n/***/ (function(module, exports) {\n\n/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n/***/ }),\n\n/***/ 742:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(438);\n\n\n/***/ })\n\n},[742]);\n\n\n// WEBPACK FOOTER //\n// scripts.bundle.js","require(\"!!C:\\\\Users\\\\Yysh\\\\TestChatSocket.io\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!C:\\\\Users\\\\Yysh\\\\TestChatSocket.io\\\\node_modules\\\\raw-loader\\\\index.js!C:\\\\Users\\\\Yysh\\\\TestChatSocket.io\\\\node_modules\\\\socket.io-client\\\\dist\\\\socket.io.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/socket.io-client/dist/socket.io.js\n// module id = 438\n// module chunks = 1","module.exports = \"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"io\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"io\\\"] = factory();\\n})(this, function() {\\nreturn /******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId])\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\texports: {},\\n/******/ \\t\\t\\tid: moduleId,\\n/******/ \\t\\t\\tloaded: false\\n/******/ \\t\\t};\\n\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.loaded = true;\\n\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n\\n\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(0);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\tvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar url = __webpack_require__(1);\\n\\tvar parser = __webpack_require__(7);\\n\\tvar Manager = __webpack_require__(17);\\n\\tvar debug = __webpack_require__(3)('socket.io-client');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = exports = lookup;\\n\\n\\t/**\\n\\t * Managers cache.\\n\\t */\\n\\n\\tvar cache = exports.managers = {};\\n\\n\\t/**\\n\\t * Looks up an existing `Manager` for multiplexing.\\n\\t * If the user summons:\\n\\t *\\n\\t *   `io('http://localhost/a');`\\n\\t *   `io('http://localhost/b');`\\n\\t *\\n\\t * We reuse the existing instance based on same scheme/port/host,\\n\\t * and we initialize sockets for each namespace.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction lookup(uri, opts) {\\n\\t  if ((typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) === 'object') {\\n\\t    opts = uri;\\n\\t    uri = undefined;\\n\\t  }\\n\\n\\t  opts = opts || {};\\n\\n\\t  var parsed = url(uri);\\n\\t  var source = parsed.source;\\n\\t  var id = parsed.id;\\n\\t  var path = parsed.path;\\n\\t  var sameNamespace = cache[id] && path in cache[id].nsps;\\n\\t  var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;\\n\\n\\t  var io;\\n\\n\\t  if (newConnection) {\\n\\t    debug('ignoring socket cache for %s', source);\\n\\t    io = Manager(source, opts);\\n\\t  } else {\\n\\t    if (!cache[id]) {\\n\\t      debug('new io instance for %s', source);\\n\\t      cache[id] = Manager(source, opts);\\n\\t    }\\n\\t    io = cache[id];\\n\\t  }\\n\\t  if (parsed.query && !opts.query) {\\n\\t    opts.query = parsed.query;\\n\\t  } else if (opts && 'object' === _typeof(opts.query)) {\\n\\t    opts.query = encodeQueryString(opts.query);\\n\\t  }\\n\\t  return io.socket(parsed.path, opts);\\n\\t}\\n\\t/**\\n\\t *  Helper method to parse query objects to string.\\n\\t * @param {object} query\\n\\t * @returns {string}\\n\\t */\\n\\tfunction encodeQueryString(obj) {\\n\\t  var str = [];\\n\\t  for (var p in obj) {\\n\\t    if (obj.hasOwnProperty(p)) {\\n\\t      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\\n\\t    }\\n\\t  }\\n\\t  return str.join('&');\\n\\t}\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.protocol = parser.protocol;\\n\\n\\t/**\\n\\t * `connect`.\\n\\t *\\n\\t * @param {String} uri\\n\\t * @api public\\n\\t */\\n\\n\\texports.connect = lookup;\\n\\n\\t/**\\n\\t * Expose constructors for standalone build.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Manager = __webpack_require__(17);\\n\\texports.Socket = __webpack_require__(44);\\n\\n/***/ },\\n/* 1 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parseuri = __webpack_require__(2);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:url');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = url;\\n\\n\\t/**\\n\\t * URL parser.\\n\\t *\\n\\t * @param {String} url\\n\\t * @param {Object} An object meant to mimic window.location.\\n\\t *                 Defaults to window.location.\\n\\t * @api public\\n\\t */\\n\\n\\tfunction url(uri, loc) {\\n\\t  var obj = uri;\\n\\n\\t  // default to window.location\\n\\t  loc = loc || global.location;\\n\\t  if (null == uri) uri = loc.protocol + '//' + loc.host;\\n\\n\\t  // relative path support\\n\\t  if ('string' === typeof uri) {\\n\\t    if ('/' === uri.charAt(0)) {\\n\\t      if ('/' === uri.charAt(1)) {\\n\\t        uri = loc.protocol + uri;\\n\\t      } else {\\n\\t        uri = loc.host + uri;\\n\\t      }\\n\\t    }\\n\\n\\t    if (!/^(https?|wss?):\\\\/\\\\//.test(uri)) {\\n\\t      debug('protocol-less url %s', uri);\\n\\t      if ('undefined' !== typeof loc) {\\n\\t        uri = loc.protocol + '//' + uri;\\n\\t      } else {\\n\\t        uri = 'https://' + uri;\\n\\t      }\\n\\t    }\\n\\n\\t    // parse\\n\\t    debug('parse %s', uri);\\n\\t    obj = parseuri(uri);\\n\\t  }\\n\\n\\t  // make sure we treat `localhost:80` and `localhost` equally\\n\\t  if (!obj.port) {\\n\\t    if (/^(http|ws)$/.test(obj.protocol)) {\\n\\t      obj.port = '80';\\n\\t    } else if (/^(http|ws)s$/.test(obj.protocol)) {\\n\\t      obj.port = '443';\\n\\t    }\\n\\t  }\\n\\n\\t  obj.path = obj.path || '/';\\n\\n\\t  var ipv6 = obj.host.indexOf(':') !== -1;\\n\\t  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\\n\\n\\t  // define unique id\\n\\t  obj.id = obj.protocol + '://' + host + ':' + obj.port;\\n\\t  // define href\\n\\t  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);\\n\\n\\t  return obj;\\n\\t}\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 2 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\r\\n\\t * Parses an URI\\r\\n\\t *\\r\\n\\t * @author Steven Levithan <stevenlevithan.com> (MIT license)\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tvar re = /^(?:(?![^:@]+:[^:@\\\\/]*@)(http|https|ws|wss):\\\\/\\\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\\\/?#]*)(?::(\\\\d*))?)(((\\\\/(?:[^?#](?![^?#\\\\/]*\\\\.[^?#\\\\/.]+(?:[?#]|$)))*\\\\/?)?([^?#\\\\/]*))(?:\\\\?([^#]*))?(?:#(.*))?)/;\\r\\n\\r\\n\\tvar parts = [\\r\\n\\t    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\\r\\n\\t];\\r\\n\\r\\n\\tmodule.exports = function parseuri(str) {\\r\\n\\t    var src = str,\\r\\n\\t        b = str.indexOf('['),\\r\\n\\t        e = str.indexOf(']');\\r\\n\\r\\n\\t    if (b != -1 && e != -1) {\\r\\n\\t        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\\r\\n\\t    }\\r\\n\\r\\n\\t    var m = re.exec(str || ''),\\r\\n\\t        uri = {},\\r\\n\\t        i = 14;\\r\\n\\r\\n\\t    while (i--) {\\r\\n\\t        uri[parts[i]] = m[i] || '';\\r\\n\\t    }\\r\\n\\r\\n\\t    if (b != -1 && e != -1) {\\r\\n\\t        uri.source = src;\\r\\n\\t        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\\r\\n\\t        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\\r\\n\\t        uri.ipv6uri = true;\\r\\n\\t    }\\r\\n\\r\\n\\t    return uri;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 3 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(process) {\\n\\t/**\\n\\t * This is the web browser implementation of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = __webpack_require__(5);\\n\\texports.log = log;\\n\\texports.formatArgs = formatArgs;\\n\\texports.save = save;\\n\\texports.load = load;\\n\\texports.useColors = useColors;\\n\\texports.storage = 'undefined' != typeof chrome\\n\\t               && 'undefined' != typeof chrome.storage\\n\\t                  ? chrome.storage.local\\n\\t                  : localstorage();\\n\\n\\t/**\\n\\t * Colors.\\n\\t */\\n\\n\\texports.colors = [\\n\\t  'lightseagreen',\\n\\t  'forestgreen',\\n\\t  'goldenrod',\\n\\t  'dodgerblue',\\n\\t  'darkorchid',\\n\\t  'crimson'\\n\\t];\\n\\n\\t/**\\n\\t * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n\\t * and the Firebug extension (any Firefox version) are known\\n\\t * to support \\\"%c\\\" CSS customizations.\\n\\t *\\n\\t * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n\\t */\\n\\n\\tfunction useColors() {\\n\\t  // is webkit? http://stackoverflow.com/a/16459606/376773\\n\\t  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\\n\\t  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||\\n\\t    // is firebug? http://stackoverflow.com/a/398120/376773\\n\\t    (window.console && (console.firebug || (console.exception && console.table))) ||\\n\\t    // is firefox >= v31?\\n\\t    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n\\t    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n\\t}\\n\\n\\t/**\\n\\t * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n\\t */\\n\\n\\texports.formatters.j = function(v) {\\n\\t  try {\\n\\t    return JSON.stringify(v);\\n\\t  } catch (err) {\\n\\t    return '[UnexpectedJSONParseError]: ' + err.message;\\n\\t  }\\n\\t};\\n\\n\\n\\t/**\\n\\t * Colorize log arguments if enabled.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction formatArgs() {\\n\\t  var args = arguments;\\n\\t  var useColors = this.useColors;\\n\\n\\t  args[0] = (useColors ? '%c' : '')\\n\\t    + this.namespace\\n\\t    + (useColors ? ' %c' : ' ')\\n\\t    + args[0]\\n\\t    + (useColors ? '%c ' : ' ')\\n\\t    + '+' + exports.humanize(this.diff);\\n\\n\\t  if (!useColors) return args;\\n\\n\\t  var c = 'color: ' + this.color;\\n\\t  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n\\t  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n\\t  // arguments passed either before or after the %c, so we need to\\n\\t  // figure out the correct index to insert the CSS into\\n\\t  var index = 0;\\n\\t  var lastC = 0;\\n\\t  args[0].replace(/%[a-z%]/g, function(match) {\\n\\t    if ('%%' === match) return;\\n\\t    index++;\\n\\t    if ('%c' === match) {\\n\\t      // we only are interested in the *last* %c\\n\\t      // (the user may have provided their own)\\n\\t      lastC = index;\\n\\t    }\\n\\t  });\\n\\n\\t  args.splice(lastC, 0, c);\\n\\t  return args;\\n\\t}\\n\\n\\t/**\\n\\t * Invokes `console.log()` when available.\\n\\t * No-op when `console.log` is not a \\\"function\\\".\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction log() {\\n\\t  // this hackery is required for IE8/9, where\\n\\t  // the `console.log` function doesn't have 'apply'\\n\\t  return 'object' === typeof console\\n\\t    && console.log\\n\\t    && Function.prototype.apply.call(console.log, console, arguments);\\n\\t}\\n\\n\\t/**\\n\\t * Save `namespaces`.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api private\\n\\t */\\n\\n\\tfunction save(namespaces) {\\n\\t  try {\\n\\t    if (null == namespaces) {\\n\\t      exports.storage.removeItem('debug');\\n\\t    } else {\\n\\t      exports.storage.debug = namespaces;\\n\\t    }\\n\\t  } catch(e) {}\\n\\t}\\n\\n\\t/**\\n\\t * Load `namespaces`.\\n\\t *\\n\\t * @return {String} returns the previously persisted debug modes\\n\\t * @api private\\n\\t */\\n\\n\\tfunction load() {\\n\\t  var r;\\n\\t  try {\\n\\t    return exports.storage.debug;\\n\\t  } catch(e) {}\\n\\n\\t  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\\n\\t  if (typeof process !== 'undefined' && 'env' in process) {\\n\\t    return process.env.DEBUG;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Enable namespaces listed in `localStorage.debug` initially.\\n\\t */\\n\\n\\texports.enable(load());\\n\\n\\t/**\\n\\t * Localstorage attempts to return the localstorage.\\n\\t *\\n\\t * This is necessary because safari throws\\n\\t * when a user disables cookies/localstorage\\n\\t * and you attempt to access it.\\n\\t *\\n\\t * @return {LocalStorage}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction localstorage(){\\n\\t  try {\\n\\t    return window.localStorage;\\n\\t  } catch (e) {}\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\\n\\n/***/ },\\n/* 4 */\\n/***/ function(module, exports) {\\n\\n\\t// shim for using process in browser\\n\\tvar process = module.exports = {};\\n\\n\\t// cached from whatever global is present so that test runners that stub it\\n\\t// don't break things.  But we need to wrap it in a try catch in case it is\\n\\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\\n\\t// function because try/catches deoptimize in certain engines.\\n\\n\\tvar cachedSetTimeout;\\n\\tvar cachedClearTimeout;\\n\\n\\tfunction defaultSetTimout() {\\n\\t    throw new Error('setTimeout has not been defined');\\n\\t}\\n\\tfunction defaultClearTimeout () {\\n\\t    throw new Error('clearTimeout has not been defined');\\n\\t}\\n\\t(function () {\\n\\t    try {\\n\\t        if (typeof setTimeout === 'function') {\\n\\t            cachedSetTimeout = setTimeout;\\n\\t        } else {\\n\\t            cachedSetTimeout = defaultSetTimout;\\n\\t        }\\n\\t    } catch (e) {\\n\\t        cachedSetTimeout = defaultSetTimout;\\n\\t    }\\n\\t    try {\\n\\t        if (typeof clearTimeout === 'function') {\\n\\t            cachedClearTimeout = clearTimeout;\\n\\t        } else {\\n\\t            cachedClearTimeout = defaultClearTimeout;\\n\\t        }\\n\\t    } catch (e) {\\n\\t        cachedClearTimeout = defaultClearTimeout;\\n\\t    }\\n\\t} ())\\n\\tfunction runTimeout(fun) {\\n\\t    if (cachedSetTimeout === setTimeout) {\\n\\t        //normal enviroments in sane situations\\n\\t        return setTimeout(fun, 0);\\n\\t    }\\n\\t    // if setTimeout wasn't available but was latter defined\\n\\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\\n\\t        cachedSetTimeout = setTimeout;\\n\\t        return setTimeout(fun, 0);\\n\\t    }\\n\\t    try {\\n\\t        // when when somebody has screwed with setTimeout but no I.E. maddness\\n\\t        return cachedSetTimeout(fun, 0);\\n\\t    } catch(e){\\n\\t        try {\\n\\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\\n\\t            return cachedSetTimeout.call(null, fun, 0);\\n\\t        } catch(e){\\n\\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\\n\\t            return cachedSetTimeout.call(this, fun, 0);\\n\\t        }\\n\\t    }\\n\\n\\n\\t}\\n\\tfunction runClearTimeout(marker) {\\n\\t    if (cachedClearTimeout === clearTimeout) {\\n\\t        //normal enviroments in sane situations\\n\\t        return clearTimeout(marker);\\n\\t    }\\n\\t    // if clearTimeout wasn't available but was latter defined\\n\\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\\n\\t        cachedClearTimeout = clearTimeout;\\n\\t        return clearTimeout(marker);\\n\\t    }\\n\\t    try {\\n\\t        // when when somebody has screwed with setTimeout but no I.E. maddness\\n\\t        return cachedClearTimeout(marker);\\n\\t    } catch (e){\\n\\t        try {\\n\\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\\n\\t            return cachedClearTimeout.call(null, marker);\\n\\t        } catch (e){\\n\\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\\n\\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\\n\\t            return cachedClearTimeout.call(this, marker);\\n\\t        }\\n\\t    }\\n\\n\\n\\n\\t}\\n\\tvar queue = [];\\n\\tvar draining = false;\\n\\tvar currentQueue;\\n\\tvar queueIndex = -1;\\n\\n\\tfunction cleanUpNextTick() {\\n\\t    if (!draining || !currentQueue) {\\n\\t        return;\\n\\t    }\\n\\t    draining = false;\\n\\t    if (currentQueue.length) {\\n\\t        queue = currentQueue.concat(queue);\\n\\t    } else {\\n\\t        queueIndex = -1;\\n\\t    }\\n\\t    if (queue.length) {\\n\\t        drainQueue();\\n\\t    }\\n\\t}\\n\\n\\tfunction drainQueue() {\\n\\t    if (draining) {\\n\\t        return;\\n\\t    }\\n\\t    var timeout = runTimeout(cleanUpNextTick);\\n\\t    draining = true;\\n\\n\\t    var len = queue.length;\\n\\t    while(len) {\\n\\t        currentQueue = queue;\\n\\t        queue = [];\\n\\t        while (++queueIndex < len) {\\n\\t            if (currentQueue) {\\n\\t                currentQueue[queueIndex].run();\\n\\t            }\\n\\t        }\\n\\t        queueIndex = -1;\\n\\t        len = queue.length;\\n\\t    }\\n\\t    currentQueue = null;\\n\\t    draining = false;\\n\\t    runClearTimeout(timeout);\\n\\t}\\n\\n\\tprocess.nextTick = function (fun) {\\n\\t    var args = new Array(arguments.length - 1);\\n\\t    if (arguments.length > 1) {\\n\\t        for (var i = 1; i < arguments.length; i++) {\\n\\t            args[i - 1] = arguments[i];\\n\\t        }\\n\\t    }\\n\\t    queue.push(new Item(fun, args));\\n\\t    if (queue.length === 1 && !draining) {\\n\\t        runTimeout(drainQueue);\\n\\t    }\\n\\t};\\n\\n\\t// v8 likes predictible objects\\n\\tfunction Item(fun, array) {\\n\\t    this.fun = fun;\\n\\t    this.array = array;\\n\\t}\\n\\tItem.prototype.run = function () {\\n\\t    this.fun.apply(null, this.array);\\n\\t};\\n\\tprocess.title = 'browser';\\n\\tprocess.browser = true;\\n\\tprocess.env = {};\\n\\tprocess.argv = [];\\n\\tprocess.version = ''; // empty string to avoid regexp issues\\n\\tprocess.versions = {};\\n\\n\\tfunction noop() {}\\n\\n\\tprocess.on = noop;\\n\\tprocess.addListener = noop;\\n\\tprocess.once = noop;\\n\\tprocess.off = noop;\\n\\tprocess.removeListener = noop;\\n\\tprocess.removeAllListeners = noop;\\n\\tprocess.emit = noop;\\n\\n\\tprocess.binding = function (name) {\\n\\t    throw new Error('process.binding is not supported');\\n\\t};\\n\\n\\tprocess.cwd = function () { return '/' };\\n\\tprocess.chdir = function (dir) {\\n\\t    throw new Error('process.chdir is not supported');\\n\\t};\\n\\tprocess.umask = function() { return 0; };\\n\\n\\n/***/ },\\n/* 5 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the common logic for both the Node.js and web browser\\n\\t * implementations of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = debug.debug = debug;\\n\\texports.coerce = coerce;\\n\\texports.disable = disable;\\n\\texports.enable = enable;\\n\\texports.enabled = enabled;\\n\\texports.humanize = __webpack_require__(6);\\n\\n\\t/**\\n\\t * The currently active debug mode names, and names to skip.\\n\\t */\\n\\n\\texports.names = [];\\n\\texports.skips = [];\\n\\n\\t/**\\n\\t * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n\\t *\\n\\t * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n\\t */\\n\\n\\texports.formatters = {};\\n\\n\\t/**\\n\\t * Previously assigned color.\\n\\t */\\n\\n\\tvar prevColor = 0;\\n\\n\\t/**\\n\\t * Previous log timestamp.\\n\\t */\\n\\n\\tvar prevTime;\\n\\n\\t/**\\n\\t * Select a color.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction selectColor() {\\n\\t  return exports.colors[prevColor++ % exports.colors.length];\\n\\t}\\n\\n\\t/**\\n\\t * Create a debugger with the given `namespace`.\\n\\t *\\n\\t * @param {String} namespace\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction debug(namespace) {\\n\\n\\t  // define the `disabled` version\\n\\t  function disabled() {\\n\\t  }\\n\\t  disabled.enabled = false;\\n\\n\\t  // define the `enabled` version\\n\\t  function enabled() {\\n\\n\\t    var self = enabled;\\n\\n\\t    // set `diff` timestamp\\n\\t    var curr = +new Date();\\n\\t    var ms = curr - (prevTime || curr);\\n\\t    self.diff = ms;\\n\\t    self.prev = prevTime;\\n\\t    self.curr = curr;\\n\\t    prevTime = curr;\\n\\n\\t    // add the `color` if not set\\n\\t    if (null == self.useColors) self.useColors = exports.useColors();\\n\\t    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n\\t    var args = new Array(arguments.length);\\n\\t    for (var i = 0; i < args.length; i++) {\\n\\t      args[i] = arguments[i];\\n\\t    }\\n\\n\\t    args[0] = exports.coerce(args[0]);\\n\\n\\t    if ('string' !== typeof args[0]) {\\n\\t      // anything else let's inspect with %o\\n\\t      args = ['%o'].concat(args);\\n\\t    }\\n\\n\\t    // apply any `formatters` transformations\\n\\t    var index = 0;\\n\\t    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n\\t      // if we encounter an escaped % then don't increase the array index\\n\\t      if (match === '%%') return match;\\n\\t      index++;\\n\\t      var formatter = exports.formatters[format];\\n\\t      if ('function' === typeof formatter) {\\n\\t        var val = args[index];\\n\\t        match = formatter.call(self, val);\\n\\n\\t        // now we need to remove `args[index]` since it's inlined in the `format`\\n\\t        args.splice(index, 1);\\n\\t        index--;\\n\\t      }\\n\\t      return match;\\n\\t    });\\n\\n\\t    // apply env-specific formatting\\n\\t    args = exports.formatArgs.apply(self, args);\\n\\n\\t    var logFn = enabled.log || exports.log || console.log.bind(console);\\n\\t    logFn.apply(self, args);\\n\\t  }\\n\\t  enabled.enabled = true;\\n\\n\\t  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n\\t  fn.namespace = namespace;\\n\\n\\t  return fn;\\n\\t}\\n\\n\\t/**\\n\\t * Enables a debug mode by namespaces. This can include modes\\n\\t * separated by a colon and wildcards.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enable(namespaces) {\\n\\t  exports.save(namespaces);\\n\\n\\t  var split = (namespaces || '').split(/[\\\\s,]+/);\\n\\t  var len = split.length;\\n\\n\\t  for (var i = 0; i < len; i++) {\\n\\t    if (!split[i]) continue; // ignore empty strings\\n\\t    namespaces = split[i].replace(/[\\\\\\\\^$+?.()|[\\\\]{}]/g, '\\\\\\\\$&').replace(/\\\\*/g, '.*?');\\n\\t    if (namespaces[0] === '-') {\\n\\t      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n\\t    } else {\\n\\t      exports.names.push(new RegExp('^' + namespaces + '$'));\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Disable debug output.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction disable() {\\n\\t  exports.enable('');\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if the given mode name is enabled, false otherwise.\\n\\t *\\n\\t * @param {String} name\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enabled(name) {\\n\\t  var i, len;\\n\\t  for (i = 0, len = exports.skips.length; i < len; i++) {\\n\\t    if (exports.skips[i].test(name)) {\\n\\t      return false;\\n\\t    }\\n\\t  }\\n\\t  for (i = 0, len = exports.names.length; i < len; i++) {\\n\\t    if (exports.names[i].test(name)) {\\n\\t      return true;\\n\\t    }\\n\\t  }\\n\\t  return false;\\n\\t}\\n\\n\\t/**\\n\\t * Coerce `val`.\\n\\t *\\n\\t * @param {Mixed} val\\n\\t * @return {Mixed}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction coerce(val) {\\n\\t  if (val instanceof Error) return val.stack || val.message;\\n\\t  return val;\\n\\t}\\n\\n\\n/***/ },\\n/* 6 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Helpers.\\n\\t */\\n\\n\\tvar s = 1000\\n\\tvar m = s * 60\\n\\tvar h = m * 60\\n\\tvar d = h * 24\\n\\tvar y = d * 365.25\\n\\n\\t/**\\n\\t * Parse or format the given `val`.\\n\\t *\\n\\t * Options:\\n\\t *\\n\\t *  - `long` verbose formatting [false]\\n\\t *\\n\\t * @param {String|Number} val\\n\\t * @param {Object} options\\n\\t * @throws {Error} throw an error if val is not a non-empty string or a number\\n\\t * @return {String|Number}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function (val, options) {\\n\\t  options = options || {}\\n\\t  var type = typeof val\\n\\t  if (type === 'string' && val.length > 0) {\\n\\t    return parse(val)\\n\\t  } else if (type === 'number' && isNaN(val) === false) {\\n\\t    return options.long ?\\n\\t\\t\\t\\tfmtLong(val) :\\n\\t\\t\\t\\tfmtShort(val)\\n\\t  }\\n\\t  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\\n\\t}\\n\\n\\t/**\\n\\t * Parse the given `str` and return milliseconds.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction parse(str) {\\n\\t  str = String(str)\\n\\t  if (str.length > 10000) {\\n\\t    return\\n\\t  }\\n\\t  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\\n\\t  if (!match) {\\n\\t    return\\n\\t  }\\n\\t  var n = parseFloat(match[1])\\n\\t  var type = (match[2] || 'ms').toLowerCase()\\n\\t  switch (type) {\\n\\t    case 'years':\\n\\t    case 'year':\\n\\t    case 'yrs':\\n\\t    case 'yr':\\n\\t    case 'y':\\n\\t      return n * y\\n\\t    case 'days':\\n\\t    case 'day':\\n\\t    case 'd':\\n\\t      return n * d\\n\\t    case 'hours':\\n\\t    case 'hour':\\n\\t    case 'hrs':\\n\\t    case 'hr':\\n\\t    case 'h':\\n\\t      return n * h\\n\\t    case 'minutes':\\n\\t    case 'minute':\\n\\t    case 'mins':\\n\\t    case 'min':\\n\\t    case 'm':\\n\\t      return n * m\\n\\t    case 'seconds':\\n\\t    case 'second':\\n\\t    case 'secs':\\n\\t    case 'sec':\\n\\t    case 's':\\n\\t      return n * s\\n\\t    case 'milliseconds':\\n\\t    case 'millisecond':\\n\\t    case 'msecs':\\n\\t    case 'msec':\\n\\t    case 'ms':\\n\\t      return n\\n\\t    default:\\n\\t      return undefined\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Short format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction fmtShort(ms) {\\n\\t  if (ms >= d) {\\n\\t    return Math.round(ms / d) + 'd'\\n\\t  }\\n\\t  if (ms >= h) {\\n\\t    return Math.round(ms / h) + 'h'\\n\\t  }\\n\\t  if (ms >= m) {\\n\\t    return Math.round(ms / m) + 'm'\\n\\t  }\\n\\t  if (ms >= s) {\\n\\t    return Math.round(ms / s) + 's'\\n\\t  }\\n\\t  return ms + 'ms'\\n\\t}\\n\\n\\t/**\\n\\t * Long format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction fmtLong(ms) {\\n\\t  return plural(ms, d, 'day') ||\\n\\t    plural(ms, h, 'hour') ||\\n\\t    plural(ms, m, 'minute') ||\\n\\t    plural(ms, s, 'second') ||\\n\\t    ms + ' ms'\\n\\t}\\n\\n\\t/**\\n\\t * Pluralization helper.\\n\\t */\\n\\n\\tfunction plural(ms, n, name) {\\n\\t  if (ms < n) {\\n\\t    return\\n\\t  }\\n\\t  if (ms < n * 1.5) {\\n\\t    return Math.floor(ms / n) + ' ' + name\\n\\t  }\\n\\t  return Math.ceil(ms / n) + ' ' + name + 's'\\n\\t}\\n\\n\\n/***/ },\\n/* 7 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar debug = __webpack_require__(8)('socket.io-parser');\\n\\tvar json = __webpack_require__(11);\\n\\tvar Emitter = __webpack_require__(13);\\n\\tvar binary = __webpack_require__(14);\\n\\tvar isBuf = __webpack_require__(16);\\n\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.protocol = 4;\\n\\n\\t/**\\n\\t * Packet types.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.types = [\\n\\t  'CONNECT',\\n\\t  'DISCONNECT',\\n\\t  'EVENT',\\n\\t  'ACK',\\n\\t  'ERROR',\\n\\t  'BINARY_EVENT',\\n\\t  'BINARY_ACK'\\n\\t];\\n\\n\\t/**\\n\\t * Packet type `connect`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.CONNECT = 0;\\n\\n\\t/**\\n\\t * Packet type `disconnect`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.DISCONNECT = 1;\\n\\n\\t/**\\n\\t * Packet type `event`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.EVENT = 2;\\n\\n\\t/**\\n\\t * Packet type `ack`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.ACK = 3;\\n\\n\\t/**\\n\\t * Packet type `error`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.ERROR = 4;\\n\\n\\t/**\\n\\t * Packet type 'binary event'\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.BINARY_EVENT = 5;\\n\\n\\t/**\\n\\t * Packet type `binary ack`. For acks with binary arguments.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.BINARY_ACK = 6;\\n\\n\\t/**\\n\\t * Encoder constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Encoder = Encoder;\\n\\n\\t/**\\n\\t * Decoder constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\texports.Decoder = Decoder;\\n\\n\\t/**\\n\\t * A socket.io Encoder instance\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Encoder() {}\\n\\n\\t/**\\n\\t * Encode a packet as a single string if non-binary, or as a\\n\\t * buffer sequence, depending on packet type.\\n\\t *\\n\\t * @param {Object} obj - packet object\\n\\t * @param {Function} callback - function to handle encodings (likely engine.write)\\n\\t * @return Calls callback with Array of encodings\\n\\t * @api public\\n\\t */\\n\\n\\tEncoder.prototype.encode = function(obj, callback){\\n\\t  debug('encoding packet %j', obj);\\n\\n\\t  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n\\t    encodeAsBinary(obj, callback);\\n\\t  }\\n\\t  else {\\n\\t    var encoding = encodeAsString(obj);\\n\\t    callback([encoding]);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Encode packet as string.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {String} encoded\\n\\t * @api private\\n\\t */\\n\\n\\tfunction encodeAsString(obj) {\\n\\t  var str = '';\\n\\t  var nsp = false;\\n\\n\\t  // first is type\\n\\t  str += obj.type;\\n\\n\\t  // attachments if we have them\\n\\t  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\\n\\t    str += obj.attachments;\\n\\t    str += '-';\\n\\t  }\\n\\n\\t  // if we have a namespace other than `/`\\n\\t  // we append it followed by a comma `,`\\n\\t  if (obj.nsp && '/' != obj.nsp) {\\n\\t    nsp = true;\\n\\t    str += obj.nsp;\\n\\t  }\\n\\n\\t  // immediately followed by the id\\n\\t  if (null != obj.id) {\\n\\t    if (nsp) {\\n\\t      str += ',';\\n\\t      nsp = false;\\n\\t    }\\n\\t    str += obj.id;\\n\\t  }\\n\\n\\t  // json data\\n\\t  if (null != obj.data) {\\n\\t    if (nsp) str += ',';\\n\\t    str += json.stringify(obj.data);\\n\\t  }\\n\\n\\t  debug('encoded %j as %s', obj, str);\\n\\t  return str;\\n\\t}\\n\\n\\t/**\\n\\t * Encode packet as 'buffer sequence' by removing blobs, and\\n\\t * deconstructing packet into object with placeholders and\\n\\t * a list of buffers.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {Buffer} encoded\\n\\t * @api private\\n\\t */\\n\\n\\tfunction encodeAsBinary(obj, callback) {\\n\\n\\t  function writeEncoding(bloblessData) {\\n\\t    var deconstruction = binary.deconstructPacket(bloblessData);\\n\\t    var pack = encodeAsString(deconstruction.packet);\\n\\t    var buffers = deconstruction.buffers;\\n\\n\\t    buffers.unshift(pack); // add packet info to beginning of data list\\n\\t    callback(buffers); // write all the buffers\\n\\t  }\\n\\n\\t  binary.removeBlobs(obj, writeEncoding);\\n\\t}\\n\\n\\t/**\\n\\t * A socket.io Decoder instance\\n\\t *\\n\\t * @return {Object} decoder\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Decoder() {\\n\\t  this.reconstructor = null;\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter` with Decoder.\\n\\t */\\n\\n\\tEmitter(Decoder.prototype);\\n\\n\\t/**\\n\\t * Decodes an ecoded packet string into packet JSON.\\n\\t *\\n\\t * @param {String} obj - encoded packet\\n\\t * @return {Object} packet\\n\\t * @api public\\n\\t */\\n\\n\\tDecoder.prototype.add = function(obj) {\\n\\t  var packet;\\n\\t  if ('string' == typeof obj) {\\n\\t    packet = decodeString(obj);\\n\\t    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\\n\\t      this.reconstructor = new BinaryReconstructor(packet);\\n\\n\\t      // no attachments, labeled binary but no binary data to follow\\n\\t      if (this.reconstructor.reconPack.attachments === 0) {\\n\\t        this.emit('decoded', packet);\\n\\t      }\\n\\t    } else { // non-binary full packet\\n\\t      this.emit('decoded', packet);\\n\\t    }\\n\\t  }\\n\\t  else if (isBuf(obj) || obj.base64) { // raw binary data\\n\\t    if (!this.reconstructor) {\\n\\t      throw new Error('got binary data when not reconstructing a packet');\\n\\t    } else {\\n\\t      packet = this.reconstructor.takeBinaryData(obj);\\n\\t      if (packet) { // received final buffer\\n\\t        this.reconstructor = null;\\n\\t        this.emit('decoded', packet);\\n\\t      }\\n\\t    }\\n\\t  }\\n\\t  else {\\n\\t    throw new Error('Unknown type: ' + obj);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Decode a packet String (JSON data)\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tfunction decodeString(str) {\\n\\t  var p = {};\\n\\t  var i = 0;\\n\\n\\t  // look up type\\n\\t  p.type = Number(str.charAt(0));\\n\\t  if (null == exports.types[p.type]) return error();\\n\\n\\t  // look up attachments if type binary\\n\\t  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\\n\\t    var buf = '';\\n\\t    while (str.charAt(++i) != '-') {\\n\\t      buf += str.charAt(i);\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t    if (buf != Number(buf) || str.charAt(i) != '-') {\\n\\t      throw new Error('Illegal attachments');\\n\\t    }\\n\\t    p.attachments = Number(buf);\\n\\t  }\\n\\n\\t  // look up namespace (if any)\\n\\t  if ('/' == str.charAt(i + 1)) {\\n\\t    p.nsp = '';\\n\\t    while (++i) {\\n\\t      var c = str.charAt(i);\\n\\t      if (',' == c) break;\\n\\t      p.nsp += c;\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t  } else {\\n\\t    p.nsp = '/';\\n\\t  }\\n\\n\\t  // look up id\\n\\t  var next = str.charAt(i + 1);\\n\\t  if ('' !== next && Number(next) == next) {\\n\\t    p.id = '';\\n\\t    while (++i) {\\n\\t      var c = str.charAt(i);\\n\\t      if (null == c || Number(c) != c) {\\n\\t        --i;\\n\\t        break;\\n\\t      }\\n\\t      p.id += str.charAt(i);\\n\\t      if (i == str.length) break;\\n\\t    }\\n\\t    p.id = Number(p.id);\\n\\t  }\\n\\n\\t  // look up json data\\n\\t  if (str.charAt(++i)) {\\n\\t    p = tryParse(p, str.substr(i));\\n\\t  }\\n\\n\\t  debug('decoded %s as %j', str, p);\\n\\t  return p;\\n\\t}\\n\\n\\tfunction tryParse(p, str) {\\n\\t  try {\\n\\t    p.data = json.parse(str);\\n\\t  } catch(e){\\n\\t    return error();\\n\\t  }\\n\\t  return p; \\n\\t};\\n\\n\\t/**\\n\\t * Deallocates a parser's resources\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tDecoder.prototype.destroy = function() {\\n\\t  if (this.reconstructor) {\\n\\t    this.reconstructor.finishedReconstruction();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * A manager of a binary event's 'buffer sequence'. Should\\n\\t * be constructed whenever a packet of type BINARY_EVENT is\\n\\t * decoded.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @return {BinaryReconstructor} initialized reconstructor\\n\\t * @api private\\n\\t */\\n\\n\\tfunction BinaryReconstructor(packet) {\\n\\t  this.reconPack = packet;\\n\\t  this.buffers = [];\\n\\t}\\n\\n\\t/**\\n\\t * Method to be called when binary data received from connection\\n\\t * after a BINARY_EVENT packet.\\n\\t *\\n\\t * @param {Buffer | ArrayBuffer} binData - the raw binary data received\\n\\t * @return {null | Object} returns null if more binary data is expected or\\n\\t *   a reconstructed packet object if all buffers have been received.\\n\\t * @api private\\n\\t */\\n\\n\\tBinaryReconstructor.prototype.takeBinaryData = function(binData) {\\n\\t  this.buffers.push(binData);\\n\\t  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\\n\\t    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\\n\\t    this.finishedReconstruction();\\n\\t    return packet;\\n\\t  }\\n\\t  return null;\\n\\t};\\n\\n\\t/**\\n\\t * Cleans up binary packet reconstruction variables.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tBinaryReconstructor.prototype.finishedReconstruction = function() {\\n\\t  this.reconPack = null;\\n\\t  this.buffers = [];\\n\\t};\\n\\n\\tfunction error(data){\\n\\t  return {\\n\\t    type: exports.ERROR,\\n\\t    data: 'parser error'\\n\\t  };\\n\\t}\\n\\n\\n/***/ },\\n/* 8 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the web browser implementation of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = __webpack_require__(9);\\n\\texports.log = log;\\n\\texports.formatArgs = formatArgs;\\n\\texports.save = save;\\n\\texports.load = load;\\n\\texports.useColors = useColors;\\n\\texports.storage = 'undefined' != typeof chrome\\n\\t               && 'undefined' != typeof chrome.storage\\n\\t                  ? chrome.storage.local\\n\\t                  : localstorage();\\n\\n\\t/**\\n\\t * Colors.\\n\\t */\\n\\n\\texports.colors = [\\n\\t  'lightseagreen',\\n\\t  'forestgreen',\\n\\t  'goldenrod',\\n\\t  'dodgerblue',\\n\\t  'darkorchid',\\n\\t  'crimson'\\n\\t];\\n\\n\\t/**\\n\\t * Currently only WebKit-based Web Inspectors, Firefox >= v31,\\n\\t * and the Firebug extension (any Firefox version) are known\\n\\t * to support \\\"%c\\\" CSS customizations.\\n\\t *\\n\\t * TODO: add a `localStorage` variable to explicitly enable/disable colors\\n\\t */\\n\\n\\tfunction useColors() {\\n\\t  // is webkit? http://stackoverflow.com/a/16459606/376773\\n\\t  return ('WebkitAppearance' in document.documentElement.style) ||\\n\\t    // is firebug? http://stackoverflow.com/a/398120/376773\\n\\t    (window.console && (console.firebug || (console.exception && console.table))) ||\\n\\t    // is firefox >= v31?\\n\\t    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\\n\\t    (navigator.userAgent.toLowerCase().match(/firefox\\\\/(\\\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\\n\\t}\\n\\n\\t/**\\n\\t * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\\n\\t */\\n\\n\\texports.formatters.j = function(v) {\\n\\t  return JSON.stringify(v);\\n\\t};\\n\\n\\n\\t/**\\n\\t * Colorize log arguments if enabled.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction formatArgs() {\\n\\t  var args = arguments;\\n\\t  var useColors = this.useColors;\\n\\n\\t  args[0] = (useColors ? '%c' : '')\\n\\t    + this.namespace\\n\\t    + (useColors ? ' %c' : ' ')\\n\\t    + args[0]\\n\\t    + (useColors ? '%c ' : ' ')\\n\\t    + '+' + exports.humanize(this.diff);\\n\\n\\t  if (!useColors) return args;\\n\\n\\t  var c = 'color: ' + this.color;\\n\\t  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\\n\\n\\t  // the final \\\"%c\\\" is somewhat tricky, because there could be other\\n\\t  // arguments passed either before or after the %c, so we need to\\n\\t  // figure out the correct index to insert the CSS into\\n\\t  var index = 0;\\n\\t  var lastC = 0;\\n\\t  args[0].replace(/%[a-z%]/g, function(match) {\\n\\t    if ('%%' === match) return;\\n\\t    index++;\\n\\t    if ('%c' === match) {\\n\\t      // we only are interested in the *last* %c\\n\\t      // (the user may have provided their own)\\n\\t      lastC = index;\\n\\t    }\\n\\t  });\\n\\n\\t  args.splice(lastC, 0, c);\\n\\t  return args;\\n\\t}\\n\\n\\t/**\\n\\t * Invokes `console.log()` when available.\\n\\t * No-op when `console.log` is not a \\\"function\\\".\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction log() {\\n\\t  // this hackery is required for IE8/9, where\\n\\t  // the `console.log` function doesn't have 'apply'\\n\\t  return 'object' === typeof console\\n\\t    && console.log\\n\\t    && Function.prototype.apply.call(console.log, console, arguments);\\n\\t}\\n\\n\\t/**\\n\\t * Save `namespaces`.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api private\\n\\t */\\n\\n\\tfunction save(namespaces) {\\n\\t  try {\\n\\t    if (null == namespaces) {\\n\\t      exports.storage.removeItem('debug');\\n\\t    } else {\\n\\t      exports.storage.debug = namespaces;\\n\\t    }\\n\\t  } catch(e) {}\\n\\t}\\n\\n\\t/**\\n\\t * Load `namespaces`.\\n\\t *\\n\\t * @return {String} returns the previously persisted debug modes\\n\\t * @api private\\n\\t */\\n\\n\\tfunction load() {\\n\\t  var r;\\n\\t  try {\\n\\t    r = exports.storage.debug;\\n\\t  } catch(e) {}\\n\\t  return r;\\n\\t}\\n\\n\\t/**\\n\\t * Enable namespaces listed in `localStorage.debug` initially.\\n\\t */\\n\\n\\texports.enable(load());\\n\\n\\t/**\\n\\t * Localstorage attempts to return the localstorage.\\n\\t *\\n\\t * This is necessary because safari throws\\n\\t * when a user disables cookies/localstorage\\n\\t * and you attempt to access it.\\n\\t *\\n\\t * @return {LocalStorage}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction localstorage(){\\n\\t  try {\\n\\t    return window.localStorage;\\n\\t  } catch (e) {}\\n\\t}\\n\\n\\n/***/ },\\n/* 9 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\t/**\\n\\t * This is the common logic for both the Node.js and web browser\\n\\t * implementations of `debug()`.\\n\\t *\\n\\t * Expose `debug()` as the module.\\n\\t */\\n\\n\\texports = module.exports = debug;\\n\\texports.coerce = coerce;\\n\\texports.disable = disable;\\n\\texports.enable = enable;\\n\\texports.enabled = enabled;\\n\\texports.humanize = __webpack_require__(10);\\n\\n\\t/**\\n\\t * The currently active debug mode names, and names to skip.\\n\\t */\\n\\n\\texports.names = [];\\n\\texports.skips = [];\\n\\n\\t/**\\n\\t * Map of special \\\"%n\\\" handling functions, for the debug \\\"format\\\" argument.\\n\\t *\\n\\t * Valid key names are a single, lowercased letter, i.e. \\\"n\\\".\\n\\t */\\n\\n\\texports.formatters = {};\\n\\n\\t/**\\n\\t * Previously assigned color.\\n\\t */\\n\\n\\tvar prevColor = 0;\\n\\n\\t/**\\n\\t * Previous log timestamp.\\n\\t */\\n\\n\\tvar prevTime;\\n\\n\\t/**\\n\\t * Select a color.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction selectColor() {\\n\\t  return exports.colors[prevColor++ % exports.colors.length];\\n\\t}\\n\\n\\t/**\\n\\t * Create a debugger with the given `namespace`.\\n\\t *\\n\\t * @param {String} namespace\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction debug(namespace) {\\n\\n\\t  // define the `disabled` version\\n\\t  function disabled() {\\n\\t  }\\n\\t  disabled.enabled = false;\\n\\n\\t  // define the `enabled` version\\n\\t  function enabled() {\\n\\n\\t    var self = enabled;\\n\\n\\t    // set `diff` timestamp\\n\\t    var curr = +new Date();\\n\\t    var ms = curr - (prevTime || curr);\\n\\t    self.diff = ms;\\n\\t    self.prev = prevTime;\\n\\t    self.curr = curr;\\n\\t    prevTime = curr;\\n\\n\\t    // add the `color` if not set\\n\\t    if (null == self.useColors) self.useColors = exports.useColors();\\n\\t    if (null == self.color && self.useColors) self.color = selectColor();\\n\\n\\t    var args = Array.prototype.slice.call(arguments);\\n\\n\\t    args[0] = exports.coerce(args[0]);\\n\\n\\t    if ('string' !== typeof args[0]) {\\n\\t      // anything else let's inspect with %o\\n\\t      args = ['%o'].concat(args);\\n\\t    }\\n\\n\\t    // apply any `formatters` transformations\\n\\t    var index = 0;\\n\\t    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\\n\\t      // if we encounter an escaped % then don't increase the array index\\n\\t      if (match === '%%') return match;\\n\\t      index++;\\n\\t      var formatter = exports.formatters[format];\\n\\t      if ('function' === typeof formatter) {\\n\\t        var val = args[index];\\n\\t        match = formatter.call(self, val);\\n\\n\\t        // now we need to remove `args[index]` since it's inlined in the `format`\\n\\t        args.splice(index, 1);\\n\\t        index--;\\n\\t      }\\n\\t      return match;\\n\\t    });\\n\\n\\t    if ('function' === typeof exports.formatArgs) {\\n\\t      args = exports.formatArgs.apply(self, args);\\n\\t    }\\n\\t    var logFn = enabled.log || exports.log || console.log.bind(console);\\n\\t    logFn.apply(self, args);\\n\\t  }\\n\\t  enabled.enabled = true;\\n\\n\\t  var fn = exports.enabled(namespace) ? enabled : disabled;\\n\\n\\t  fn.namespace = namespace;\\n\\n\\t  return fn;\\n\\t}\\n\\n\\t/**\\n\\t * Enables a debug mode by namespaces. This can include modes\\n\\t * separated by a colon and wildcards.\\n\\t *\\n\\t * @param {String} namespaces\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enable(namespaces) {\\n\\t  exports.save(namespaces);\\n\\n\\t  var split = (namespaces || '').split(/[\\\\s,]+/);\\n\\t  var len = split.length;\\n\\n\\t  for (var i = 0; i < len; i++) {\\n\\t    if (!split[i]) continue; // ignore empty strings\\n\\t    namespaces = split[i].replace(/\\\\*/g, '.*?');\\n\\t    if (namespaces[0] === '-') {\\n\\t      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\\n\\t    } else {\\n\\t      exports.names.push(new RegExp('^' + namespaces + '$'));\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Disable debug output.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction disable() {\\n\\t  exports.enable('');\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if the given mode name is enabled, false otherwise.\\n\\t *\\n\\t * @param {String} name\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tfunction enabled(name) {\\n\\t  var i, len;\\n\\t  for (i = 0, len = exports.skips.length; i < len; i++) {\\n\\t    if (exports.skips[i].test(name)) {\\n\\t      return false;\\n\\t    }\\n\\t  }\\n\\t  for (i = 0, len = exports.names.length; i < len; i++) {\\n\\t    if (exports.names[i].test(name)) {\\n\\t      return true;\\n\\t    }\\n\\t  }\\n\\t  return false;\\n\\t}\\n\\n\\t/**\\n\\t * Coerce `val`.\\n\\t *\\n\\t * @param {Mixed} val\\n\\t * @return {Mixed}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction coerce(val) {\\n\\t  if (val instanceof Error) return val.stack || val.message;\\n\\t  return val;\\n\\t}\\n\\n\\n/***/ },\\n/* 10 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Helpers.\\n\\t */\\n\\n\\tvar s = 1000;\\n\\tvar m = s * 60;\\n\\tvar h = m * 60;\\n\\tvar d = h * 24;\\n\\tvar y = d * 365.25;\\n\\n\\t/**\\n\\t * Parse or format the given `val`.\\n\\t *\\n\\t * Options:\\n\\t *\\n\\t *  - `long` verbose formatting [false]\\n\\t *\\n\\t * @param {String|Number} val\\n\\t * @param {Object} options\\n\\t * @return {String|Number}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(val, options){\\n\\t  options = options || {};\\n\\t  if ('string' == typeof val) return parse(val);\\n\\t  return options.long\\n\\t    ? long(val)\\n\\t    : short(val);\\n\\t};\\n\\n\\t/**\\n\\t * Parse the given `str` and return milliseconds.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Number}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction parse(str) {\\n\\t  str = '' + str;\\n\\t  if (str.length > 10000) return;\\n\\t  var match = /^((?:\\\\d+)?\\\\.?\\\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\\n\\t  if (!match) return;\\n\\t  var n = parseFloat(match[1]);\\n\\t  var type = (match[2] || 'ms').toLowerCase();\\n\\t  switch (type) {\\n\\t    case 'years':\\n\\t    case 'year':\\n\\t    case 'yrs':\\n\\t    case 'yr':\\n\\t    case 'y':\\n\\t      return n * y;\\n\\t    case 'days':\\n\\t    case 'day':\\n\\t    case 'd':\\n\\t      return n * d;\\n\\t    case 'hours':\\n\\t    case 'hour':\\n\\t    case 'hrs':\\n\\t    case 'hr':\\n\\t    case 'h':\\n\\t      return n * h;\\n\\t    case 'minutes':\\n\\t    case 'minute':\\n\\t    case 'mins':\\n\\t    case 'min':\\n\\t    case 'm':\\n\\t      return n * m;\\n\\t    case 'seconds':\\n\\t    case 'second':\\n\\t    case 'secs':\\n\\t    case 'sec':\\n\\t    case 's':\\n\\t      return n * s;\\n\\t    case 'milliseconds':\\n\\t    case 'millisecond':\\n\\t    case 'msecs':\\n\\t    case 'msec':\\n\\t    case 'ms':\\n\\t      return n;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Short format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction short(ms) {\\n\\t  if (ms >= d) return Math.round(ms / d) + 'd';\\n\\t  if (ms >= h) return Math.round(ms / h) + 'h';\\n\\t  if (ms >= m) return Math.round(ms / m) + 'm';\\n\\t  if (ms >= s) return Math.round(ms / s) + 's';\\n\\t  return ms + 'ms';\\n\\t}\\n\\n\\t/**\\n\\t * Long format for `ms`.\\n\\t *\\n\\t * @param {Number} ms\\n\\t * @return {String}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction long(ms) {\\n\\t  return plural(ms, d, 'day')\\n\\t    || plural(ms, h, 'hour')\\n\\t    || plural(ms, m, 'minute')\\n\\t    || plural(ms, s, 'second')\\n\\t    || ms + ' ms';\\n\\t}\\n\\n\\t/**\\n\\t * Pluralization helper.\\n\\t */\\n\\n\\tfunction plural(ms, n, name) {\\n\\t  if (ms < n) return;\\n\\t  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\\n\\t  return Math.ceil(ms / n) + ' ' + name + 's';\\n\\t}\\n\\n\\n/***/ },\\n/* 11 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(module, global) {/*** IMPORTS FROM imports-loader ***/\\n\\tvar define = false;\\n\\n\\t/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\\n\\t;(function () {\\n\\t  // Detect the `define` function exposed by asynchronous module loaders. The\\n\\t  // strict `define` check is necessary for compatibility with `r.js`.\\n\\t  var isLoader = typeof define === \\\"function\\\" && define.amd;\\n\\n\\t  // A set of types used to distinguish objects from primitives.\\n\\t  var objectTypes = {\\n\\t    \\\"function\\\": true,\\n\\t    \\\"object\\\": true\\n\\t  };\\n\\n\\t  // Detect the `exports` object exposed by CommonJS implementations.\\n\\t  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\\n\\n\\t  // Use the `global` object exposed by Node (including Browserify via\\n\\t  // `insert-module-globals`), Narwhal, and Ringo as the default context,\\n\\t  // and the `window` object in browsers. Rhino exports a `global` function\\n\\t  // instead.\\n\\t  var root = objectTypes[typeof window] && window || this,\\n\\t      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \\\"object\\\" && global;\\n\\n\\t  if (freeGlobal && (freeGlobal[\\\"global\\\"] === freeGlobal || freeGlobal[\\\"window\\\"] === freeGlobal || freeGlobal[\\\"self\\\"] === freeGlobal)) {\\n\\t    root = freeGlobal;\\n\\t  }\\n\\n\\t  // Public: Initializes JSON 3 using the given `context` object, attaching the\\n\\t  // `stringify` and `parse` functions to the specified `exports` object.\\n\\t  function runInContext(context, exports) {\\n\\t    context || (context = root[\\\"Object\\\"]());\\n\\t    exports || (exports = root[\\\"Object\\\"]());\\n\\n\\t    // Native constructor aliases.\\n\\t    var Number = context[\\\"Number\\\"] || root[\\\"Number\\\"],\\n\\t        String = context[\\\"String\\\"] || root[\\\"String\\\"],\\n\\t        Object = context[\\\"Object\\\"] || root[\\\"Object\\\"],\\n\\t        Date = context[\\\"Date\\\"] || root[\\\"Date\\\"],\\n\\t        SyntaxError = context[\\\"SyntaxError\\\"] || root[\\\"SyntaxError\\\"],\\n\\t        TypeError = context[\\\"TypeError\\\"] || root[\\\"TypeError\\\"],\\n\\t        Math = context[\\\"Math\\\"] || root[\\\"Math\\\"],\\n\\t        nativeJSON = context[\\\"JSON\\\"] || root[\\\"JSON\\\"];\\n\\n\\t    // Delegate to the native `stringify` and `parse` implementations.\\n\\t    if (typeof nativeJSON == \\\"object\\\" && nativeJSON) {\\n\\t      exports.stringify = nativeJSON.stringify;\\n\\t      exports.parse = nativeJSON.parse;\\n\\t    }\\n\\n\\t    // Convenience aliases.\\n\\t    var objectProto = Object.prototype,\\n\\t        getClass = objectProto.toString,\\n\\t        isProperty, forEach, undef;\\n\\n\\t    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\\n\\t    var isExtended = new Date(-3509827334573292);\\n\\t    try {\\n\\t      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\\n\\t      // results for certain dates in Opera >= 10.53.\\n\\t      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\\n\\t        // Safari < 2.0.2 stores the internal millisecond time value correctly,\\n\\t        // but clips the values returned by the date methods to the range of\\n\\t        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\\n\\t        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\\n\\t    } catch (exception) {}\\n\\n\\t    // Internal: Determines whether the native `JSON.stringify` and `parse`\\n\\t    // implementations are spec-compliant. Based on work by Ken Snyder.\\n\\t    function has(name) {\\n\\t      if (has[name] !== undef) {\\n\\t        // Return cached feature test result.\\n\\t        return has[name];\\n\\t      }\\n\\t      var isSupported;\\n\\t      if (name == \\\"bug-string-char-index\\\") {\\n\\t        // IE <= 7 doesn't support accessing string characters using square\\n\\t        // bracket notation. IE 8 only supports this for primitives.\\n\\t        isSupported = \\\"a\\\"[0] != \\\"a\\\";\\n\\t      } else if (name == \\\"json\\\") {\\n\\t        // Indicates whether both `JSON.stringify` and `JSON.parse` are\\n\\t        // supported.\\n\\t        isSupported = has(\\\"json-stringify\\\") && has(\\\"json-parse\\\");\\n\\t      } else {\\n\\t        var value, serialized = '{\\\"a\\\":[1,true,false,null,\\\"\\\\\\\\u0000\\\\\\\\b\\\\\\\\n\\\\\\\\f\\\\\\\\r\\\\\\\\t\\\"]}';\\n\\t        // Test `JSON.stringify`.\\n\\t        if (name == \\\"json-stringify\\\") {\\n\\t          var stringify = exports.stringify, stringifySupported = typeof stringify == \\\"function\\\" && isExtended;\\n\\t          if (stringifySupported) {\\n\\t            // A test function object with a custom `toJSON` method.\\n\\t            (value = function () {\\n\\t              return 1;\\n\\t            }).toJSON = value;\\n\\t            try {\\n\\t              stringifySupported =\\n\\t                // Firefox 3.1b1 and b2 serialize string, number, and boolean\\n\\t                // primitives as object literals.\\n\\t                stringify(0) === \\\"0\\\" &&\\n\\t                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\\n\\t                // literals.\\n\\t                stringify(new Number()) === \\\"0\\\" &&\\n\\t                stringify(new String()) == '\\\"\\\"' &&\\n\\t                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\\n\\t                // does not define a canonical JSON representation (this applies to\\n\\t                // objects with `toJSON` properties as well, *unless* they are nested\\n\\t                // within an object or array).\\n\\t                stringify(getClass) === undef &&\\n\\t                // IE 8 serializes `undefined` as `\\\"undefined\\\"`. Safari <= 5.1.7 and\\n\\t                // FF 3.1b3 pass this test.\\n\\t                stringify(undef) === undef &&\\n\\t                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\\n\\t                // respectively, if the value is omitted entirely.\\n\\t                stringify() === undef &&\\n\\t                // FF 3.1b1, 2 throw an error if the given value is not a number,\\n\\t                // string, array, object, Boolean, or `null` literal. This applies to\\n\\t                // objects with custom `toJSON` methods as well, unless they are nested\\n\\t                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\\n\\t                // methods entirely.\\n\\t                stringify(value) === \\\"1\\\" &&\\n\\t                stringify([value]) == \\\"[1]\\\" &&\\n\\t                // Prototype <= 1.6.1 serializes `[undefined]` as `\\\"[]\\\"` instead of\\n\\t                // `\\\"[null]\\\"`.\\n\\t                stringify([undef]) == \\\"[null]\\\" &&\\n\\t                // YUI 3.0.0b1 fails to serialize `null` literals.\\n\\t                stringify(null) == \\\"null\\\" &&\\n\\t                // FF 3.1b1, 2 halts serialization if an array contains a function:\\n\\t                // `[1, true, getClass, 1]` serializes as \\\"[1,true,],\\\". FF 3.1b3\\n\\t                // elides non-JSON values from objects and arrays, unless they\\n\\t                // define custom `toJSON` methods.\\n\\t                stringify([undef, getClass, null]) == \\\"[null,null,null]\\\" &&\\n\\t                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\\n\\t                // where character escape codes are expected (e.g., `\\\\b` => `\\\\u0008`).\\n\\t                stringify({ \\\"a\\\": [value, true, false, null, \\\"\\\\x00\\\\b\\\\n\\\\f\\\\r\\\\t\\\"] }) == serialized &&\\n\\t                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\\n\\t                stringify(null, value) === \\\"1\\\" &&\\n\\t                stringify([1, 2], null, 1) == \\\"[\\\\n 1,\\\\n 2\\\\n]\\\" &&\\n\\t                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\\n\\t                // serialize extended years.\\n\\t                stringify(new Date(-8.64e15)) == '\\\"-271821-04-20T00:00:00.000Z\\\"' &&\\n\\t                // The milliseconds are optional in ES 5, but required in 5.1.\\n\\t                stringify(new Date(8.64e15)) == '\\\"+275760-09-13T00:00:00.000Z\\\"' &&\\n\\t                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\\n\\t                // four-digit years instead of six-digit years. Credits: @Yaffle.\\n\\t                stringify(new Date(-621987552e5)) == '\\\"-000001-01-01T00:00:00.000Z\\\"' &&\\n\\t                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\\n\\t                // values less than 1000. Credits: @Yaffle.\\n\\t                stringify(new Date(-1)) == '\\\"1969-12-31T23:59:59.999Z\\\"';\\n\\t            } catch (exception) {\\n\\t              stringifySupported = false;\\n\\t            }\\n\\t          }\\n\\t          isSupported = stringifySupported;\\n\\t        }\\n\\t        // Test `JSON.parse`.\\n\\t        if (name == \\\"json-parse\\\") {\\n\\t          var parse = exports.parse;\\n\\t          if (typeof parse == \\\"function\\\") {\\n\\t            try {\\n\\t              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\\n\\t              // Conforming implementations should also coerce the initial argument to\\n\\t              // a string prior to parsing.\\n\\t              if (parse(\\\"0\\\") === 0 && !parse(false)) {\\n\\t                // Simple parsing test.\\n\\t                value = parse(serialized);\\n\\t                var parseSupported = value[\\\"a\\\"].length == 5 && value[\\\"a\\\"][0] === 1;\\n\\t                if (parseSupported) {\\n\\t                  try {\\n\\t                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\\n\\t                    parseSupported = !parse('\\\"\\\\t\\\"');\\n\\t                  } catch (exception) {}\\n\\t                  if (parseSupported) {\\n\\t                    try {\\n\\t                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\\n\\t                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\\n\\t                      // certain octal literals.\\n\\t                      parseSupported = parse(\\\"01\\\") !== 1;\\n\\t                    } catch (exception) {}\\n\\t                  }\\n\\t                  if (parseSupported) {\\n\\t                    try {\\n\\t                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\\n\\t                      // points. These environments, along with FF 3.1b1 and 2,\\n\\t                      // also allow trailing commas in JSON objects and arrays.\\n\\t                      parseSupported = parse(\\\"1.\\\") !== 1;\\n\\t                    } catch (exception) {}\\n\\t                  }\\n\\t                }\\n\\t              }\\n\\t            } catch (exception) {\\n\\t              parseSupported = false;\\n\\t            }\\n\\t          }\\n\\t          isSupported = parseSupported;\\n\\t        }\\n\\t      }\\n\\t      return has[name] = !!isSupported;\\n\\t    }\\n\\n\\t    if (!has(\\\"json\\\")) {\\n\\t      // Common `[[Class]]` name aliases.\\n\\t      var functionClass = \\\"[object Function]\\\",\\n\\t          dateClass = \\\"[object Date]\\\",\\n\\t          numberClass = \\\"[object Number]\\\",\\n\\t          stringClass = \\\"[object String]\\\",\\n\\t          arrayClass = \\\"[object Array]\\\",\\n\\t          booleanClass = \\\"[object Boolean]\\\";\\n\\n\\t      // Detect incomplete support for accessing string characters by index.\\n\\t      var charIndexBuggy = has(\\\"bug-string-char-index\\\");\\n\\n\\t      // Define additional utility methods if the `Date` methods are buggy.\\n\\t      if (!isExtended) {\\n\\t        var floor = Math.floor;\\n\\t        // A mapping between the months of the year and the number of days between\\n\\t        // January 1st and the first of the respective month.\\n\\t        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\\n\\t        // Internal: Calculates the number of days between the Unix epoch and the\\n\\t        // first day of the given month.\\n\\t        var getDay = function (year, month) {\\n\\t          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\\n\\t        };\\n\\t      }\\n\\n\\t      // Internal: Determines if a property is a direct property of the given\\n\\t      // object. Delegates to the native `Object#hasOwnProperty` method.\\n\\t      if (!(isProperty = objectProto.hasOwnProperty)) {\\n\\t        isProperty = function (property) {\\n\\t          var members = {}, constructor;\\n\\t          if ((members.__proto__ = null, members.__proto__ = {\\n\\t            // The *proto* property cannot be set multiple times in recent\\n\\t            // versions of Firefox and SeaMonkey.\\n\\t            \\\"toString\\\": 1\\n\\t          }, members).toString != getClass) {\\n\\t            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\\n\\t            // supports the mutable *proto* property.\\n\\t            isProperty = function (property) {\\n\\t              // Capture and break the object's prototype chain (see section 8.6.2\\n\\t              // of the ES 5.1 spec). The parenthesized expression prevents an\\n\\t              // unsafe transformation by the Closure Compiler.\\n\\t              var original = this.__proto__, result = property in (this.__proto__ = null, this);\\n\\t              // Restore the original prototype chain.\\n\\t              this.__proto__ = original;\\n\\t              return result;\\n\\t            };\\n\\t          } else {\\n\\t            // Capture a reference to the top-level `Object` constructor.\\n\\t            constructor = members.constructor;\\n\\t            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\\n\\t            // other environments.\\n\\t            isProperty = function (property) {\\n\\t              var parent = (this.constructor || constructor).prototype;\\n\\t              return property in this && !(property in parent && this[property] === parent[property]);\\n\\t            };\\n\\t          }\\n\\t          members = null;\\n\\t          return isProperty.call(this, property);\\n\\t        };\\n\\t      }\\n\\n\\t      // Internal: Normalizes the `for...in` iteration algorithm across\\n\\t      // environments. Each enumerated key is yielded to a `callback` function.\\n\\t      forEach = function (object, callback) {\\n\\t        var size = 0, Properties, members, property;\\n\\n\\t        // Tests for bugs in the current environment's `for...in` algorithm. The\\n\\t        // `valueOf` property inherits the non-enumerable flag from\\n\\t        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\\n\\t        (Properties = function () {\\n\\t          this.valueOf = 0;\\n\\t        }).prototype.valueOf = 0;\\n\\n\\t        // Iterate over a new instance of the `Properties` class.\\n\\t        members = new Properties();\\n\\t        for (property in members) {\\n\\t          // Ignore all properties inherited from `Object.prototype`.\\n\\t          if (isProperty.call(members, property)) {\\n\\t            size++;\\n\\t          }\\n\\t        }\\n\\t        Properties = members = null;\\n\\n\\t        // Normalize the iteration algorithm.\\n\\t        if (!size) {\\n\\t          // A list of non-enumerable properties inherited from `Object.prototype`.\\n\\t          members = [\\\"valueOf\\\", \\\"toString\\\", \\\"toLocaleString\\\", \\\"propertyIsEnumerable\\\", \\\"isPrototypeOf\\\", \\\"hasOwnProperty\\\", \\\"constructor\\\"];\\n\\t          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\\n\\t          // properties.\\n\\t          forEach = function (object, callback) {\\n\\t            var isFunction = getClass.call(object) == functionClass, property, length;\\n\\t            var hasProperty = !isFunction && typeof object.constructor != \\\"function\\\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\\n\\t            for (property in object) {\\n\\t              // Gecko <= 1.0 enumerates the `prototype` property of functions under\\n\\t              // certain conditions; IE does not.\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && hasProperty.call(object, property)) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t            // Manually invoke the callback for each non-enumerable property.\\n\\t            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\\n\\t          };\\n\\t        } else if (size == 2) {\\n\\t          // Safari <= 2.0.4 enumerates shadowed properties twice.\\n\\t          forEach = function (object, callback) {\\n\\t            // Create a set of iterated properties.\\n\\t            var members = {}, isFunction = getClass.call(object) == functionClass, property;\\n\\t            for (property in object) {\\n\\t              // Store each property name to prevent double enumeration. The\\n\\t              // `prototype` property of functions is not enumerated due to cross-\\n\\t              // environment inconsistencies.\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t          };\\n\\t        } else {\\n\\t          // No bugs detected; use the standard `for...in` algorithm.\\n\\t          forEach = function (object, callback) {\\n\\t            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\\n\\t            for (property in object) {\\n\\t              if (!(isFunction && property == \\\"prototype\\\") && isProperty.call(object, property) && !(isConstructor = property === \\\"constructor\\\")) {\\n\\t                callback(property);\\n\\t              }\\n\\t            }\\n\\t            // Manually invoke the callback for the `constructor` property due to\\n\\t            // cross-environment inconsistencies.\\n\\t            if (isConstructor || isProperty.call(object, (property = \\\"constructor\\\"))) {\\n\\t              callback(property);\\n\\t            }\\n\\t          };\\n\\t        }\\n\\t        return forEach(object, callback);\\n\\t      };\\n\\n\\t      // Public: Serializes a JavaScript `value` as a JSON string. The optional\\n\\t      // `filter` argument may specify either a function that alters how object and\\n\\t      // array members are serialized, or an array of strings and numbers that\\n\\t      // indicates which properties should be serialized. The optional `width`\\n\\t      // argument may be either a string or number that specifies the indentation\\n\\t      // level of the output.\\n\\t      if (!has(\\\"json-stringify\\\")) {\\n\\t        // Internal: A map of control characters and their escaped equivalents.\\n\\t        var Escapes = {\\n\\t          92: \\\"\\\\\\\\\\\\\\\\\\\",\\n\\t          34: '\\\\\\\\\\\"',\\n\\t          8: \\\"\\\\\\\\b\\\",\\n\\t          12: \\\"\\\\\\\\f\\\",\\n\\t          10: \\\"\\\\\\\\n\\\",\\n\\t          13: \\\"\\\\\\\\r\\\",\\n\\t          9: \\\"\\\\\\\\t\\\"\\n\\t        };\\n\\n\\t        // Internal: Converts `value` into a zero-padded string such that its\\n\\t        // length is at least equal to `width`. The `width` must be <= 6.\\n\\t        var leadingZeroes = \\\"000000\\\";\\n\\t        var toPaddedString = function (width, value) {\\n\\t          // The `|| 0` expression is necessary to work around a bug in\\n\\t          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \\\"0\\\"`.\\n\\t          return (leadingZeroes + (value || 0)).slice(-width);\\n\\t        };\\n\\n\\t        // Internal: Double-quotes a string `value`, replacing all ASCII control\\n\\t        // characters (characters with code unit values between 0 and 31) with\\n\\t        // their escaped equivalents. This is an implementation of the\\n\\t        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\\n\\t        var unicodePrefix = \\\"\\\\\\\\u00\\\";\\n\\t        var quote = function (value) {\\n\\t          var result = '\\\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\\n\\t          var symbols = useCharIndex && (charIndexBuggy ? value.split(\\\"\\\") : value);\\n\\t          for (; index < length; index++) {\\n\\t            var charCode = value.charCodeAt(index);\\n\\t            // If the character is a control character, append its Unicode or\\n\\t            // shorthand escape sequence; otherwise, append the character as-is.\\n\\t            switch (charCode) {\\n\\t              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\\n\\t                result += Escapes[charCode];\\n\\t                break;\\n\\t              default:\\n\\t                if (charCode < 32) {\\n\\t                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\\n\\t                  break;\\n\\t                }\\n\\t                result += useCharIndex ? symbols[index] : value.charAt(index);\\n\\t            }\\n\\t          }\\n\\t          return result + '\\\"';\\n\\t        };\\n\\n\\t        // Internal: Recursively serializes an object. Implements the\\n\\t        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\\n\\t        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\\n\\t          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\\n\\t          try {\\n\\t            // Necessary for host object support.\\n\\t            value = object[property];\\n\\t          } catch (exception) {}\\n\\t          if (typeof value == \\\"object\\\" && value) {\\n\\t            className = getClass.call(value);\\n\\t            if (className == dateClass && !isProperty.call(value, \\\"toJSON\\\")) {\\n\\t              if (value > -1 / 0 && value < 1 / 0) {\\n\\t                // Dates are serialized according to the `Date#toJSON` method\\n\\t                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\\n\\t                // for the ISO 8601 date time string format.\\n\\t                if (getDay) {\\n\\t                  // Manually compute the year, month, date, hours, minutes,\\n\\t                  // seconds, and milliseconds if the `getUTC*` methods are\\n\\t                  // buggy. Adapted from @Yaffle's `date-shim` project.\\n\\t                  date = floor(value / 864e5);\\n\\t                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\\n\\t                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\\n\\t                  date = 1 + date - getDay(year, month);\\n\\t                  // The `time` value specifies the time within the day (see ES\\n\\t                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\\n\\t                  // to compute `A modulo B`, as the `%` operator does not\\n\\t                  // correspond to the `modulo` operation for negative numbers.\\n\\t                  time = (value % 864e5 + 864e5) % 864e5;\\n\\t                  // The hours, minutes, seconds, and milliseconds are obtained by\\n\\t                  // decomposing the time within the day. See section 15.9.1.10.\\n\\t                  hours = floor(time / 36e5) % 24;\\n\\t                  minutes = floor(time / 6e4) % 60;\\n\\t                  seconds = floor(time / 1e3) % 60;\\n\\t                  milliseconds = time % 1e3;\\n\\t                } else {\\n\\t                  year = value.getUTCFullYear();\\n\\t                  month = value.getUTCMonth();\\n\\t                  date = value.getUTCDate();\\n\\t                  hours = value.getUTCHours();\\n\\t                  minutes = value.getUTCMinutes();\\n\\t                  seconds = value.getUTCSeconds();\\n\\t                  milliseconds = value.getUTCMilliseconds();\\n\\t                }\\n\\t                // Serialize extended years correctly.\\n\\t                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \\\"-\\\" : \\\"+\\\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\\n\\t                  \\\"-\\\" + toPaddedString(2, month + 1) + \\\"-\\\" + toPaddedString(2, date) +\\n\\t                  // Months, dates, hours, minutes, and seconds should have two\\n\\t                  // digits; milliseconds should have three.\\n\\t                  \\\"T\\\" + toPaddedString(2, hours) + \\\":\\\" + toPaddedString(2, minutes) + \\\":\\\" + toPaddedString(2, seconds) +\\n\\t                  // Milliseconds are optional in ES 5.0, but required in 5.1.\\n\\t                  \\\".\\\" + toPaddedString(3, milliseconds) + \\\"Z\\\";\\n\\t              } else {\\n\\t                value = null;\\n\\t              }\\n\\t            } else if (typeof value.toJSON == \\\"function\\\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \\\"toJSON\\\"))) {\\n\\t              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\\n\\t              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\\n\\t              // ignores all `toJSON` methods on these objects unless they are\\n\\t              // defined directly on an instance.\\n\\t              value = value.toJSON(property);\\n\\t            }\\n\\t          }\\n\\t          if (callback) {\\n\\t            // If a replacement function was provided, call it to obtain the value\\n\\t            // for serialization.\\n\\t            value = callback.call(object, property, value);\\n\\t          }\\n\\t          if (value === null) {\\n\\t            return \\\"null\\\";\\n\\t          }\\n\\t          className = getClass.call(value);\\n\\t          if (className == booleanClass) {\\n\\t            // Booleans are represented literally.\\n\\t            return \\\"\\\" + value;\\n\\t          } else if (className == numberClass) {\\n\\t            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\\n\\t            // `\\\"null\\\"`.\\n\\t            return value > -1 / 0 && value < 1 / 0 ? \\\"\\\" + value : \\\"null\\\";\\n\\t          } else if (className == stringClass) {\\n\\t            // Strings are double-quoted and escaped.\\n\\t            return quote(\\\"\\\" + value);\\n\\t          }\\n\\t          // Recursively serialize objects and arrays.\\n\\t          if (typeof value == \\\"object\\\") {\\n\\t            // Check for cyclic structures. This is a linear search; performance\\n\\t            // is inversely proportional to the number of unique nested objects.\\n\\t            for (length = stack.length; length--;) {\\n\\t              if (stack[length] === value) {\\n\\t                // Cyclic structures cannot be serialized by `JSON.stringify`.\\n\\t                throw TypeError();\\n\\t              }\\n\\t            }\\n\\t            // Add the object to the stack of traversed objects.\\n\\t            stack.push(value);\\n\\t            results = [];\\n\\t            // Save the current indentation level and indent one additional level.\\n\\t            prefix = indentation;\\n\\t            indentation += whitespace;\\n\\t            if (className == arrayClass) {\\n\\t              // Recursively serialize array elements.\\n\\t              for (index = 0, length = value.length; index < length; index++) {\\n\\t                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\\n\\t                results.push(element === undef ? \\\"null\\\" : element);\\n\\t              }\\n\\t              result = results.length ? (whitespace ? \\\"[\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"]\\\" : (\\\"[\\\" + results.join(\\\",\\\") + \\\"]\\\")) : \\\"[]\\\";\\n\\t            } else {\\n\\t              // Recursively serialize object members. Members are selected from\\n\\t              // either a user-specified list of property names, or the object\\n\\t              // itself.\\n\\t              forEach(properties || value, function (property) {\\n\\t                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\\n\\t                if (element !== undef) {\\n\\t                  // According to ES 5.1 section 15.12.3: \\\"If `gap` {whitespace}\\n\\t                  // is not the empty string, let `member` {quote(property) + \\\":\\\"}\\n\\t                  // be the concatenation of `member` and the `space` character.\\\"\\n\\t                  // The \\\"`space` character\\\" refers to the literal space\\n\\t                  // character, not the `space` {width} argument provided to\\n\\t                  // `JSON.stringify`.\\n\\t                  results.push(quote(property) + \\\":\\\" + (whitespace ? \\\" \\\" : \\\"\\\") + element);\\n\\t                }\\n\\t              });\\n\\t              result = results.length ? (whitespace ? \\\"{\\\\n\\\" + indentation + results.join(\\\",\\\\n\\\" + indentation) + \\\"\\\\n\\\" + prefix + \\\"}\\\" : (\\\"{\\\" + results.join(\\\",\\\") + \\\"}\\\")) : \\\"{}\\\";\\n\\t            }\\n\\t            // Remove the object from the traversed object stack.\\n\\t            stack.pop();\\n\\t            return result;\\n\\t          }\\n\\t        };\\n\\n\\t        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\\n\\t        exports.stringify = function (source, filter, width) {\\n\\t          var whitespace, callback, properties, className;\\n\\t          if (objectTypes[typeof filter] && filter) {\\n\\t            if ((className = getClass.call(filter)) == functionClass) {\\n\\t              callback = filter;\\n\\t            } else if (className == arrayClass) {\\n\\t              // Convert the property names array into a makeshift set.\\n\\t              properties = {};\\n\\t              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\\n\\t            }\\n\\t          }\\n\\t          if (width) {\\n\\t            if ((className = getClass.call(width)) == numberClass) {\\n\\t              // Convert the `width` to an integer and create a string containing\\n\\t              // `width` number of space characters.\\n\\t              if ((width -= width % 1) > 0) {\\n\\t                for (whitespace = \\\"\\\", width > 10 && (width = 10); whitespace.length < width; whitespace += \\\" \\\");\\n\\t              }\\n\\t            } else if (className == stringClass) {\\n\\t              whitespace = width.length <= 10 ? width : width.slice(0, 10);\\n\\t            }\\n\\t          }\\n\\t          // Opera <= 7.54u2 discards the values associated with empty string keys\\n\\t          // (`\\\"\\\"`) only if they are used directly within an object member list\\n\\t          // (e.g., `!(\\\"\\\" in { \\\"\\\": 1})`).\\n\\t          return serialize(\\\"\\\", (value = {}, value[\\\"\\\"] = source, value), callback, properties, whitespace, \\\"\\\", []);\\n\\t        };\\n\\t      }\\n\\n\\t      // Public: Parses a JSON source string.\\n\\t      if (!has(\\\"json-parse\\\")) {\\n\\t        var fromCharCode = String.fromCharCode;\\n\\n\\t        // Internal: A map of escaped control characters and their unescaped\\n\\t        // equivalents.\\n\\t        var Unescapes = {\\n\\t          92: \\\"\\\\\\\\\\\",\\n\\t          34: '\\\"',\\n\\t          47: \\\"/\\\",\\n\\t          98: \\\"\\\\b\\\",\\n\\t          116: \\\"\\\\t\\\",\\n\\t          110: \\\"\\\\n\\\",\\n\\t          102: \\\"\\\\f\\\",\\n\\t          114: \\\"\\\\r\\\"\\n\\t        };\\n\\n\\t        // Internal: Stores the parser state.\\n\\t        var Index, Source;\\n\\n\\t        // Internal: Resets the parser state and throws a `SyntaxError`.\\n\\t        var abort = function () {\\n\\t          Index = Source = null;\\n\\t          throw SyntaxError();\\n\\t        };\\n\\n\\t        // Internal: Returns the next token, or `\\\"$\\\"` if the parser has reached\\n\\t        // the end of the source string. A token may be a string, number, `null`\\n\\t        // literal, or Boolean literal.\\n\\t        var lex = function () {\\n\\t          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\\n\\t          while (Index < length) {\\n\\t            charCode = source.charCodeAt(Index);\\n\\t            switch (charCode) {\\n\\t              case 9: case 10: case 13: case 32:\\n\\t                // Skip whitespace tokens, including tabs, carriage returns, line\\n\\t                // feeds, and space characters.\\n\\t                Index++;\\n\\t                break;\\n\\t              case 123: case 125: case 91: case 93: case 58: case 44:\\n\\t                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\\n\\t                // the current position.\\n\\t                value = charIndexBuggy ? source.charAt(Index) : source[Index];\\n\\t                Index++;\\n\\t                return value;\\n\\t              case 34:\\n\\t                // `\\\"` delimits a JSON string; advance to the next character and\\n\\t                // begin parsing the string. String tokens are prefixed with the\\n\\t                // sentinel `@` character to distinguish them from punctuators and\\n\\t                // end-of-string tokens.\\n\\t                for (value = \\\"@\\\", Index++; Index < length;) {\\n\\t                  charCode = source.charCodeAt(Index);\\n\\t                  if (charCode < 32) {\\n\\t                    // Unescaped ASCII control characters (those with a code unit\\n\\t                    // less than the space character) are not permitted.\\n\\t                    abort();\\n\\t                  } else if (charCode == 92) {\\n\\t                    // A reverse solidus (`\\\\`) marks the beginning of an escaped\\n\\t                    // control character (including `\\\"`, `\\\\`, and `/`) or Unicode\\n\\t                    // escape sequence.\\n\\t                    charCode = source.charCodeAt(++Index);\\n\\t                    switch (charCode) {\\n\\t                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\\n\\t                        // Revive escaped control characters.\\n\\t                        value += Unescapes[charCode];\\n\\t                        Index++;\\n\\t                        break;\\n\\t                      case 117:\\n\\t                        // `\\\\u` marks the beginning of a Unicode escape sequence.\\n\\t                        // Advance to the first character and validate the\\n\\t                        // four-digit code point.\\n\\t                        begin = ++Index;\\n\\t                        for (position = Index + 4; Index < position; Index++) {\\n\\t                          charCode = source.charCodeAt(Index);\\n\\t                          // A valid sequence comprises four hexdigits (case-\\n\\t                          // insensitive) that form a single hexadecimal value.\\n\\t                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\\n\\t                            // Invalid Unicode escape sequence.\\n\\t                            abort();\\n\\t                          }\\n\\t                        }\\n\\t                        // Revive the escaped character.\\n\\t                        value += fromCharCode(\\\"0x\\\" + source.slice(begin, Index));\\n\\t                        break;\\n\\t                      default:\\n\\t                        // Invalid escape sequence.\\n\\t                        abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    if (charCode == 34) {\\n\\t                      // An unescaped double-quote character marks the end of the\\n\\t                      // string.\\n\\t                      break;\\n\\t                    }\\n\\t                    charCode = source.charCodeAt(Index);\\n\\t                    begin = Index;\\n\\t                    // Optimize for the common case where a string is valid.\\n\\t                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\\n\\t                      charCode = source.charCodeAt(++Index);\\n\\t                    }\\n\\t                    // Append the string as-is.\\n\\t                    value += source.slice(begin, Index);\\n\\t                  }\\n\\t                }\\n\\t                if (source.charCodeAt(Index) == 34) {\\n\\t                  // Advance to the next character and return the revived string.\\n\\t                  Index++;\\n\\t                  return value;\\n\\t                }\\n\\t                // Unterminated string.\\n\\t                abort();\\n\\t              default:\\n\\t                // Parse numbers and literals.\\n\\t                begin = Index;\\n\\t                // Advance past the negative sign, if one is specified.\\n\\t                if (charCode == 45) {\\n\\t                  isSigned = true;\\n\\t                  charCode = source.charCodeAt(++Index);\\n\\t                }\\n\\t                // Parse an integer or floating-point value.\\n\\t                if (charCode >= 48 && charCode <= 57) {\\n\\t                  // Leading zeroes are interpreted as octal literals.\\n\\t                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\\n\\t                    // Illegal octal literal.\\n\\t                    abort();\\n\\t                  }\\n\\t                  isSigned = false;\\n\\t                  // Parse the integer component.\\n\\t                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\\n\\t                  // Floats cannot contain a leading decimal point; however, this\\n\\t                  // case is already accounted for by the parser.\\n\\t                  if (source.charCodeAt(Index) == 46) {\\n\\t                    position = ++Index;\\n\\t                    // Parse the decimal component.\\n\\t                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n\\t                    if (position == Index) {\\n\\t                      // Illegal trailing decimal.\\n\\t                      abort();\\n\\t                    }\\n\\t                    Index = position;\\n\\t                  }\\n\\t                  // Parse exponents. The `e` denoting the exponent is\\n\\t                  // case-insensitive.\\n\\t                  charCode = source.charCodeAt(Index);\\n\\t                  if (charCode == 101 || charCode == 69) {\\n\\t                    charCode = source.charCodeAt(++Index);\\n\\t                    // Skip past the sign following the exponent, if one is\\n\\t                    // specified.\\n\\t                    if (charCode == 43 || charCode == 45) {\\n\\t                      Index++;\\n\\t                    }\\n\\t                    // Parse the exponential component.\\n\\t                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\\n\\t                    if (position == Index) {\\n\\t                      // Illegal empty exponent.\\n\\t                      abort();\\n\\t                    }\\n\\t                    Index = position;\\n\\t                  }\\n\\t                  // Coerce the parsed value to a JavaScript number.\\n\\t                  return +source.slice(begin, Index);\\n\\t                }\\n\\t                // A negative sign may only precede numbers.\\n\\t                if (isSigned) {\\n\\t                  abort();\\n\\t                }\\n\\t                // `true`, `false`, and `null` literals.\\n\\t                if (source.slice(Index, Index + 4) == \\\"true\\\") {\\n\\t                  Index += 4;\\n\\t                  return true;\\n\\t                } else if (source.slice(Index, Index + 5) == \\\"false\\\") {\\n\\t                  Index += 5;\\n\\t                  return false;\\n\\t                } else if (source.slice(Index, Index + 4) == \\\"null\\\") {\\n\\t                  Index += 4;\\n\\t                  return null;\\n\\t                }\\n\\t                // Unrecognized token.\\n\\t                abort();\\n\\t            }\\n\\t          }\\n\\t          // Return the sentinel `$` character if the parser has reached the end\\n\\t          // of the source string.\\n\\t          return \\\"$\\\";\\n\\t        };\\n\\n\\t        // Internal: Parses a JSON `value` token.\\n\\t        var get = function (value) {\\n\\t          var results, hasMembers;\\n\\t          if (value == \\\"$\\\") {\\n\\t            // Unexpected end of input.\\n\\t            abort();\\n\\t          }\\n\\t          if (typeof value == \\\"string\\\") {\\n\\t            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \\\"@\\\") {\\n\\t              // Remove the sentinel `@` character.\\n\\t              return value.slice(1);\\n\\t            }\\n\\t            // Parse object and array literals.\\n\\t            if (value == \\\"[\\\") {\\n\\t              // Parses a JSON array, returning a new JavaScript array.\\n\\t              results = [];\\n\\t              for (;; hasMembers || (hasMembers = true)) {\\n\\t                value = lex();\\n\\t                // A closing square bracket marks the end of the array literal.\\n\\t                if (value == \\\"]\\\") {\\n\\t                  break;\\n\\t                }\\n\\t                // If the array literal contains elements, the current token\\n\\t                // should be a comma separating the previous element from the\\n\\t                // next.\\n\\t                if (hasMembers) {\\n\\t                  if (value == \\\",\\\") {\\n\\t                    value = lex();\\n\\t                    if (value == \\\"]\\\") {\\n\\t                      // Unexpected trailing `,` in array literal.\\n\\t                      abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    // A `,` must separate each array element.\\n\\t                    abort();\\n\\t                  }\\n\\t                }\\n\\t                // Elisions and leading commas are not permitted.\\n\\t                if (value == \\\",\\\") {\\n\\t                  abort();\\n\\t                }\\n\\t                results.push(get(value));\\n\\t              }\\n\\t              return results;\\n\\t            } else if (value == \\\"{\\\") {\\n\\t              // Parses a JSON object, returning a new JavaScript object.\\n\\t              results = {};\\n\\t              for (;; hasMembers || (hasMembers = true)) {\\n\\t                value = lex();\\n\\t                // A closing curly brace marks the end of the object literal.\\n\\t                if (value == \\\"}\\\") {\\n\\t                  break;\\n\\t                }\\n\\t                // If the object literal contains members, the current token\\n\\t                // should be a comma separator.\\n\\t                if (hasMembers) {\\n\\t                  if (value == \\\",\\\") {\\n\\t                    value = lex();\\n\\t                    if (value == \\\"}\\\") {\\n\\t                      // Unexpected trailing `,` in object literal.\\n\\t                      abort();\\n\\t                    }\\n\\t                  } else {\\n\\t                    // A `,` must separate each object member.\\n\\t                    abort();\\n\\t                  }\\n\\t                }\\n\\t                // Leading commas are not permitted, object property names must be\\n\\t                // double-quoted strings, and a `:` must separate each property\\n\\t                // name and value.\\n\\t                if (value == \\\",\\\" || typeof value != \\\"string\\\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \\\"@\\\" || lex() != \\\":\\\") {\\n\\t                  abort();\\n\\t                }\\n\\t                results[value.slice(1)] = get(lex());\\n\\t              }\\n\\t              return results;\\n\\t            }\\n\\t            // Unexpected token encountered.\\n\\t            abort();\\n\\t          }\\n\\t          return value;\\n\\t        };\\n\\n\\t        // Internal: Updates a traversed object member.\\n\\t        var update = function (source, property, callback) {\\n\\t          var element = walk(source, property, callback);\\n\\t          if (element === undef) {\\n\\t            delete source[property];\\n\\t          } else {\\n\\t            source[property] = element;\\n\\t          }\\n\\t        };\\n\\n\\t        // Internal: Recursively traverses a parsed JSON object, invoking the\\n\\t        // `callback` function for each value. This is an implementation of the\\n\\t        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\\n\\t        var walk = function (source, property, callback) {\\n\\t          var value = source[property], length;\\n\\t          if (typeof value == \\\"object\\\" && value) {\\n\\t            // `forEach` can't be used to traverse an array in Opera <= 8.54\\n\\t            // because its `Object#hasOwnProperty` implementation returns `false`\\n\\t            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\\\"0\\\")`).\\n\\t            if (getClass.call(value) == arrayClass) {\\n\\t              for (length = value.length; length--;) {\\n\\t                update(value, length, callback);\\n\\t              }\\n\\t            } else {\\n\\t              forEach(value, function (property) {\\n\\t                update(value, property, callback);\\n\\t              });\\n\\t            }\\n\\t          }\\n\\t          return callback.call(source, property, value);\\n\\t        };\\n\\n\\t        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\\n\\t        exports.parse = function (source, callback) {\\n\\t          var result, value;\\n\\t          Index = 0;\\n\\t          Source = \\\"\\\" + source;\\n\\t          result = get(lex());\\n\\t          // If a JSON string contains multiple tokens, it is invalid.\\n\\t          if (lex() != \\\"$\\\") {\\n\\t            abort();\\n\\t          }\\n\\t          // Reset the parser state.\\n\\t          Index = Source = null;\\n\\t          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\\\"\\\"] = result, value), \\\"\\\", callback) : result;\\n\\t        };\\n\\t      }\\n\\t    }\\n\\n\\t    exports[\\\"runInContext\\\"] = runInContext;\\n\\t    return exports;\\n\\t  }\\n\\n\\t  if (freeExports && !isLoader) {\\n\\t    // Export for CommonJS environments.\\n\\t    runInContext(root, freeExports);\\n\\t  } else {\\n\\t    // Export for web browsers and JavaScript engines.\\n\\t    var nativeJSON = root.JSON,\\n\\t        previousJSON = root[\\\"JSON3\\\"],\\n\\t        isRestored = false;\\n\\n\\t    var JSON3 = runInContext(root, (root[\\\"JSON3\\\"] = {\\n\\t      // Public: Restores the original value of the global `JSON` object and\\n\\t      // returns a reference to the `JSON3` object.\\n\\t      \\\"noConflict\\\": function () {\\n\\t        if (!isRestored) {\\n\\t          isRestored = true;\\n\\t          root.JSON = nativeJSON;\\n\\t          root[\\\"JSON3\\\"] = previousJSON;\\n\\t          nativeJSON = previousJSON = null;\\n\\t        }\\n\\t        return JSON3;\\n\\t      }\\n\\t    }));\\n\\n\\t    root.JSON = {\\n\\t      \\\"parse\\\": JSON3.parse,\\n\\t      \\\"stringify\\\": JSON3.stringify\\n\\t    };\\n\\t  }\\n\\n\\t  // Export for asynchronous module loaders.\\n\\t  if (isLoader) {\\n\\t    define(function () {\\n\\t      return JSON3;\\n\\t    });\\n\\t  }\\n\\t}).call(this);\\n\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))\\n\\n/***/ },\\n/* 12 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = function(module) {\\r\\n\\t\\tif(!module.webpackPolyfill) {\\r\\n\\t\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\t\\tmodule.paths = [];\\r\\n\\t\\t\\t// module.parent = undefined by default\\r\\n\\t\\t\\tmodule.children = [];\\r\\n\\t\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t\\t}\\r\\n\\t\\treturn module;\\r\\n\\t}\\r\\n\\n\\n/***/ },\\n/* 13 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Expose `Emitter`.\\n\\t */\\n\\n\\tmodule.exports = Emitter;\\n\\n\\t/**\\n\\t * Initialize a new `Emitter`.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Emitter(obj) {\\n\\t  if (obj) return mixin(obj);\\n\\t};\\n\\n\\t/**\\n\\t * Mixin the emitter properties.\\n\\t *\\n\\t * @param {Object} obj\\n\\t * @return {Object}\\n\\t * @api private\\n\\t */\\n\\n\\tfunction mixin(obj) {\\n\\t  for (var key in Emitter.prototype) {\\n\\t    obj[key] = Emitter.prototype[key];\\n\\t  }\\n\\t  return obj;\\n\\t}\\n\\n\\t/**\\n\\t * Listen on the given `event` with `fn`.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.on =\\n\\tEmitter.prototype.addEventListener = function(event, fn){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  (this._callbacks[event] = this._callbacks[event] || [])\\n\\t    .push(fn);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Adds an `event` listener that will be invoked a single\\n\\t * time then automatically removed.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.once = function(event, fn){\\n\\t  var self = this;\\n\\t  this._callbacks = this._callbacks || {};\\n\\n\\t  function on() {\\n\\t    self.off(event, on);\\n\\t    fn.apply(this, arguments);\\n\\t  }\\n\\n\\t  on.fn = fn;\\n\\t  this.on(event, on);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Remove the given callback for `event` or all\\n\\t * registered callbacks.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Function} fn\\n\\t * @return {Emitter}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.off =\\n\\tEmitter.prototype.removeListener =\\n\\tEmitter.prototype.removeAllListeners =\\n\\tEmitter.prototype.removeEventListener = function(event, fn){\\n\\t  this._callbacks = this._callbacks || {};\\n\\n\\t  // all\\n\\t  if (0 == arguments.length) {\\n\\t    this._callbacks = {};\\n\\t    return this;\\n\\t  }\\n\\n\\t  // specific event\\n\\t  var callbacks = this._callbacks[event];\\n\\t  if (!callbacks) return this;\\n\\n\\t  // remove all handlers\\n\\t  if (1 == arguments.length) {\\n\\t    delete this._callbacks[event];\\n\\t    return this;\\n\\t  }\\n\\n\\t  // remove specific handler\\n\\t  var cb;\\n\\t  for (var i = 0; i < callbacks.length; i++) {\\n\\t    cb = callbacks[i];\\n\\t    if (cb === fn || cb.fn === fn) {\\n\\t      callbacks.splice(i, 1);\\n\\t      break;\\n\\t    }\\n\\t  }\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Emit `event` with the given args.\\n\\t *\\n\\t * @param {String} event\\n\\t * @param {Mixed} ...\\n\\t * @return {Emitter}\\n\\t */\\n\\n\\tEmitter.prototype.emit = function(event){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  var args = [].slice.call(arguments, 1)\\n\\t    , callbacks = this._callbacks[event];\\n\\n\\t  if (callbacks) {\\n\\t    callbacks = callbacks.slice(0);\\n\\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\\n\\t      callbacks[i].apply(this, args);\\n\\t    }\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Return array of callbacks for `event`.\\n\\t *\\n\\t * @param {String} event\\n\\t * @return {Array}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.listeners = function(event){\\n\\t  this._callbacks = this._callbacks || {};\\n\\t  return this._callbacks[event] || [];\\n\\t};\\n\\n\\t/**\\n\\t * Check if this emitter has `event` handlers.\\n\\t *\\n\\t * @param {String} event\\n\\t * @return {Boolean}\\n\\t * @api public\\n\\t */\\n\\n\\tEmitter.prototype.hasListeners = function(event){\\n\\t  return !! this.listeners(event).length;\\n\\t};\\n\\n\\n/***/ },\\n/* 14 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/\\n\\n\\t/**\\n\\t * Module requirements\\n\\t */\\n\\n\\tvar isArray = __webpack_require__(15);\\n\\tvar isBuf = __webpack_require__(16);\\n\\n\\t/**\\n\\t * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\\n\\t * Anything with blobs or files should be fed through removeBlobs before coming\\n\\t * here.\\n\\t *\\n\\t * @param {Object} packet - socket.io event packet\\n\\t * @return {Object} with deconstructed packet and list of buffers\\n\\t * @api public\\n\\t */\\n\\n\\texports.deconstructPacket = function(packet){\\n\\t  var buffers = [];\\n\\t  var packetData = packet.data;\\n\\n\\t  function _deconstructPacket(data) {\\n\\t    if (!data) return data;\\n\\n\\t    if (isBuf(data)) {\\n\\t      var placeholder = { _placeholder: true, num: buffers.length };\\n\\t      buffers.push(data);\\n\\t      return placeholder;\\n\\t    } else if (isArray(data)) {\\n\\t      var newData = new Array(data.length);\\n\\t      for (var i = 0; i < data.length; i++) {\\n\\t        newData[i] = _deconstructPacket(data[i]);\\n\\t      }\\n\\t      return newData;\\n\\t    } else if ('object' == typeof data && !(data instanceof Date)) {\\n\\t      var newData = {};\\n\\t      for (var key in data) {\\n\\t        newData[key] = _deconstructPacket(data[key]);\\n\\t      }\\n\\t      return newData;\\n\\t    }\\n\\t    return data;\\n\\t  }\\n\\n\\t  var pack = packet;\\n\\t  pack.data = _deconstructPacket(packetData);\\n\\t  pack.attachments = buffers.length; // number of binary 'attachments'\\n\\t  return {packet: pack, buffers: buffers};\\n\\t};\\n\\n\\t/**\\n\\t * Reconstructs a binary packet from its placeholder packet and buffers\\n\\t *\\n\\t * @param {Object} packet - event packet with placeholders\\n\\t * @param {Array} buffers - binary buffers to put in placeholder positions\\n\\t * @return {Object} reconstructed packet\\n\\t * @api public\\n\\t */\\n\\n\\texports.reconstructPacket = function(packet, buffers) {\\n\\t  var curPlaceHolder = 0;\\n\\n\\t  function _reconstructPacket(data) {\\n\\t    if (data && data._placeholder) {\\n\\t      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\\n\\t      return buf;\\n\\t    } else if (isArray(data)) {\\n\\t      for (var i = 0; i < data.length; i++) {\\n\\t        data[i] = _reconstructPacket(data[i]);\\n\\t      }\\n\\t      return data;\\n\\t    } else if (data && 'object' == typeof data) {\\n\\t      for (var key in data) {\\n\\t        data[key] = _reconstructPacket(data[key]);\\n\\t      }\\n\\t      return data;\\n\\t    }\\n\\t    return data;\\n\\t  }\\n\\n\\t  packet.data = _reconstructPacket(packet.data);\\n\\t  packet.attachments = undefined; // no longer useful\\n\\t  return packet;\\n\\t};\\n\\n\\t/**\\n\\t * Asynchronously removes Blobs or Files from data via\\n\\t * FileReader's readAsArrayBuffer method. Used before encoding\\n\\t * data as msgpack. Calls callback with the blobless data.\\n\\t *\\n\\t * @param {Object} data\\n\\t * @param {Function} callback\\n\\t * @api private\\n\\t */\\n\\n\\texports.removeBlobs = function(data, callback) {\\n\\t  function _removeBlobs(obj, curKey, containingObject) {\\n\\t    if (!obj) return obj;\\n\\n\\t    // convert any blob\\n\\t    if ((global.Blob && obj instanceof Blob) ||\\n\\t        (global.File && obj instanceof File)) {\\n\\t      pendingBlobs++;\\n\\n\\t      // async filereader\\n\\t      var fileReader = new FileReader();\\n\\t      fileReader.onload = function() { // this.result == arraybuffer\\n\\t        if (containingObject) {\\n\\t          containingObject[curKey] = this.result;\\n\\t        }\\n\\t        else {\\n\\t          bloblessData = this.result;\\n\\t        }\\n\\n\\t        // if nothing pending its callback time\\n\\t        if(! --pendingBlobs) {\\n\\t          callback(bloblessData);\\n\\t        }\\n\\t      };\\n\\n\\t      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\\n\\t    } else if (isArray(obj)) { // handle array\\n\\t      for (var i = 0; i < obj.length; i++) {\\n\\t        _removeBlobs(obj[i], i, obj);\\n\\t      }\\n\\t    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\\n\\t      for (var key in obj) {\\n\\t        _removeBlobs(obj[key], key, obj);\\n\\t      }\\n\\t    }\\n\\t  }\\n\\n\\t  var pendingBlobs = 0;\\n\\t  var bloblessData = data;\\n\\t  _removeBlobs(bloblessData);\\n\\t  if (!pendingBlobs) {\\n\\t    callback(bloblessData);\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 15 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = Array.isArray || function (arr) {\\n\\t  return Object.prototype.toString.call(arr) == '[object Array]';\\n\\t};\\n\\n\\n/***/ },\\n/* 16 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\tmodule.exports = isBuf;\\n\\n\\t/**\\n\\t * Returns true if obj is a buffer or an arraybuffer.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tfunction isBuf(obj) {\\n\\t  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\\n\\t         (global.ArrayBuffer && obj instanceof ArrayBuffer);\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 17 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\tvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar eio = __webpack_require__(18);\\n\\tvar Socket = __webpack_require__(44);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar parser = __webpack_require__(7);\\n\\tvar on = __webpack_require__(46);\\n\\tvar bind = __webpack_require__(47);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:manager');\\n\\tvar indexOf = __webpack_require__(42);\\n\\tvar Backoff = __webpack_require__(48);\\n\\n\\t/**\\n\\t * IE6+ hasOwnProperty\\n\\t */\\n\\n\\tvar has = Object.prototype.hasOwnProperty;\\n\\n\\t/**\\n\\t * Module exports\\n\\t */\\n\\n\\tmodule.exports = Manager;\\n\\n\\t/**\\n\\t * `Manager` constructor.\\n\\t *\\n\\t * @param {String} engine instance or engine uri/opts\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Manager(uri, opts) {\\n\\t  if (!(this instanceof Manager)) return new Manager(uri, opts);\\n\\t  if (uri && 'object' === (typeof uri === 'undefined' ? 'undefined' : _typeof(uri))) {\\n\\t    opts = uri;\\n\\t    uri = undefined;\\n\\t  }\\n\\t  opts = opts || {};\\n\\n\\t  opts.path = opts.path || '/socket.io';\\n\\t  this.nsps = {};\\n\\t  this.subs = [];\\n\\t  this.opts = opts;\\n\\t  this.reconnection(opts.reconnection !== false);\\n\\t  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\\n\\t  this.reconnectionDelay(opts.reconnectionDelay || 1000);\\n\\t  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\\n\\t  this.randomizationFactor(opts.randomizationFactor || 0.5);\\n\\t  this.backoff = new Backoff({\\n\\t    min: this.reconnectionDelay(),\\n\\t    max: this.reconnectionDelayMax(),\\n\\t    jitter: this.randomizationFactor()\\n\\t  });\\n\\t  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\\n\\t  this.readyState = 'closed';\\n\\t  this.uri = uri;\\n\\t  this.connecting = [];\\n\\t  this.lastPing = null;\\n\\t  this.encoding = false;\\n\\t  this.packetBuffer = [];\\n\\t  this.encoder = new parser.Encoder();\\n\\t  this.decoder = new parser.Decoder();\\n\\t  this.autoConnect = opts.autoConnect !== false;\\n\\t  if (this.autoConnect) this.open();\\n\\t}\\n\\n\\t/**\\n\\t * Propagate given event to sockets and emit on `this`\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.emitAll = function () {\\n\\t  this.emit.apply(this, arguments);\\n\\t  for (var nsp in this.nsps) {\\n\\t    if (has.call(this.nsps, nsp)) {\\n\\t      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Update `socket.id` of all sockets\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.updateSocketIds = function () {\\n\\t  for (var nsp in this.nsps) {\\n\\t    if (has.call(this.nsps, nsp)) {\\n\\t      this.nsps[nsp].id = this.engine.id;\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Manager.prototype);\\n\\n\\t/**\\n\\t * Sets the `reconnection` config.\\n\\t *\\n\\t * @param {Boolean} true/false if it should automatically reconnect\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnection = function (v) {\\n\\t  if (!arguments.length) return this._reconnection;\\n\\t  this._reconnection = !!v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the reconnection attempts config.\\n\\t *\\n\\t * @param {Number} max reconnection attempts before giving up\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionAttempts = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionAttempts;\\n\\t  this._reconnectionAttempts = v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the delay between reconnections.\\n\\t *\\n\\t * @param {Number} delay\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionDelay = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionDelay;\\n\\t  this._reconnectionDelay = v;\\n\\t  this.backoff && this.backoff.setMin(v);\\n\\t  return this;\\n\\t};\\n\\n\\tManager.prototype.randomizationFactor = function (v) {\\n\\t  if (!arguments.length) return this._randomizationFactor;\\n\\t  this._randomizationFactor = v;\\n\\t  this.backoff && this.backoff.setJitter(v);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the maximum delay between reconnections.\\n\\t *\\n\\t * @param {Number} delay\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.reconnectionDelayMax = function (v) {\\n\\t  if (!arguments.length) return this._reconnectionDelayMax;\\n\\t  this._reconnectionDelayMax = v;\\n\\t  this.backoff && this.backoff.setMax(v);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the connection timeout. `false` to disable\\n\\t *\\n\\t * @return {Manager} self or value\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.timeout = function (v) {\\n\\t  if (!arguments.length) return this._timeout;\\n\\t  this._timeout = v;\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Starts trying to reconnect if reconnection is enabled and we have not\\n\\t * started reconnecting yet\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.maybeReconnectOnOpen = function () {\\n\\t  // Only try to reconnect if it's the first time we're connecting\\n\\t  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\\n\\t    // keeps reconnection from firing twice for the same reconnection loop\\n\\t    this.reconnect();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Sets the current transport `socket`.\\n\\t *\\n\\t * @param {Function} optional, callback\\n\\t * @return {Manager} self\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.open = Manager.prototype.connect = function (fn, opts) {\\n\\t  debug('readyState %s', this.readyState);\\n\\t  if (~this.readyState.indexOf('open')) return this;\\n\\n\\t  debug('opening %s', this.uri);\\n\\t  this.engine = eio(this.uri, this.opts);\\n\\t  var socket = this.engine;\\n\\t  var self = this;\\n\\t  this.readyState = 'opening';\\n\\t  this.skipReconnect = false;\\n\\n\\t  // emit `open`\\n\\t  var openSub = on(socket, 'open', function () {\\n\\t    self.onopen();\\n\\t    fn && fn();\\n\\t  });\\n\\n\\t  // emit `connect_error`\\n\\t  var errorSub = on(socket, 'error', function (data) {\\n\\t    debug('connect_error');\\n\\t    self.cleanup();\\n\\t    self.readyState = 'closed';\\n\\t    self.emitAll('connect_error', data);\\n\\t    if (fn) {\\n\\t      var err = new Error('Connection error');\\n\\t      err.data = data;\\n\\t      fn(err);\\n\\t    } else {\\n\\t      // Only do this if there is no fn to handle the error\\n\\t      self.maybeReconnectOnOpen();\\n\\t    }\\n\\t  });\\n\\n\\t  // emit `connect_timeout`\\n\\t  if (false !== this._timeout) {\\n\\t    var timeout = this._timeout;\\n\\t    debug('connect attempt will timeout after %d', timeout);\\n\\n\\t    // set timer\\n\\t    var timer = setTimeout(function () {\\n\\t      debug('connect attempt timed out after %d', timeout);\\n\\t      openSub.destroy();\\n\\t      socket.close();\\n\\t      socket.emit('error', 'timeout');\\n\\t      self.emitAll('connect_timeout', timeout);\\n\\t    }, timeout);\\n\\n\\t    this.subs.push({\\n\\t      destroy: function destroy() {\\n\\t        clearTimeout(timer);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  this.subs.push(openSub);\\n\\t  this.subs.push(errorSub);\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport open.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onopen = function () {\\n\\t  debug('open');\\n\\n\\t  // clear old subs\\n\\t  this.cleanup();\\n\\n\\t  // mark as open\\n\\t  this.readyState = 'open';\\n\\t  this.emit('open');\\n\\n\\t  // add new subs\\n\\t  var socket = this.engine;\\n\\t  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\\n\\t  this.subs.push(on(socket, 'ping', bind(this, 'onping')));\\n\\t  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));\\n\\t  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\\n\\t  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\\n\\t  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a ping.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onping = function () {\\n\\t  this.lastPing = new Date();\\n\\t  this.emitAll('ping');\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onpong = function () {\\n\\t  this.emitAll('pong', new Date() - this.lastPing);\\n\\t};\\n\\n\\t/**\\n\\t * Called with data.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.ondata = function (data) {\\n\\t  this.decoder.add(data);\\n\\t};\\n\\n\\t/**\\n\\t * Called when parser fully decodes a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.ondecoded = function (packet) {\\n\\t  this.emit('packet', packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon socket error.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onerror = function (err) {\\n\\t  debug('error', err);\\n\\t  this.emitAll('error', err);\\n\\t};\\n\\n\\t/**\\n\\t * Creates a new socket for the given `nsp`.\\n\\t *\\n\\t * @return {Socket}\\n\\t * @api public\\n\\t */\\n\\n\\tManager.prototype.socket = function (nsp, opts) {\\n\\t  var socket = this.nsps[nsp];\\n\\t  if (!socket) {\\n\\t    socket = new Socket(this, nsp, opts);\\n\\t    this.nsps[nsp] = socket;\\n\\t    var self = this;\\n\\t    socket.on('connecting', onConnecting);\\n\\t    socket.on('connect', function () {\\n\\t      socket.id = self.engine.id;\\n\\t    });\\n\\n\\t    if (this.autoConnect) {\\n\\t      // manually call here since connecting evnet is fired before listening\\n\\t      onConnecting();\\n\\t    }\\n\\t  }\\n\\n\\t  function onConnecting() {\\n\\t    if (!~indexOf(self.connecting, socket)) {\\n\\t      self.connecting.push(socket);\\n\\t    }\\n\\t  }\\n\\n\\t  return socket;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a socket close.\\n\\t *\\n\\t * @param {Socket} socket\\n\\t */\\n\\n\\tManager.prototype.destroy = function (socket) {\\n\\t  var index = indexOf(this.connecting, socket);\\n\\t  if (~index) this.connecting.splice(index, 1);\\n\\t  if (this.connecting.length) return;\\n\\n\\t  this.close();\\n\\t};\\n\\n\\t/**\\n\\t * Writes a packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.packet = function (packet) {\\n\\t  debug('writing packet %j', packet);\\n\\t  var self = this;\\n\\t  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;\\n\\n\\t  if (!self.encoding) {\\n\\t    // encode, then write to engine with result\\n\\t    self.encoding = true;\\n\\t    this.encoder.encode(packet, function (encodedPackets) {\\n\\t      for (var i = 0; i < encodedPackets.length; i++) {\\n\\t        self.engine.write(encodedPackets[i], packet.options);\\n\\t      }\\n\\t      self.encoding = false;\\n\\t      self.processPacketQueue();\\n\\t    });\\n\\t  } else {\\n\\t    // add packet to the queue\\n\\t    self.packetBuffer.push(packet);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * If packet buffer is non-empty, begins encoding the\\n\\t * next packet in line.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.processPacketQueue = function () {\\n\\t  if (this.packetBuffer.length > 0 && !this.encoding) {\\n\\t    var pack = this.packetBuffer.shift();\\n\\t    this.packet(pack);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Clean up transport subscriptions and packet buffer.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.cleanup = function () {\\n\\t  debug('cleanup');\\n\\n\\t  var subsLength = this.subs.length;\\n\\t  for (var i = 0; i < subsLength; i++) {\\n\\t    var sub = this.subs.shift();\\n\\t    sub.destroy();\\n\\t  }\\n\\n\\t  this.packetBuffer = [];\\n\\t  this.encoding = false;\\n\\t  this.lastPing = null;\\n\\n\\t  this.decoder.destroy();\\n\\t};\\n\\n\\t/**\\n\\t * Close the current socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.close = Manager.prototype.disconnect = function () {\\n\\t  debug('disconnect');\\n\\t  this.skipReconnect = true;\\n\\t  this.reconnecting = false;\\n\\t  if ('opening' === this.readyState) {\\n\\t    // `onclose` will not fire because\\n\\t    // an open event never happened\\n\\t    this.cleanup();\\n\\t  }\\n\\t  this.backoff.reset();\\n\\t  this.readyState = 'closed';\\n\\t  if (this.engine) this.engine.close();\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onclose = function (reason) {\\n\\t  debug('onclose');\\n\\n\\t  this.cleanup();\\n\\t  this.backoff.reset();\\n\\t  this.readyState = 'closed';\\n\\t  this.emit('close', reason);\\n\\n\\t  if (this._reconnection && !this.skipReconnect) {\\n\\t    this.reconnect();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Attempt a reconnection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.reconnect = function () {\\n\\t  if (this.reconnecting || this.skipReconnect) return this;\\n\\n\\t  var self = this;\\n\\n\\t  if (this.backoff.attempts >= this._reconnectionAttempts) {\\n\\t    debug('reconnect failed');\\n\\t    this.backoff.reset();\\n\\t    this.emitAll('reconnect_failed');\\n\\t    this.reconnecting = false;\\n\\t  } else {\\n\\t    var delay = this.backoff.duration();\\n\\t    debug('will wait %dms before reconnect attempt', delay);\\n\\n\\t    this.reconnecting = true;\\n\\t    var timer = setTimeout(function () {\\n\\t      if (self.skipReconnect) return;\\n\\n\\t      debug('attempting reconnect');\\n\\t      self.emitAll('reconnect_attempt', self.backoff.attempts);\\n\\t      self.emitAll('reconnecting', self.backoff.attempts);\\n\\n\\t      // check again for the case socket closed in above events\\n\\t      if (self.skipReconnect) return;\\n\\n\\t      self.open(function (err) {\\n\\t        if (err) {\\n\\t          debug('reconnect attempt error');\\n\\t          self.reconnecting = false;\\n\\t          self.reconnect();\\n\\t          self.emitAll('reconnect_error', err.data);\\n\\t        } else {\\n\\t          debug('reconnect success');\\n\\t          self.onreconnect();\\n\\t        }\\n\\t      });\\n\\t    }, delay);\\n\\n\\t    this.subs.push({\\n\\t      destroy: function destroy() {\\n\\t        clearTimeout(timer);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon successful reconnect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tManager.prototype.onreconnect = function () {\\n\\t  var attempt = this.backoff.attempts;\\n\\t  this.reconnecting = false;\\n\\t  this.backoff.reset();\\n\\t  this.updateSocketIds();\\n\\t  this.emitAll('reconnect', attempt);\\n\\t};\\n\\n/***/ },\\n/* 18 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\tmodule.exports = __webpack_require__(19);\\n\\n\\n/***/ },\\n/* 19 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\n\\tmodule.exports = __webpack_require__(20);\\n\\n\\t/**\\n\\t * Exports parser\\n\\t *\\n\\t * @api public\\n\\t *\\n\\t */\\n\\tmodule.exports.parser = __webpack_require__(27);\\n\\n\\n/***/ },\\n/* 20 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar transports = __webpack_require__(21);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:socket');\\n\\tvar index = __webpack_require__(42);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar parseuri = __webpack_require__(2);\\n\\tvar parsejson = __webpack_require__(43);\\n\\tvar parseqs = __webpack_require__(36);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Socket;\\n\\n\\t/**\\n\\t * Socket constructor.\\n\\t *\\n\\t * @param {String|Object} uri or options\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Socket (uri, opts) {\\n\\t  if (!(this instanceof Socket)) return new Socket(uri, opts);\\n\\n\\t  opts = opts || {};\\n\\n\\t  if (uri && 'object' === typeof uri) {\\n\\t    opts = uri;\\n\\t    uri = null;\\n\\t  }\\n\\n\\t  if (uri) {\\n\\t    uri = parseuri(uri);\\n\\t    opts.hostname = uri.host;\\n\\t    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\\n\\t    opts.port = uri.port;\\n\\t    if (uri.query) opts.query = uri.query;\\n\\t  } else if (opts.host) {\\n\\t    opts.hostname = parseuri(opts.host).host;\\n\\t  }\\n\\n\\t  this.secure = null != opts.secure ? opts.secure\\n\\t    : (global.location && 'https:' === location.protocol);\\n\\n\\t  if (opts.hostname && !opts.port) {\\n\\t    // if no port is specified manually, use the protocol default\\n\\t    opts.port = this.secure ? '443' : '80';\\n\\t  }\\n\\n\\t  this.agent = opts.agent || false;\\n\\t  this.hostname = opts.hostname ||\\n\\t    (global.location ? location.hostname : 'localhost');\\n\\t  this.port = opts.port || (global.location && location.port\\n\\t      ? location.port\\n\\t      : (this.secure ? 443 : 80));\\n\\t  this.query = opts.query || {};\\n\\t  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\\n\\t  this.upgrade = false !== opts.upgrade;\\n\\t  this.path = (opts.path || '/engine.io').replace(/\\\\/$/, '') + '/';\\n\\t  this.forceJSONP = !!opts.forceJSONP;\\n\\t  this.jsonp = false !== opts.jsonp;\\n\\t  this.forceBase64 = !!opts.forceBase64;\\n\\t  this.enablesXDR = !!opts.enablesXDR;\\n\\t  this.timestampParam = opts.timestampParam || 't';\\n\\t  this.timestampRequests = opts.timestampRequests;\\n\\t  this.transports = opts.transports || ['polling', 'websocket'];\\n\\t  this.readyState = '';\\n\\t  this.writeBuffer = [];\\n\\t  this.prevBufferLen = 0;\\n\\t  this.policyPort = opts.policyPort || 843;\\n\\t  this.rememberUpgrade = opts.rememberUpgrade || false;\\n\\t  this.binaryType = null;\\n\\t  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\\n\\t  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\\n\\n\\t  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\\n\\t  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\\n\\t    this.perMessageDeflate.threshold = 1024;\\n\\t  }\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx || null;\\n\\t  this.key = opts.key || null;\\n\\t  this.passphrase = opts.passphrase || null;\\n\\t  this.cert = opts.cert || null;\\n\\t  this.ca = opts.ca || null;\\n\\t  this.ciphers = opts.ciphers || null;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\\n\\t  this.forceNode = !!opts.forceNode;\\n\\n\\t  // other options for Node.js client\\n\\t  var freeGlobal = typeof global === 'object' && global;\\n\\t  if (freeGlobal.global === freeGlobal) {\\n\\t    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\\n\\t      this.extraHeaders = opts.extraHeaders;\\n\\t    }\\n\\n\\t    if (opts.localAddress) {\\n\\t      this.localAddress = opts.localAddress;\\n\\t    }\\n\\t  }\\n\\n\\t  // set on handshake\\n\\t  this.id = null;\\n\\t  this.upgrades = null;\\n\\t  this.pingInterval = null;\\n\\t  this.pingTimeout = null;\\n\\n\\t  // set on heartbeat\\n\\t  this.pingIntervalTimer = null;\\n\\t  this.pingTimeoutTimer = null;\\n\\n\\t  this.open();\\n\\t}\\n\\n\\tSocket.priorWebsocketSuccess = false;\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Socket.prototype);\\n\\n\\t/**\\n\\t * Protocol version.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.protocol = parser.protocol; // this is an int\\n\\n\\t/**\\n\\t * Expose deps for legacy compatibility\\n\\t * and standalone browser access.\\n\\t */\\n\\n\\tSocket.Socket = Socket;\\n\\tSocket.Transport = __webpack_require__(26);\\n\\tSocket.transports = __webpack_require__(21);\\n\\tSocket.parser = __webpack_require__(27);\\n\\n\\t/**\\n\\t * Creates transport of the given type.\\n\\t *\\n\\t * @param {String} transport name\\n\\t * @return {Transport}\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.createTransport = function (name) {\\n\\t  debug('creating transport \\\"%s\\\"', name);\\n\\t  var query = clone(this.query);\\n\\n\\t  // append engine.io protocol identifier\\n\\t  query.EIO = parser.protocol;\\n\\n\\t  // transport name\\n\\t  query.transport = name;\\n\\n\\t  // session id if we already have one\\n\\t  if (this.id) query.sid = this.id;\\n\\n\\t  var transport = new transports[name]({\\n\\t    agent: this.agent,\\n\\t    hostname: this.hostname,\\n\\t    port: this.port,\\n\\t    secure: this.secure,\\n\\t    path: this.path,\\n\\t    query: query,\\n\\t    forceJSONP: this.forceJSONP,\\n\\t    jsonp: this.jsonp,\\n\\t    forceBase64: this.forceBase64,\\n\\t    enablesXDR: this.enablesXDR,\\n\\t    timestampRequests: this.timestampRequests,\\n\\t    timestampParam: this.timestampParam,\\n\\t    policyPort: this.policyPort,\\n\\t    socket: this,\\n\\t    pfx: this.pfx,\\n\\t    key: this.key,\\n\\t    passphrase: this.passphrase,\\n\\t    cert: this.cert,\\n\\t    ca: this.ca,\\n\\t    ciphers: this.ciphers,\\n\\t    rejectUnauthorized: this.rejectUnauthorized,\\n\\t    perMessageDeflate: this.perMessageDeflate,\\n\\t    extraHeaders: this.extraHeaders,\\n\\t    forceNode: this.forceNode,\\n\\t    localAddress: this.localAddress\\n\\t  });\\n\\n\\t  return transport;\\n\\t};\\n\\n\\tfunction clone (obj) {\\n\\t  var o = {};\\n\\t  for (var i in obj) {\\n\\t    if (obj.hasOwnProperty(i)) {\\n\\t      o[i] = obj[i];\\n\\t    }\\n\\t  }\\n\\t  return o;\\n\\t}\\n\\n\\t/**\\n\\t * Initializes transport to use and starts probe.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\tSocket.prototype.open = function () {\\n\\t  var transport;\\n\\t  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\\n\\t    transport = 'websocket';\\n\\t  } else if (0 === this.transports.length) {\\n\\t    // Emit error on next tick so it can be listened to\\n\\t    var self = this;\\n\\t    setTimeout(function () {\\n\\t      self.emit('error', 'No transports available');\\n\\t    }, 0);\\n\\t    return;\\n\\t  } else {\\n\\t    transport = this.transports[0];\\n\\t  }\\n\\t  this.readyState = 'opening';\\n\\n\\t  // Retry with the next transport if the transport is disabled (jsonp: false)\\n\\t  try {\\n\\t    transport = this.createTransport(transport);\\n\\t  } catch (e) {\\n\\t    this.transports.shift();\\n\\t    this.open();\\n\\t    return;\\n\\t  }\\n\\n\\t  transport.open();\\n\\t  this.setTransport(transport);\\n\\t};\\n\\n\\t/**\\n\\t * Sets the current transport. Disables the existing one (if any).\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.setTransport = function (transport) {\\n\\t  debug('setting transport %s', transport.name);\\n\\t  var self = this;\\n\\n\\t  if (this.transport) {\\n\\t    debug('clearing existing transport %s', this.transport.name);\\n\\t    this.transport.removeAllListeners();\\n\\t  }\\n\\n\\t  // set up transport\\n\\t  this.transport = transport;\\n\\n\\t  // set up transport listeners\\n\\t  transport\\n\\t  .on('drain', function () {\\n\\t    self.onDrain();\\n\\t  })\\n\\t  .on('packet', function (packet) {\\n\\t    self.onPacket(packet);\\n\\t  })\\n\\t  .on('error', function (e) {\\n\\t    self.onError(e);\\n\\t  })\\n\\t  .on('close', function () {\\n\\t    self.onClose('transport close');\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Probes a transport.\\n\\t *\\n\\t * @param {String} transport name\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.probe = function (name) {\\n\\t  debug('probing transport \\\"%s\\\"', name);\\n\\t  var transport = this.createTransport(name, { probe: 1 });\\n\\t  var failed = false;\\n\\t  var self = this;\\n\\n\\t  Socket.priorWebsocketSuccess = false;\\n\\n\\t  function onTransportOpen () {\\n\\t    if (self.onlyBinaryUpgrades) {\\n\\t      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\\n\\t      failed = failed || upgradeLosesBinary;\\n\\t    }\\n\\t    if (failed) return;\\n\\n\\t    debug('probe transport \\\"%s\\\" opened', name);\\n\\t    transport.send([{ type: 'ping', data: 'probe' }]);\\n\\t    transport.once('packet', function (msg) {\\n\\t      if (failed) return;\\n\\t      if ('pong' === msg.type && 'probe' === msg.data) {\\n\\t        debug('probe transport \\\"%s\\\" pong', name);\\n\\t        self.upgrading = true;\\n\\t        self.emit('upgrading', transport);\\n\\t        if (!transport) return;\\n\\t        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\\n\\n\\t        debug('pausing current transport \\\"%s\\\"', self.transport.name);\\n\\t        self.transport.pause(function () {\\n\\t          if (failed) return;\\n\\t          if ('closed' === self.readyState) return;\\n\\t          debug('changing transport and sending upgrade packet');\\n\\n\\t          cleanup();\\n\\n\\t          self.setTransport(transport);\\n\\t          transport.send([{ type: 'upgrade' }]);\\n\\t          self.emit('upgrade', transport);\\n\\t          transport = null;\\n\\t          self.upgrading = false;\\n\\t          self.flush();\\n\\t        });\\n\\t      } else {\\n\\t        debug('probe transport \\\"%s\\\" failed', name);\\n\\t        var err = new Error('probe error');\\n\\t        err.transport = transport.name;\\n\\t        self.emit('upgradeError', err);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  function freezeTransport () {\\n\\t    if (failed) return;\\n\\n\\t    // Any callback called by transport should be ignored since now\\n\\t    failed = true;\\n\\n\\t    cleanup();\\n\\n\\t    transport.close();\\n\\t    transport = null;\\n\\t  }\\n\\n\\t  // Handle any error that happens while probing\\n\\t  function onerror (err) {\\n\\t    var error = new Error('probe error: ' + err);\\n\\t    error.transport = transport.name;\\n\\n\\t    freezeTransport();\\n\\n\\t    debug('probe transport \\\"%s\\\" failed because of error: %s', name, err);\\n\\n\\t    self.emit('upgradeError', error);\\n\\t  }\\n\\n\\t  function onTransportClose () {\\n\\t    onerror('transport closed');\\n\\t  }\\n\\n\\t  // When the socket is closed while we're probing\\n\\t  function onclose () {\\n\\t    onerror('socket closed');\\n\\t  }\\n\\n\\t  // When the socket is upgraded while we're probing\\n\\t  function onupgrade (to) {\\n\\t    if (transport && to.name !== transport.name) {\\n\\t      debug('\\\"%s\\\" works - aborting \\\"%s\\\"', to.name, transport.name);\\n\\t      freezeTransport();\\n\\t    }\\n\\t  }\\n\\n\\t  // Remove all listeners on the transport and on self\\n\\t  function cleanup () {\\n\\t    transport.removeListener('open', onTransportOpen);\\n\\t    transport.removeListener('error', onerror);\\n\\t    transport.removeListener('close', onTransportClose);\\n\\t    self.removeListener('close', onclose);\\n\\t    self.removeListener('upgrading', onupgrade);\\n\\t  }\\n\\n\\t  transport.once('open', onTransportOpen);\\n\\t  transport.once('error', onerror);\\n\\t  transport.once('close', onTransportClose);\\n\\n\\t  this.once('close', onclose);\\n\\t  this.once('upgrading', onupgrade);\\n\\n\\t  transport.open();\\n\\t};\\n\\n\\t/**\\n\\t * Called when connection is deemed open.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.onOpen = function () {\\n\\t  debug('socket open');\\n\\t  this.readyState = 'open';\\n\\t  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\\n\\t  this.emit('open');\\n\\t  this.flush();\\n\\n\\t  // we check for `readyState` in case an `open`\\n\\t  // listener already closed the socket\\n\\t  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\\n\\t    debug('starting upgrade probes');\\n\\t    for (var i = 0, l = this.upgrades.length; i < l; i++) {\\n\\t      this.probe(this.upgrades[i]);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Handles a packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onPacket = function (packet) {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState ||\\n\\t      'closing' === this.readyState) {\\n\\t    debug('socket receive: type \\\"%s\\\", data \\\"%s\\\"', packet.type, packet.data);\\n\\n\\t    this.emit('packet', packet);\\n\\n\\t    // Socket is live - any packet counts\\n\\t    this.emit('heartbeat');\\n\\n\\t    switch (packet.type) {\\n\\t      case 'open':\\n\\t        this.onHandshake(parsejson(packet.data));\\n\\t        break;\\n\\n\\t      case 'pong':\\n\\t        this.setPing();\\n\\t        this.emit('pong');\\n\\t        break;\\n\\n\\t      case 'error':\\n\\t        var err = new Error('server error');\\n\\t        err.code = packet.data;\\n\\t        this.onError(err);\\n\\t        break;\\n\\n\\t      case 'message':\\n\\t        this.emit('data', packet.data);\\n\\t        this.emit('message', packet.data);\\n\\t        break;\\n\\t    }\\n\\t  } else {\\n\\t    debug('packet received with socket readyState \\\"%s\\\"', this.readyState);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon handshake completion.\\n\\t *\\n\\t * @param {Object} handshake obj\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onHandshake = function (data) {\\n\\t  this.emit('handshake', data);\\n\\t  this.id = data.sid;\\n\\t  this.transport.query.sid = data.sid;\\n\\t  this.upgrades = this.filterUpgrades(data.upgrades);\\n\\t  this.pingInterval = data.pingInterval;\\n\\t  this.pingTimeout = data.pingTimeout;\\n\\t  this.onOpen();\\n\\t  // In case open handler closes socket\\n\\t  if ('closed' === this.readyState) return;\\n\\t  this.setPing();\\n\\n\\t  // Prolong liveness of socket on heartbeat\\n\\t  this.removeListener('heartbeat', this.onHeartbeat);\\n\\t  this.on('heartbeat', this.onHeartbeat);\\n\\t};\\n\\n\\t/**\\n\\t * Resets ping timeout.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onHeartbeat = function (timeout) {\\n\\t  clearTimeout(this.pingTimeoutTimer);\\n\\t  var self = this;\\n\\t  self.pingTimeoutTimer = setTimeout(function () {\\n\\t    if ('closed' === self.readyState) return;\\n\\t    self.onClose('ping timeout');\\n\\t  }, timeout || (self.pingInterval + self.pingTimeout));\\n\\t};\\n\\n\\t/**\\n\\t * Pings server every `this.pingInterval` and expects response\\n\\t * within `this.pingTimeout` or closes connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.setPing = function () {\\n\\t  var self = this;\\n\\t  clearTimeout(self.pingIntervalTimer);\\n\\t  self.pingIntervalTimer = setTimeout(function () {\\n\\t    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\\n\\t    self.ping();\\n\\t    self.onHeartbeat(self.pingTimeout);\\n\\t  }, self.pingInterval);\\n\\t};\\n\\n\\t/**\\n\\t* Sends a ping packet.\\n\\t*\\n\\t* @api private\\n\\t*/\\n\\n\\tSocket.prototype.ping = function () {\\n\\t  var self = this;\\n\\t  this.sendPacket('ping', function () {\\n\\t    self.emit('ping');\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Called on `drain` event\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onDrain = function () {\\n\\t  this.writeBuffer.splice(0, this.prevBufferLen);\\n\\n\\t  // setting prevBufferLen = 0 is very important\\n\\t  // for example, when upgrading, upgrade packet is sent over,\\n\\t  // and a nonzero prevBufferLen could cause problems on `drain`\\n\\t  this.prevBufferLen = 0;\\n\\n\\t  if (0 === this.writeBuffer.length) {\\n\\t    this.emit('drain');\\n\\t  } else {\\n\\t    this.flush();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Flush write buffers.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.flush = function () {\\n\\t  if ('closed' !== this.readyState && this.transport.writable &&\\n\\t    !this.upgrading && this.writeBuffer.length) {\\n\\t    debug('flushing %d packets in socket', this.writeBuffer.length);\\n\\t    this.transport.send(this.writeBuffer);\\n\\t    // keep track of current length of writeBuffer\\n\\t    // splice writeBuffer and callbackBuffer on `drain`\\n\\t    this.prevBufferLen = this.writeBuffer.length;\\n\\t    this.emit('flush');\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Sends a message.\\n\\t *\\n\\t * @param {String} message.\\n\\t * @param {Function} callback function.\\n\\t * @param {Object} options.\\n\\t * @return {Socket} for chaining.\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.write =\\n\\tSocket.prototype.send = function (msg, options, fn) {\\n\\t  this.sendPacket('message', msg, options, fn);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a packet.\\n\\t *\\n\\t * @param {String} packet type.\\n\\t * @param {String} data.\\n\\t * @param {Object} options.\\n\\t * @param {Function} callback function.\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.sendPacket = function (type, data, options, fn) {\\n\\t  if ('function' === typeof data) {\\n\\t    fn = data;\\n\\t    data = undefined;\\n\\t  }\\n\\n\\t  if ('function' === typeof options) {\\n\\t    fn = options;\\n\\t    options = null;\\n\\t  }\\n\\n\\t  if ('closing' === this.readyState || 'closed' === this.readyState) {\\n\\t    return;\\n\\t  }\\n\\n\\t  options = options || {};\\n\\t  options.compress = false !== options.compress;\\n\\n\\t  var packet = {\\n\\t    type: type,\\n\\t    data: data,\\n\\t    options: options\\n\\t  };\\n\\t  this.emit('packetCreate', packet);\\n\\t  this.writeBuffer.push(packet);\\n\\t  if (fn) this.once('flush', fn);\\n\\t  this.flush();\\n\\t};\\n\\n\\t/**\\n\\t * Closes the connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.close = function () {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState) {\\n\\t    this.readyState = 'closing';\\n\\n\\t    var self = this;\\n\\n\\t    if (this.writeBuffer.length) {\\n\\t      this.once('drain', function () {\\n\\t        if (this.upgrading) {\\n\\t          waitForUpgrade();\\n\\t        } else {\\n\\t          close();\\n\\t        }\\n\\t      });\\n\\t    } else if (this.upgrading) {\\n\\t      waitForUpgrade();\\n\\t    } else {\\n\\t      close();\\n\\t    }\\n\\t  }\\n\\n\\t  function close () {\\n\\t    self.onClose('forced close');\\n\\t    debug('socket closing - telling transport to close');\\n\\t    self.transport.close();\\n\\t  }\\n\\n\\t  function cleanupAndClose () {\\n\\t    self.removeListener('upgrade', cleanupAndClose);\\n\\t    self.removeListener('upgradeError', cleanupAndClose);\\n\\t    close();\\n\\t  }\\n\\n\\t  function waitForUpgrade () {\\n\\t    // wait for upgrade to finish since we can't send packets while pausing a transport\\n\\t    self.once('upgrade', cleanupAndClose);\\n\\t    self.once('upgradeError', cleanupAndClose);\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport error\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onError = function (err) {\\n\\t  debug('socket error %j', err);\\n\\t  Socket.priorWebsocketSuccess = false;\\n\\t  this.emit('error', err);\\n\\t  this.onClose('transport error', err);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon transport close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onClose = function (reason, desc) {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\\n\\t    debug('socket close with reason: \\\"%s\\\"', reason);\\n\\t    var self = this;\\n\\n\\t    // clear timers\\n\\t    clearTimeout(this.pingIntervalTimer);\\n\\t    clearTimeout(this.pingTimeoutTimer);\\n\\n\\t    // stop event from firing again for transport\\n\\t    this.transport.removeAllListeners('close');\\n\\n\\t    // ensure transport won't stay open\\n\\t    this.transport.close();\\n\\n\\t    // ignore further transport communication\\n\\t    this.transport.removeAllListeners();\\n\\n\\t    // set ready state\\n\\t    this.readyState = 'closed';\\n\\n\\t    // clear session id\\n\\t    this.id = null;\\n\\n\\t    // emit close event\\n\\t    this.emit('close', reason, desc);\\n\\n\\t    // clean buffers after, so users can still\\n\\t    // grab the buffers on `close` event\\n\\t    self.writeBuffer = [];\\n\\t    self.prevBufferLen = 0;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Filters upgrades, returning only those matching client transports.\\n\\t *\\n\\t * @param {Array} server upgrades\\n\\t * @api private\\n\\t *\\n\\t */\\n\\n\\tSocket.prototype.filterUpgrades = function (upgrades) {\\n\\t  var filteredUpgrades = [];\\n\\t  for (var i = 0, j = upgrades.length; i < j; i++) {\\n\\t    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\\n\\t  }\\n\\t  return filteredUpgrades;\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 21 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies\\n\\t */\\n\\n\\tvar XMLHttpRequest = __webpack_require__(22);\\n\\tvar XHR = __webpack_require__(24);\\n\\tvar JSONP = __webpack_require__(39);\\n\\tvar websocket = __webpack_require__(40);\\n\\n\\t/**\\n\\t * Export transports.\\n\\t */\\n\\n\\texports.polling = polling;\\n\\texports.websocket = websocket;\\n\\n\\t/**\\n\\t * Polling transport polymorphic constructor.\\n\\t * Decides on xhr vs jsonp based on feature detection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tfunction polling (opts) {\\n\\t  var xhr;\\n\\t  var xd = false;\\n\\t  var xs = false;\\n\\t  var jsonp = false !== opts.jsonp;\\n\\n\\t  if (global.location) {\\n\\t    var isSSL = 'https:' === location.protocol;\\n\\t    var port = location.port;\\n\\n\\t    // some user agents have empty `location.port`\\n\\t    if (!port) {\\n\\t      port = isSSL ? 443 : 80;\\n\\t    }\\n\\n\\t    xd = opts.hostname !== location.hostname || port !== opts.port;\\n\\t    xs = opts.secure !== isSSL;\\n\\t  }\\n\\n\\t  opts.xdomain = xd;\\n\\t  opts.xscheme = xs;\\n\\t  xhr = new XMLHttpRequest(opts);\\n\\n\\t  if ('open' in xhr && !opts.forceJSONP) {\\n\\t    return new XHR(opts);\\n\\t  } else {\\n\\t    if (!jsonp) throw new Error('JSONP disabled');\\n\\t    return new JSONP(opts);\\n\\t  }\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 22 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module\\n\\n\\tvar hasCORS = __webpack_require__(23);\\n\\n\\tmodule.exports = function (opts) {\\n\\t  var xdomain = opts.xdomain;\\n\\n\\t  // scheme must be same when usign XDomainRequest\\n\\t  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\\n\\t  var xscheme = opts.xscheme;\\n\\n\\t  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\\n\\t  // https://github.com/Automattic/engine.io-client/pull/217\\n\\t  var enablesXDR = opts.enablesXDR;\\n\\n\\t  // XMLHttpRequest can be disabled on IE\\n\\t  try {\\n\\t    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\\n\\t      return new XMLHttpRequest();\\n\\t    }\\n\\t  } catch (e) { }\\n\\n\\t  // Use XDomainRequest for IE8 if enablesXDR is true\\n\\t  // because loading bar keeps flashing when using jsonp-polling\\n\\t  // https://github.com/yujiosaka/socke.io-ie8-loading-example\\n\\t  try {\\n\\t    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\\n\\t      return new XDomainRequest();\\n\\t    }\\n\\t  } catch (e) { }\\n\\n\\t  if (!xdomain) {\\n\\t    try {\\n\\t      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\\n\\t    } catch (e) { }\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 23 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Module exports.\\n\\t *\\n\\t * Logic borrowed from Modernizr:\\n\\t *\\n\\t *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\\n\\t */\\n\\n\\ttry {\\n\\t  module.exports = typeof XMLHttpRequest !== 'undefined' &&\\n\\t    'withCredentials' in new XMLHttpRequest();\\n\\t} catch (err) {\\n\\t  // if XMLHttp support is disabled in IE then it will throw\\n\\t  // when trying to create\\n\\t  module.exports = false;\\n\\t}\\n\\n\\n/***/ },\\n/* 24 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar XMLHttpRequest = __webpack_require__(22);\\n\\tvar Polling = __webpack_require__(25);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:polling-xhr');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = XHR;\\n\\tmodule.exports.Request = Request;\\n\\n\\t/**\\n\\t * Empty function\\n\\t */\\n\\n\\tfunction empty () {}\\n\\n\\t/**\\n\\t * XHR Polling constructor.\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api public\\n\\t */\\n\\n\\tfunction XHR (opts) {\\n\\t  Polling.call(this, opts);\\n\\t  this.requestTimeout = opts.requestTimeout;\\n\\n\\t  if (global.location) {\\n\\t    var isSSL = 'https:' === location.protocol;\\n\\t    var port = location.port;\\n\\n\\t    // some user agents have empty `location.port`\\n\\t    if (!port) {\\n\\t      port = isSSL ? 443 : 80;\\n\\t    }\\n\\n\\t    this.xd = opts.hostname !== global.location.hostname ||\\n\\t      port !== opts.port;\\n\\t    this.xs = opts.secure !== isSSL;\\n\\t  } else {\\n\\t    this.extraHeaders = opts.extraHeaders;\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Polling.\\n\\t */\\n\\n\\tinherit(XHR, Polling);\\n\\n\\t/**\\n\\t * XHR supports binary\\n\\t */\\n\\n\\tXHR.prototype.supportsBinary = true;\\n\\n\\t/**\\n\\t * Creates a request.\\n\\t *\\n\\t * @param {String} method\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.request = function (opts) {\\n\\t  opts = opts || {};\\n\\t  opts.uri = this.uri();\\n\\t  opts.xd = this.xd;\\n\\t  opts.xs = this.xs;\\n\\t  opts.agent = this.agent || false;\\n\\t  opts.supportsBinary = this.supportsBinary;\\n\\t  opts.enablesXDR = this.enablesXDR;\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\t  opts.requestTimeout = this.requestTimeout;\\n\\n\\t  // other options for Node.js client\\n\\t  opts.extraHeaders = this.extraHeaders;\\n\\n\\t  return new Request(opts);\\n\\t};\\n\\n\\t/**\\n\\t * Sends data.\\n\\t *\\n\\t * @param {String} data to send.\\n\\t * @param {Function} called upon flush.\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.doWrite = function (data, fn) {\\n\\t  var isBinary = typeof data !== 'string' && data !== undefined;\\n\\t  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\\n\\t  var self = this;\\n\\t  req.on('success', fn);\\n\\t  req.on('error', function (err) {\\n\\t    self.onError('xhr post error', err);\\n\\t  });\\n\\t  this.sendXhr = req;\\n\\t};\\n\\n\\t/**\\n\\t * Starts a poll cycle.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tXHR.prototype.doPoll = function () {\\n\\t  debug('xhr poll');\\n\\t  var req = this.request();\\n\\t  var self = this;\\n\\t  req.on('data', function (data) {\\n\\t    self.onData(data);\\n\\t  });\\n\\t  req.on('error', function (err) {\\n\\t    self.onError('xhr poll error', err);\\n\\t  });\\n\\t  this.pollXhr = req;\\n\\t};\\n\\n\\t/**\\n\\t * Request constructor\\n\\t *\\n\\t * @param {Object} options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Request (opts) {\\n\\t  this.method = opts.method || 'GET';\\n\\t  this.uri = opts.uri;\\n\\t  this.xd = !!opts.xd;\\n\\t  this.xs = !!opts.xs;\\n\\t  this.async = false !== opts.async;\\n\\t  this.data = undefined !== opts.data ? opts.data : null;\\n\\t  this.agent = opts.agent;\\n\\t  this.isBinary = opts.isBinary;\\n\\t  this.supportsBinary = opts.supportsBinary;\\n\\t  this.enablesXDR = opts.enablesXDR;\\n\\t  this.requestTimeout = opts.requestTimeout;\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx;\\n\\t  this.key = opts.key;\\n\\t  this.passphrase = opts.passphrase;\\n\\t  this.cert = opts.cert;\\n\\t  this.ca = opts.ca;\\n\\t  this.ciphers = opts.ciphers;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized;\\n\\n\\t  // other options for Node.js client\\n\\t  this.extraHeaders = opts.extraHeaders;\\n\\n\\t  this.create();\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Request.prototype);\\n\\n\\t/**\\n\\t * Creates the XHR object and sends the request.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.create = function () {\\n\\t  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\n\\t  var xhr = this.xhr = new XMLHttpRequest(opts);\\n\\t  var self = this;\\n\\n\\t  try {\\n\\t    debug('xhr open %s: %s', this.method, this.uri);\\n\\t    xhr.open(this.method, this.uri, this.async);\\n\\t    try {\\n\\t      if (this.extraHeaders) {\\n\\t        xhr.setDisableHeaderCheck(true);\\n\\t        for (var i in this.extraHeaders) {\\n\\t          if (this.extraHeaders.hasOwnProperty(i)) {\\n\\t            xhr.setRequestHeader(i, this.extraHeaders[i]);\\n\\t          }\\n\\t        }\\n\\t      }\\n\\t    } catch (e) {}\\n\\t    if (this.supportsBinary) {\\n\\t      // This has to be done after open because Firefox is stupid\\n\\t      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\\n\\t      xhr.responseType = 'arraybuffer';\\n\\t    }\\n\\n\\t    if ('POST' === this.method) {\\n\\t      try {\\n\\t        if (this.isBinary) {\\n\\t          xhr.setRequestHeader('Content-type', 'application/octet-stream');\\n\\t        } else {\\n\\t          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\\n\\t        }\\n\\t      } catch (e) {}\\n\\t    }\\n\\n\\t    try {\\n\\t      xhr.setRequestHeader('Accept', '*/*');\\n\\t    } catch (e) {}\\n\\n\\t    // ie6 check\\n\\t    if ('withCredentials' in xhr) {\\n\\t      xhr.withCredentials = true;\\n\\t    }\\n\\n\\t    if (this.requestTimeout) {\\n\\t      xhr.timeout = this.requestTimeout;\\n\\t    }\\n\\n\\t    if (this.hasXDR()) {\\n\\t      xhr.onload = function () {\\n\\t        self.onLoad();\\n\\t      };\\n\\t      xhr.onerror = function () {\\n\\t        self.onError(xhr.responseText);\\n\\t      };\\n\\t    } else {\\n\\t      xhr.onreadystatechange = function () {\\n\\t        if (4 !== xhr.readyState) return;\\n\\t        if (200 === xhr.status || 1223 === xhr.status) {\\n\\t          self.onLoad();\\n\\t        } else {\\n\\t          // make sure the `error` event handler that's user-set\\n\\t          // does not throw in the same tick and gets caught here\\n\\t          setTimeout(function () {\\n\\t            self.onError(xhr.status);\\n\\t          }, 0);\\n\\t        }\\n\\t      };\\n\\t    }\\n\\n\\t    debug('xhr data %s', this.data);\\n\\t    xhr.send(this.data);\\n\\t  } catch (e) {\\n\\t    // Need to defer since .create() is called directly fhrom the constructor\\n\\t    // and thus the 'error' event can only be only bound *after* this exception\\n\\t    // occurs.  Therefore, also, we cannot throw here at all.\\n\\t    setTimeout(function () {\\n\\t      self.onError(e);\\n\\t    }, 0);\\n\\t    return;\\n\\t  }\\n\\n\\t  if (global.document) {\\n\\t    this.index = Request.requestsCount++;\\n\\t    Request.requests[this.index] = this;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon successful response.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onSuccess = function () {\\n\\t  this.emit('success');\\n\\t  this.cleanup();\\n\\t};\\n\\n\\t/**\\n\\t * Called if we have data.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onData = function (data) {\\n\\t  this.emit('data', data);\\n\\t  this.onSuccess();\\n\\t};\\n\\n\\t/**\\n\\t * Called upon error.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onError = function (err) {\\n\\t  this.emit('error', err);\\n\\t  this.cleanup(true);\\n\\t};\\n\\n\\t/**\\n\\t * Cleans up house.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.cleanup = function (fromError) {\\n\\t  if ('undefined' === typeof this.xhr || null === this.xhr) {\\n\\t    return;\\n\\t  }\\n\\t  // xmlhttprequest\\n\\t  if (this.hasXDR()) {\\n\\t    this.xhr.onload = this.xhr.onerror = empty;\\n\\t  } else {\\n\\t    this.xhr.onreadystatechange = empty;\\n\\t  }\\n\\n\\t  if (fromError) {\\n\\t    try {\\n\\t      this.xhr.abort();\\n\\t    } catch (e) {}\\n\\t  }\\n\\n\\t  if (global.document) {\\n\\t    delete Request.requests[this.index];\\n\\t  }\\n\\n\\t  this.xhr = null;\\n\\t};\\n\\n\\t/**\\n\\t * Called upon load.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.onLoad = function () {\\n\\t  var data;\\n\\t  try {\\n\\t    var contentType;\\n\\t    try {\\n\\t      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\\n\\t    } catch (e) {}\\n\\t    if (contentType === 'application/octet-stream') {\\n\\t      data = this.xhr.response || this.xhr.responseText;\\n\\t    } else {\\n\\t      if (!this.supportsBinary) {\\n\\t        data = this.xhr.responseText;\\n\\t      } else {\\n\\t        try {\\n\\t          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\\n\\t        } catch (e) {\\n\\t          var ui8Arr = new Uint8Array(this.xhr.response);\\n\\t          var dataArray = [];\\n\\t          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\\n\\t            dataArray.push(ui8Arr[idx]);\\n\\t          }\\n\\n\\t          data = String.fromCharCode.apply(null, dataArray);\\n\\t        }\\n\\t      }\\n\\t    }\\n\\t  } catch (e) {\\n\\t    this.onError(e);\\n\\t  }\\n\\t  if (null != data) {\\n\\t    this.onData(data);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Check if it has XDomainRequest.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tRequest.prototype.hasXDR = function () {\\n\\t  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\\n\\t};\\n\\n\\t/**\\n\\t * Aborts the request.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tRequest.prototype.abort = function () {\\n\\t  this.cleanup();\\n\\t};\\n\\n\\t/**\\n\\t * Aborts pending requests when unloading the window. This is needed to prevent\\n\\t * memory leaks (e.g. when using IE) and to ensure that no spurious error is\\n\\t * emitted.\\n\\t */\\n\\n\\tRequest.requestsCount = 0;\\n\\tRequest.requests = {};\\n\\n\\tif (global.document) {\\n\\t  if (global.attachEvent) {\\n\\t    global.attachEvent('onunload', unloadHandler);\\n\\t  } else if (global.addEventListener) {\\n\\t    global.addEventListener('beforeunload', unloadHandler, false);\\n\\t  }\\n\\t}\\n\\n\\tfunction unloadHandler () {\\n\\t  for (var i in Request.requests) {\\n\\t    if (Request.requests.hasOwnProperty(i)) {\\n\\t      Request.requests[i].abort();\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 25 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar Transport = __webpack_require__(26);\\n\\tvar parseqs = __webpack_require__(36);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar yeast = __webpack_require__(38);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:polling');\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Polling;\\n\\n\\t/**\\n\\t * Is XHR2 supported?\\n\\t */\\n\\n\\tvar hasXHR2 = (function () {\\n\\t  var XMLHttpRequest = __webpack_require__(22);\\n\\t  var xhr = new XMLHttpRequest({ xdomain: false });\\n\\t  return null != xhr.responseType;\\n\\t})();\\n\\n\\t/**\\n\\t * Polling interface.\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api private\\n\\t */\\n\\n\\tfunction Polling (opts) {\\n\\t  var forceBase64 = (opts && opts.forceBase64);\\n\\t  if (!hasXHR2 || forceBase64) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\t  Transport.call(this, opts);\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Transport.\\n\\t */\\n\\n\\tinherit(Polling, Transport);\\n\\n\\t/**\\n\\t * Transport name.\\n\\t */\\n\\n\\tPolling.prototype.name = 'polling';\\n\\n\\t/**\\n\\t * Opens the socket (triggers polling). We write a PING message to determine\\n\\t * when the transport is open.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.doOpen = function () {\\n\\t  this.poll();\\n\\t};\\n\\n\\t/**\\n\\t * Pauses polling.\\n\\t *\\n\\t * @param {Function} callback upon buffers are flushed and transport is paused\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.pause = function (onPause) {\\n\\t  var self = this;\\n\\n\\t  this.readyState = 'pausing';\\n\\n\\t  function pause () {\\n\\t    debug('paused');\\n\\t    self.readyState = 'paused';\\n\\t    onPause();\\n\\t  }\\n\\n\\t  if (this.polling || !this.writable) {\\n\\t    var total = 0;\\n\\n\\t    if (this.polling) {\\n\\t      debug('we are currently polling - waiting to pause');\\n\\t      total++;\\n\\t      this.once('pollComplete', function () {\\n\\t        debug('pre-pause polling complete');\\n\\t        --total || pause();\\n\\t      });\\n\\t    }\\n\\n\\t    if (!this.writable) {\\n\\t      debug('we are currently writing - waiting to pause');\\n\\t      total++;\\n\\t      this.once('drain', function () {\\n\\t        debug('pre-pause writing complete');\\n\\t        --total || pause();\\n\\t      });\\n\\t    }\\n\\t  } else {\\n\\t    pause();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Starts polling cycle.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tPolling.prototype.poll = function () {\\n\\t  debug('polling');\\n\\t  this.polling = true;\\n\\t  this.doPoll();\\n\\t  this.emit('poll');\\n\\t};\\n\\n\\t/**\\n\\t * Overloads onData to detect payloads.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.onData = function (data) {\\n\\t  var self = this;\\n\\t  debug('polling got data %s', data);\\n\\t  var callback = function (packet, index, total) {\\n\\t    // if its the first message we consider the transport open\\n\\t    if ('opening' === self.readyState) {\\n\\t      self.onOpen();\\n\\t    }\\n\\n\\t    // if its a close packet, we close the ongoing requests\\n\\t    if ('close' === packet.type) {\\n\\t      self.onClose();\\n\\t      return false;\\n\\t    }\\n\\n\\t    // otherwise bypass onData and handle the message\\n\\t    self.onPacket(packet);\\n\\t  };\\n\\n\\t  // decode payload\\n\\t  parser.decodePayload(data, this.socket.binaryType, callback);\\n\\n\\t  // if an event did not trigger closing\\n\\t  if ('closed' !== this.readyState) {\\n\\t    // if we got data we're not polling\\n\\t    this.polling = false;\\n\\t    this.emit('pollComplete');\\n\\n\\t    if ('open' === this.readyState) {\\n\\t      this.poll();\\n\\t    } else {\\n\\t      debug('ignoring poll - transport state \\\"%s\\\"', this.readyState);\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * For polling, send a close packet.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.doClose = function () {\\n\\t  var self = this;\\n\\n\\t  function close () {\\n\\t    debug('writing close packet');\\n\\t    self.write([{ type: 'close' }]);\\n\\t  }\\n\\n\\t  if ('open' === this.readyState) {\\n\\t    debug('transport open - closing');\\n\\t    close();\\n\\t  } else {\\n\\t    // in case we're trying to close while\\n\\t    // handshaking is in progress (GH-164)\\n\\t    debug('transport not open - deferring close');\\n\\t    this.once('open', close);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Writes a packets payload.\\n\\t *\\n\\t * @param {Array} data packets\\n\\t * @param {Function} drain callback\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.write = function (packets) {\\n\\t  var self = this;\\n\\t  this.writable = false;\\n\\t  var callbackfn = function () {\\n\\t    self.writable = true;\\n\\t    self.emit('drain');\\n\\t  };\\n\\n\\t  parser.encodePayload(packets, this.supportsBinary, function (data) {\\n\\t    self.doWrite(data, callbackfn);\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Generates uri for connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tPolling.prototype.uri = function () {\\n\\t  var query = this.query || {};\\n\\t  var schema = this.secure ? 'https' : 'http';\\n\\t  var port = '';\\n\\n\\t  // cache busting is forced\\n\\t  if (false !== this.timestampRequests) {\\n\\t    query[this.timestampParam] = yeast();\\n\\t  }\\n\\n\\t  if (!this.supportsBinary && !query.sid) {\\n\\t    query.b64 = 1;\\n\\t  }\\n\\n\\t  query = parseqs.encode(query);\\n\\n\\t  // avoid port if default for schema\\n\\t  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\\n\\t     ('http' === schema && Number(this.port) !== 80))) {\\n\\t    port = ':' + this.port;\\n\\t  }\\n\\n\\t  // prepend ? to query\\n\\t  if (query.length) {\\n\\t    query = '?' + query;\\n\\t  }\\n\\n\\t  var ipv6 = this.hostname.indexOf(':') !== -1;\\n\\t  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n\\t};\\n\\n\\n/***/ },\\n/* 26 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parser = __webpack_require__(27);\\n\\tvar Emitter = __webpack_require__(35);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = Transport;\\n\\n\\t/**\\n\\t * Transport abstract constructor.\\n\\t *\\n\\t * @param {Object} options.\\n\\t * @api private\\n\\t */\\n\\n\\tfunction Transport (opts) {\\n\\t  this.path = opts.path;\\n\\t  this.hostname = opts.hostname;\\n\\t  this.port = opts.port;\\n\\t  this.secure = opts.secure;\\n\\t  this.query = opts.query;\\n\\t  this.timestampParam = opts.timestampParam;\\n\\t  this.timestampRequests = opts.timestampRequests;\\n\\t  this.readyState = '';\\n\\t  this.agent = opts.agent || false;\\n\\t  this.socket = opts.socket;\\n\\t  this.enablesXDR = opts.enablesXDR;\\n\\n\\t  // SSL options for Node.js client\\n\\t  this.pfx = opts.pfx;\\n\\t  this.key = opts.key;\\n\\t  this.passphrase = opts.passphrase;\\n\\t  this.cert = opts.cert;\\n\\t  this.ca = opts.ca;\\n\\t  this.ciphers = opts.ciphers;\\n\\t  this.rejectUnauthorized = opts.rejectUnauthorized;\\n\\t  this.forceNode = opts.forceNode;\\n\\n\\t  // other options for Node.js client\\n\\t  this.extraHeaders = opts.extraHeaders;\\n\\t  this.localAddress = opts.localAddress;\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Transport.prototype);\\n\\n\\t/**\\n\\t * Emits an error.\\n\\t *\\n\\t * @param {String} str\\n\\t * @return {Transport} for chaining\\n\\t * @api public\\n\\t */\\n\\n\\tTransport.prototype.onError = function (msg, desc) {\\n\\t  var err = new Error(msg);\\n\\t  err.type = 'TransportError';\\n\\t  err.description = desc;\\n\\t  this.emit('error', err);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Opens the transport.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tTransport.prototype.open = function () {\\n\\t  if ('closed' === this.readyState || '' === this.readyState) {\\n\\t    this.readyState = 'opening';\\n\\t    this.doOpen();\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Closes the transport.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.close = function () {\\n\\t  if ('opening' === this.readyState || 'open' === this.readyState) {\\n\\t    this.doClose();\\n\\t    this.onClose();\\n\\t  }\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends multiple packets.\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.send = function (packets) {\\n\\t  if ('open' === this.readyState) {\\n\\t    this.write(packets);\\n\\t  } else {\\n\\t    throw new Error('Transport not open');\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon open\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onOpen = function () {\\n\\t  this.readyState = 'open';\\n\\t  this.writable = true;\\n\\t  this.emit('open');\\n\\t};\\n\\n\\t/**\\n\\t * Called with data.\\n\\t *\\n\\t * @param {String} data\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onData = function (data) {\\n\\t  var packet = parser.decodePacket(data, this.socket.binaryType);\\n\\t  this.onPacket(packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called with a decoded packet.\\n\\t */\\n\\n\\tTransport.prototype.onPacket = function (packet) {\\n\\t  this.emit('packet', packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon close.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tTransport.prototype.onClose = function () {\\n\\t  this.readyState = 'closed';\\n\\t  this.emit('close');\\n\\t};\\n\\n\\n/***/ },\\n/* 27 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar keys = __webpack_require__(28);\\n\\tvar hasBinary = __webpack_require__(29);\\n\\tvar sliceBuffer = __webpack_require__(30);\\n\\tvar after = __webpack_require__(31);\\n\\tvar utf8 = __webpack_require__(32);\\n\\n\\tvar base64encoder;\\n\\tif (global && global.ArrayBuffer) {\\n\\t  base64encoder = __webpack_require__(33);\\n\\t}\\n\\n\\t/**\\n\\t * Check if we are running an android browser. That requires us to use\\n\\t * ArrayBuffer with polling transports...\\n\\t *\\n\\t * http://ghinda.net/jpeg-blob-ajax-android/\\n\\t */\\n\\n\\tvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\\n\\n\\t/**\\n\\t * Check if we are running in PhantomJS.\\n\\t * Uploading a Blob with PhantomJS does not work correctly, as reported here:\\n\\t * https://github.com/ariya/phantomjs/issues/11395\\n\\t * @type boolean\\n\\t */\\n\\tvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\\n\\n\\t/**\\n\\t * When true, avoids using Blobs to encode payloads.\\n\\t * @type boolean\\n\\t */\\n\\tvar dontSendBlobs = isAndroid || isPhantomJS;\\n\\n\\t/**\\n\\t * Current protocol version.\\n\\t */\\n\\n\\texports.protocol = 3;\\n\\n\\t/**\\n\\t * Packet types.\\n\\t */\\n\\n\\tvar packets = exports.packets = {\\n\\t    open:     0    // non-ws\\n\\t  , close:    1    // non-ws\\n\\t  , ping:     2\\n\\t  , pong:     3\\n\\t  , message:  4\\n\\t  , upgrade:  5\\n\\t  , noop:     6\\n\\t};\\n\\n\\tvar packetslist = keys(packets);\\n\\n\\t/**\\n\\t * Premade error packet.\\n\\t */\\n\\n\\tvar err = { type: 'error', data: 'parser error' };\\n\\n\\t/**\\n\\t * Create a blob api even for blob builder when vendor prefixes exist\\n\\t */\\n\\n\\tvar Blob = __webpack_require__(34);\\n\\n\\t/**\\n\\t * Encodes a packet.\\n\\t *\\n\\t *     <packet type id> [ <data> ]\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *     5hello world\\n\\t *     3\\n\\t *     4\\n\\t *\\n\\t * Binary is encoded in an identical principle\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\\n\\t  if ('function' == typeof supportsBinary) {\\n\\t    callback = supportsBinary;\\n\\t    supportsBinary = false;\\n\\t  }\\n\\n\\t  if ('function' == typeof utf8encode) {\\n\\t    callback = utf8encode;\\n\\t    utf8encode = null;\\n\\t  }\\n\\n\\t  var data = (packet.data === undefined)\\n\\t    ? undefined\\n\\t    : packet.data.buffer || packet.data;\\n\\n\\t  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\\n\\t    return encodeArrayBuffer(packet, supportsBinary, callback);\\n\\t  } else if (Blob && data instanceof global.Blob) {\\n\\t    return encodeBlob(packet, supportsBinary, callback);\\n\\t  }\\n\\n\\t  // might be an object with { base64: true, data: dataAsBase64String }\\n\\t  if (data && data.base64) {\\n\\t    return encodeBase64Object(packet, callback);\\n\\t  }\\n\\n\\t  // Sending data as a utf-8 string\\n\\t  var encoded = packets[packet.type];\\n\\n\\t  // data fragment is optional\\n\\t  if (undefined !== packet.data) {\\n\\t    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\\n\\t  }\\n\\n\\t  return callback('' + encoded);\\n\\n\\t};\\n\\n\\tfunction encodeBase64Object(packet, callback) {\\n\\t  // packet data is an object { base64: true, data: dataAsBase64String }\\n\\t  var message = 'b' + exports.packets[packet.type] + packet.data.data;\\n\\t  return callback(message);\\n\\t}\\n\\n\\t/**\\n\\t * Encode packet helpers for binary types\\n\\t */\\n\\n\\tfunction encodeArrayBuffer(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  var data = packet.data;\\n\\t  var contentArray = new Uint8Array(data);\\n\\t  var resultBuffer = new Uint8Array(1 + data.byteLength);\\n\\n\\t  resultBuffer[0] = packets[packet.type];\\n\\t  for (var i = 0; i < contentArray.length; i++) {\\n\\t    resultBuffer[i+1] = contentArray[i];\\n\\t  }\\n\\n\\t  return callback(resultBuffer.buffer);\\n\\t}\\n\\n\\tfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  var fr = new FileReader();\\n\\t  fr.onload = function() {\\n\\t    packet.data = fr.result;\\n\\t    exports.encodePacket(packet, supportsBinary, true, callback);\\n\\t  };\\n\\t  return fr.readAsArrayBuffer(packet.data);\\n\\t}\\n\\n\\tfunction encodeBlob(packet, supportsBinary, callback) {\\n\\t  if (!supportsBinary) {\\n\\t    return exports.encodeBase64Packet(packet, callback);\\n\\t  }\\n\\n\\t  if (dontSendBlobs) {\\n\\t    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\\n\\t  }\\n\\n\\t  var length = new Uint8Array(1);\\n\\t  length[0] = packets[packet.type];\\n\\t  var blob = new Blob([length.buffer, packet.data]);\\n\\n\\t  return callback(blob);\\n\\t}\\n\\n\\t/**\\n\\t * Encodes a packet with binary data in a base64 string\\n\\t *\\n\\t * @param {Object} packet, has `type` and `data`\\n\\t * @return {String} base64 encoded message\\n\\t */\\n\\n\\texports.encodeBase64Packet = function(packet, callback) {\\n\\t  var message = 'b' + exports.packets[packet.type];\\n\\t  if (Blob && packet.data instanceof global.Blob) {\\n\\t    var fr = new FileReader();\\n\\t    fr.onload = function() {\\n\\t      var b64 = fr.result.split(',')[1];\\n\\t      callback(message + b64);\\n\\t    };\\n\\t    return fr.readAsDataURL(packet.data);\\n\\t  }\\n\\n\\t  var b64data;\\n\\t  try {\\n\\t    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\\n\\t  } catch (e) {\\n\\t    // iPhone Safari doesn't let you apply with typed arrays\\n\\t    var typed = new Uint8Array(packet.data);\\n\\t    var basic = new Array(typed.length);\\n\\t    for (var i = 0; i < typed.length; i++) {\\n\\t      basic[i] = typed[i];\\n\\t    }\\n\\t    b64data = String.fromCharCode.apply(null, basic);\\n\\t  }\\n\\t  message += global.btoa(b64data);\\n\\t  return callback(message);\\n\\t};\\n\\n\\t/**\\n\\t * Decodes a packet. Changes format to Blob if requested.\\n\\t *\\n\\t * @return {Object} with `type` and `data` (if any)\\n\\t * @api private\\n\\t */\\n\\n\\texports.decodePacket = function (data, binaryType, utf8decode) {\\n\\t  if (data === undefined) {\\n\\t    return err;\\n\\t  }\\n\\t  // String data\\n\\t  if (typeof data == 'string') {\\n\\t    if (data.charAt(0) == 'b') {\\n\\t      return exports.decodeBase64Packet(data.substr(1), binaryType);\\n\\t    }\\n\\n\\t    if (utf8decode) {\\n\\t      data = tryDecode(data);\\n\\t      if (data === false) {\\n\\t        return err;\\n\\t      }\\n\\t    }\\n\\t    var type = data.charAt(0);\\n\\n\\t    if (Number(type) != type || !packetslist[type]) {\\n\\t      return err;\\n\\t    }\\n\\n\\t    if (data.length > 1) {\\n\\t      return { type: packetslist[type], data: data.substring(1) };\\n\\t    } else {\\n\\t      return { type: packetslist[type] };\\n\\t    }\\n\\t  }\\n\\n\\t  var asArray = new Uint8Array(data);\\n\\t  var type = asArray[0];\\n\\t  var rest = sliceBuffer(data, 1);\\n\\t  if (Blob && binaryType === 'blob') {\\n\\t    rest = new Blob([rest]);\\n\\t  }\\n\\t  return { type: packetslist[type], data: rest };\\n\\t};\\n\\n\\tfunction tryDecode(data) {\\n\\t  try {\\n\\t    data = utf8.decode(data);\\n\\t  } catch (e) {\\n\\t    return false;\\n\\t  }\\n\\t  return data;\\n\\t}\\n\\n\\t/**\\n\\t * Decodes a packet encoded in a base64 string\\n\\t *\\n\\t * @param {String} base64 encoded message\\n\\t * @return {Object} with `type` and `data` (if any)\\n\\t */\\n\\n\\texports.decodeBase64Packet = function(msg, binaryType) {\\n\\t  var type = packetslist[msg.charAt(0)];\\n\\t  if (!base64encoder) {\\n\\t    return { type: type, data: { base64: true, data: msg.substr(1) } };\\n\\t  }\\n\\n\\t  var data = base64encoder.decode(msg.substr(1));\\n\\n\\t  if (binaryType === 'blob' && Blob) {\\n\\t    data = new Blob([data]);\\n\\t  }\\n\\n\\t  return { type: type, data: data };\\n\\t};\\n\\n\\t/**\\n\\t * Encodes multiple messages (payload).\\n\\t *\\n\\t *     <length>:data\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *     11:hello world2:hi\\n\\t *\\n\\t * If any contents are binary, they will be encoded as base64 strings. Base64\\n\\t * encoded strings are marked with a b before the length specifier\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePayload = function (packets, supportsBinary, callback) {\\n\\t  if (typeof supportsBinary == 'function') {\\n\\t    callback = supportsBinary;\\n\\t    supportsBinary = null;\\n\\t  }\\n\\n\\t  var isBinary = hasBinary(packets);\\n\\n\\t  if (supportsBinary && isBinary) {\\n\\t    if (Blob && !dontSendBlobs) {\\n\\t      return exports.encodePayloadAsBlob(packets, callback);\\n\\t    }\\n\\n\\t    return exports.encodePayloadAsArrayBuffer(packets, callback);\\n\\t  }\\n\\n\\t  if (!packets.length) {\\n\\t    return callback('0:');\\n\\t  }\\n\\n\\t  function setLengthHeader(message) {\\n\\t    return message.length + ':' + message;\\n\\t  }\\n\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\\n\\t      doneCallback(null, setLengthHeader(message));\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, results) {\\n\\t    return callback(results.join(''));\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Async array map using after\\n\\t */\\n\\n\\tfunction map(ary, each, done) {\\n\\t  var result = new Array(ary.length);\\n\\t  var next = after(ary.length, done);\\n\\n\\t  var eachWithIndex = function(i, el, cb) {\\n\\t    each(el, function(error, msg) {\\n\\t      result[i] = msg;\\n\\t      cb(error, result);\\n\\t    });\\n\\t  };\\n\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    eachWithIndex(i, ary[i], next);\\n\\t  }\\n\\t}\\n\\n\\t/*\\n\\t * Decodes data when a payload is maybe expected. Possible binary contents are\\n\\t * decoded from their base64 representation\\n\\t *\\n\\t * @param {String} data, callback method\\n\\t * @api public\\n\\t */\\n\\n\\texports.decodePayload = function (data, binaryType, callback) {\\n\\t  if (typeof data != 'string') {\\n\\t    return exports.decodePayloadAsBinary(data, binaryType, callback);\\n\\t  }\\n\\n\\t  if (typeof binaryType === 'function') {\\n\\t    callback = binaryType;\\n\\t    binaryType = null;\\n\\t  }\\n\\n\\t  var packet;\\n\\t  if (data == '') {\\n\\t    // parser error - ignoring payload\\n\\t    return callback(err, 0, 1);\\n\\t  }\\n\\n\\t  var length = ''\\n\\t    , n, msg;\\n\\n\\t  for (var i = 0, l = data.length; i < l; i++) {\\n\\t    var chr = data.charAt(i);\\n\\n\\t    if (':' != chr) {\\n\\t      length += chr;\\n\\t    } else {\\n\\t      if ('' == length || (length != (n = Number(length)))) {\\n\\t        // parser error - ignoring payload\\n\\t        return callback(err, 0, 1);\\n\\t      }\\n\\n\\t      msg = data.substr(i + 1, n);\\n\\n\\t      if (length != msg.length) {\\n\\t        // parser error - ignoring payload\\n\\t        return callback(err, 0, 1);\\n\\t      }\\n\\n\\t      if (msg.length) {\\n\\t        packet = exports.decodePacket(msg, binaryType, true);\\n\\n\\t        if (err.type == packet.type && err.data == packet.data) {\\n\\t          // parser error in individual packet - ignoring payload\\n\\t          return callback(err, 0, 1);\\n\\t        }\\n\\n\\t        var ret = callback(packet, i + n, l);\\n\\t        if (false === ret) return;\\n\\t      }\\n\\n\\t      // advance cursor\\n\\t      i += n;\\n\\t      length = '';\\n\\t    }\\n\\t  }\\n\\n\\t  if (length != '') {\\n\\t    // parser error - ignoring payload\\n\\t    return callback(err, 0, 1);\\n\\t  }\\n\\n\\t};\\n\\n\\t/**\\n\\t * Encodes multiple messages (payload) as binary.\\n\\t *\\n\\t * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\\n\\t * 255><data>\\n\\t *\\n\\t * Example:\\n\\t * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\\n\\t *\\n\\t * @param {Array} packets\\n\\t * @return {ArrayBuffer} encoded payload\\n\\t * @api private\\n\\t */\\n\\n\\texports.encodePayloadAsArrayBuffer = function(packets, callback) {\\n\\t  if (!packets.length) {\\n\\t    return callback(new ArrayBuffer(0));\\n\\t  }\\n\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, true, true, function(data) {\\n\\t      return doneCallback(null, data);\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, encodedPackets) {\\n\\t    var totalLength = encodedPackets.reduce(function(acc, p) {\\n\\t      var len;\\n\\t      if (typeof p === 'string'){\\n\\t        len = p.length;\\n\\t      } else {\\n\\t        len = p.byteLength;\\n\\t      }\\n\\t      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\\n\\t    }, 0);\\n\\n\\t    var resultArray = new Uint8Array(totalLength);\\n\\n\\t    var bufferIndex = 0;\\n\\t    encodedPackets.forEach(function(p) {\\n\\t      var isString = typeof p === 'string';\\n\\t      var ab = p;\\n\\t      if (isString) {\\n\\t        var view = new Uint8Array(p.length);\\n\\t        for (var i = 0; i < p.length; i++) {\\n\\t          view[i] = p.charCodeAt(i);\\n\\t        }\\n\\t        ab = view.buffer;\\n\\t      }\\n\\n\\t      if (isString) { // not true binary\\n\\t        resultArray[bufferIndex++] = 0;\\n\\t      } else { // true binary\\n\\t        resultArray[bufferIndex++] = 1;\\n\\t      }\\n\\n\\t      var lenStr = ab.byteLength.toString();\\n\\t      for (var i = 0; i < lenStr.length; i++) {\\n\\t        resultArray[bufferIndex++] = parseInt(lenStr[i]);\\n\\t      }\\n\\t      resultArray[bufferIndex++] = 255;\\n\\n\\t      var view = new Uint8Array(ab);\\n\\t      for (var i = 0; i < view.length; i++) {\\n\\t        resultArray[bufferIndex++] = view[i];\\n\\t      }\\n\\t    });\\n\\n\\t    return callback(resultArray.buffer);\\n\\t  });\\n\\t};\\n\\n\\t/**\\n\\t * Encode as Blob\\n\\t */\\n\\n\\texports.encodePayloadAsBlob = function(packets, callback) {\\n\\t  function encodeOne(packet, doneCallback) {\\n\\t    exports.encodePacket(packet, true, true, function(encoded) {\\n\\t      var binaryIdentifier = new Uint8Array(1);\\n\\t      binaryIdentifier[0] = 1;\\n\\t      if (typeof encoded === 'string') {\\n\\t        var view = new Uint8Array(encoded.length);\\n\\t        for (var i = 0; i < encoded.length; i++) {\\n\\t          view[i] = encoded.charCodeAt(i);\\n\\t        }\\n\\t        encoded = view.buffer;\\n\\t        binaryIdentifier[0] = 0;\\n\\t      }\\n\\n\\t      var len = (encoded instanceof ArrayBuffer)\\n\\t        ? encoded.byteLength\\n\\t        : encoded.size;\\n\\n\\t      var lenStr = len.toString();\\n\\t      var lengthAry = new Uint8Array(lenStr.length + 1);\\n\\t      for (var i = 0; i < lenStr.length; i++) {\\n\\t        lengthAry[i] = parseInt(lenStr[i]);\\n\\t      }\\n\\t      lengthAry[lenStr.length] = 255;\\n\\n\\t      if (Blob) {\\n\\t        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\\n\\t        doneCallback(null, blob);\\n\\t      }\\n\\t    });\\n\\t  }\\n\\n\\t  map(packets, encodeOne, function(err, results) {\\n\\t    return callback(new Blob(results));\\n\\t  });\\n\\t};\\n\\n\\t/*\\n\\t * Decodes data when a payload is maybe expected. Strings are decoded by\\n\\t * interpreting each byte as a key code for entries marked to start with 0. See\\n\\t * description of encodePayloadAsBinary\\n\\t *\\n\\t * @param {ArrayBuffer} data, callback method\\n\\t * @api public\\n\\t */\\n\\n\\texports.decodePayloadAsBinary = function (data, binaryType, callback) {\\n\\t  if (typeof binaryType === 'function') {\\n\\t    callback = binaryType;\\n\\t    binaryType = null;\\n\\t  }\\n\\n\\t  var bufferTail = data;\\n\\t  var buffers = [];\\n\\n\\t  var numberTooLong = false;\\n\\t  while (bufferTail.byteLength > 0) {\\n\\t    var tailArray = new Uint8Array(bufferTail);\\n\\t    var isString = tailArray[0] === 0;\\n\\t    var msgLength = '';\\n\\n\\t    for (var i = 1; ; i++) {\\n\\t      if (tailArray[i] == 255) break;\\n\\n\\t      if (msgLength.length > 310) {\\n\\t        numberTooLong = true;\\n\\t        break;\\n\\t      }\\n\\n\\t      msgLength += tailArray[i];\\n\\t    }\\n\\n\\t    if(numberTooLong) return callback(err, 0, 1);\\n\\n\\t    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\\n\\t    msgLength = parseInt(msgLength);\\n\\n\\t    var msg = sliceBuffer(bufferTail, 0, msgLength);\\n\\t    if (isString) {\\n\\t      try {\\n\\t        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\\n\\t      } catch (e) {\\n\\t        // iPhone Safari doesn't let you apply to typed arrays\\n\\t        var typed = new Uint8Array(msg);\\n\\t        msg = '';\\n\\t        for (var i = 0; i < typed.length; i++) {\\n\\t          msg += String.fromCharCode(typed[i]);\\n\\t        }\\n\\t      }\\n\\t    }\\n\\n\\t    buffers.push(msg);\\n\\t    bufferTail = sliceBuffer(bufferTail, msgLength);\\n\\t  }\\n\\n\\t  var total = buffers.length;\\n\\t  buffers.forEach(function(buffer, i) {\\n\\t    callback(exports.decodePacket(buffer, binaryType, true), i, total);\\n\\t  });\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 28 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Gets the keys for an object.\\n\\t *\\n\\t * @return {Array} keys\\n\\t * @api private\\n\\t */\\n\\n\\tmodule.exports = Object.keys || function keys (obj){\\n\\t  var arr = [];\\n\\t  var has = Object.prototype.hasOwnProperty;\\n\\n\\t  for (var i in obj) {\\n\\t    if (has.call(obj, i)) {\\n\\t      arr.push(i);\\n\\t    }\\n\\t  }\\n\\t  return arr;\\n\\t};\\n\\n\\n/***/ },\\n/* 29 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\t/*\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar isArray = __webpack_require__(15);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = hasBinary;\\n\\n\\t/**\\n\\t * Checks for binary data.\\n\\t *\\n\\t * Right now only Buffer and ArrayBuffer are supported..\\n\\t *\\n\\t * @param {Object} anything\\n\\t * @api public\\n\\t */\\n\\n\\tfunction hasBinary(data) {\\n\\n\\t  function _hasBinary(obj) {\\n\\t    if (!obj) return false;\\n\\n\\t    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\\n\\t         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||\\n\\t         (global.Blob && obj instanceof Blob) ||\\n\\t         (global.File && obj instanceof File)\\n\\t        ) {\\n\\t      return true;\\n\\t    }\\n\\n\\t    if (isArray(obj)) {\\n\\t      for (var i = 0; i < obj.length; i++) {\\n\\t          if (_hasBinary(obj[i])) {\\n\\t              return true;\\n\\t          }\\n\\t      }\\n\\t    } else if (obj && 'object' == typeof obj) {\\n\\t      // see: https://github.com/Automattic/has-binary/pull/4\\n\\t      if (obj.toJSON && 'function' == typeof obj.toJSON) {\\n\\t        obj = obj.toJSON();\\n\\t      }\\n\\n\\t      for (var key in obj) {\\n\\t        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\\n\\t          return true;\\n\\t        }\\n\\t      }\\n\\t    }\\n\\n\\t    return false;\\n\\t  }\\n\\n\\t  return _hasBinary(data);\\n\\t}\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 30 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * An abstraction for slicing an arraybuffer even when\\n\\t * ArrayBuffer.prototype.slice is not supported\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(arraybuffer, start, end) {\\n\\t  var bytes = arraybuffer.byteLength;\\n\\t  start = start || 0;\\n\\t  end = end || bytes;\\n\\n\\t  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\\n\\n\\t  if (start < 0) { start += bytes; }\\n\\t  if (end < 0) { end += bytes; }\\n\\t  if (end > bytes) { end = bytes; }\\n\\n\\t  if (start >= bytes || start >= end || bytes === 0) {\\n\\t    return new ArrayBuffer(0);\\n\\t  }\\n\\n\\t  var abv = new Uint8Array(arraybuffer);\\n\\t  var result = new Uint8Array(end - start);\\n\\t  for (var i = start, ii = 0; i < end; i++, ii++) {\\n\\t    result[ii] = abv[i];\\n\\t  }\\n\\t  return result.buffer;\\n\\t};\\n\\n\\n/***/ },\\n/* 31 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = after\\n\\n\\tfunction after(count, callback, err_cb) {\\n\\t    var bail = false\\n\\t    err_cb = err_cb || noop\\n\\t    proxy.count = count\\n\\n\\t    return (count === 0) ? callback() : proxy\\n\\n\\t    function proxy(err, result) {\\n\\t        if (proxy.count <= 0) {\\n\\t            throw new Error('after called too many times')\\n\\t        }\\n\\t        --proxy.count\\n\\n\\t        // after first error, rest are passed to err_cb\\n\\t        if (err) {\\n\\t            bail = true\\n\\t            callback(err)\\n\\t            // future error callbacks will go to error handler\\n\\t            callback = err_cb\\n\\t        } else if (proxy.count === 0 && !bail) {\\n\\t            callback(null, result)\\n\\t        }\\n\\t    }\\n\\t}\\n\\n\\tfunction noop() {}\\n\\n\\n/***/ },\\n/* 32 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/wtf8 v1.0.0 by @mathias */\\n\\t;(function(root) {\\n\\n\\t\\t// Detect free variables `exports`\\n\\t\\tvar freeExports = typeof exports == 'object' && exports;\\n\\n\\t\\t// Detect free variable `module`\\n\\t\\tvar freeModule = typeof module == 'object' && module &&\\n\\t\\t\\tmodule.exports == freeExports && module;\\n\\n\\t\\t// Detect free variable `global`, from Node.js or Browserified code,\\n\\t\\t// and use it as `root`\\n\\t\\tvar freeGlobal = typeof global == 'object' && global;\\n\\t\\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\\n\\t\\t\\troot = freeGlobal;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tvar stringFromCharCode = String.fromCharCode;\\n\\n\\t\\t// Taken from https://mths.be/punycode\\n\\t\\tfunction ucs2decode(string) {\\n\\t\\t\\tvar output = [];\\n\\t\\t\\tvar counter = 0;\\n\\t\\t\\tvar length = string.length;\\n\\t\\t\\tvar value;\\n\\t\\t\\tvar extra;\\n\\t\\t\\twhile (counter < length) {\\n\\t\\t\\t\\tvalue = string.charCodeAt(counter++);\\n\\t\\t\\t\\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\\n\\t\\t\\t\\t\\t// high surrogate, and there is a next character\\n\\t\\t\\t\\t\\textra = string.charCodeAt(counter++);\\n\\t\\t\\t\\t\\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\\n\\t\\t\\t\\t\\t\\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// unmatched surrogate; only append this code unit, in case the next\\n\\t\\t\\t\\t\\t\\t// code unit is the high surrogate of a surrogate pair\\n\\t\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t\\t\\tcounter--;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn output;\\n\\t\\t}\\n\\n\\t\\t// Taken from https://mths.be/punycode\\n\\t\\tfunction ucs2encode(array) {\\n\\t\\t\\tvar length = array.length;\\n\\t\\t\\tvar index = -1;\\n\\t\\t\\tvar value;\\n\\t\\t\\tvar output = '';\\n\\t\\t\\twhile (++index < length) {\\n\\t\\t\\t\\tvalue = array[index];\\n\\t\\t\\t\\tif (value > 0xFFFF) {\\n\\t\\t\\t\\t\\tvalue -= 0x10000;\\n\\t\\t\\t\\t\\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\\n\\t\\t\\t\\t\\tvalue = 0xDC00 | value & 0x3FF;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\toutput += stringFromCharCode(value);\\n\\t\\t\\t}\\n\\t\\t\\treturn output;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tfunction createByte(codePoint, shift) {\\n\\t\\t\\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\\n\\t\\t}\\n\\n\\t\\tfunction encodeCodePoint(codePoint) {\\n\\t\\t\\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\\n\\t\\t\\t\\treturn stringFromCharCode(codePoint);\\n\\t\\t\\t}\\n\\t\\t\\tvar symbol = '';\\n\\t\\t\\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\\n\\t\\t\\t}\\n\\t\\t\\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t\\t}\\n\\t\\t\\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\\n\\t\\t\\t\\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 12);\\n\\t\\t\\t\\tsymbol += createByte(codePoint, 6);\\n\\t\\t\\t}\\n\\t\\t\\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\\n\\t\\t\\treturn symbol;\\n\\t\\t}\\n\\n\\t\\tfunction wtf8encode(string) {\\n\\t\\t\\tvar codePoints = ucs2decode(string);\\n\\t\\t\\tvar length = codePoints.length;\\n\\t\\t\\tvar index = -1;\\n\\t\\t\\tvar codePoint;\\n\\t\\t\\tvar byteString = '';\\n\\t\\t\\twhile (++index < length) {\\n\\t\\t\\t\\tcodePoint = codePoints[index];\\n\\t\\t\\t\\tbyteString += encodeCodePoint(codePoint);\\n\\t\\t\\t}\\n\\t\\t\\treturn byteString;\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tfunction readContinuationByte() {\\n\\t\\t\\tif (byteIndex >= byteCount) {\\n\\t\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar continuationByte = byteArray[byteIndex] & 0xFF;\\n\\t\\t\\tbyteIndex++;\\n\\n\\t\\t\\tif ((continuationByte & 0xC0) == 0x80) {\\n\\t\\t\\t\\treturn continuationByte & 0x3F;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we end up here, it’s not a continuation byte.\\n\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t}\\n\\n\\t\\tfunction decodeSymbol() {\\n\\t\\t\\tvar byte1;\\n\\t\\t\\tvar byte2;\\n\\t\\t\\tvar byte3;\\n\\t\\t\\tvar byte4;\\n\\t\\t\\tvar codePoint;\\n\\n\\t\\t\\tif (byteIndex > byteCount) {\\n\\t\\t\\t\\tthrow Error('Invalid byte index');\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (byteIndex == byteCount) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Read the first byte.\\n\\t\\t\\tbyte1 = byteArray[byteIndex] & 0xFF;\\n\\t\\t\\tbyteIndex++;\\n\\n\\t\\t\\t// 1-byte sequence (no continuation bytes)\\n\\t\\t\\tif ((byte1 & 0x80) == 0) {\\n\\t\\t\\t\\treturn byte1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 2-byte sequence\\n\\t\\t\\tif ((byte1 & 0xE0) == 0xC0) {\\n\\t\\t\\t\\tvar byte2 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\\n\\t\\t\\t\\tif (codePoint >= 0x80) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 3-byte sequence (may include unpaired surrogates)\\n\\t\\t\\tif ((byte1 & 0xF0) == 0xE0) {\\n\\t\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\\n\\t\\t\\t\\tif (codePoint >= 0x0800) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthrow Error('Invalid continuation byte');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 4-byte sequence\\n\\t\\t\\tif ((byte1 & 0xF8) == 0xF0) {\\n\\t\\t\\t\\tbyte2 = readContinuationByte();\\n\\t\\t\\t\\tbyte3 = readContinuationByte();\\n\\t\\t\\t\\tbyte4 = readContinuationByte();\\n\\t\\t\\t\\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\\n\\t\\t\\t\\t\\t(byte3 << 0x06) | byte4;\\n\\t\\t\\t\\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\\n\\t\\t\\t\\t\\treturn codePoint;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthrow Error('Invalid WTF-8 detected');\\n\\t\\t}\\n\\n\\t\\tvar byteArray;\\n\\t\\tvar byteCount;\\n\\t\\tvar byteIndex;\\n\\t\\tfunction wtf8decode(byteString) {\\n\\t\\t\\tbyteArray = ucs2decode(byteString);\\n\\t\\t\\tbyteCount = byteArray.length;\\n\\t\\t\\tbyteIndex = 0;\\n\\t\\t\\tvar codePoints = [];\\n\\t\\t\\tvar tmp;\\n\\t\\t\\twhile ((tmp = decodeSymbol()) !== false) {\\n\\t\\t\\t\\tcodePoints.push(tmp);\\n\\t\\t\\t}\\n\\t\\t\\treturn ucs2encode(codePoints);\\n\\t\\t}\\n\\n\\t\\t/*--------------------------------------------------------------------------*/\\n\\n\\t\\tvar wtf8 = {\\n\\t\\t\\t'version': '1.0.0',\\n\\t\\t\\t'encode': wtf8encode,\\n\\t\\t\\t'decode': wtf8decode\\n\\t\\t};\\n\\n\\t\\t// Some AMD build optimizers, like r.js, check for specific condition patterns\\n\\t\\t// like the following:\\n\\t\\tif (\\n\\t\\t\\ttrue\\n\\t\\t) {\\n\\t\\t\\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\\n\\t\\t\\t\\treturn wtf8;\\n\\t\\t\\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t\\t}\\telse if (freeExports && !freeExports.nodeType) {\\n\\t\\t\\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\\n\\t\\t\\t\\tfreeModule.exports = wtf8;\\n\\t\\t\\t} else { // in Narwhal or RingoJS v0.7.0-\\n\\t\\t\\t\\tvar object = {};\\n\\t\\t\\t\\tvar hasOwnProperty = object.hasOwnProperty;\\n\\t\\t\\t\\tfor (var key in wtf8) {\\n\\t\\t\\t\\t\\thasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else { // in Rhino or a web browser\\n\\t\\t\\troot.wtf8 = wtf8;\\n\\t\\t}\\n\\n\\t}(this));\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))\\n\\n/***/ },\\n/* 33 */\\n/***/ function(module, exports) {\\n\\n\\t/*\\n\\t * base64-arraybuffer\\n\\t * https://github.com/niklasvh/base64-arraybuffer\\n\\t *\\n\\t * Copyright (c) 2012 Niklas von Hertzen\\n\\t * Licensed under the MIT license.\\n\\t */\\n\\t(function(){\\n\\t  \\\"use strict\\\";\\n\\n\\t  var chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n\\t  // Use a lookup table to find the index.\\n\\t  var lookup = new Uint8Array(256);\\n\\t  for (var i = 0; i < chars.length; i++) {\\n\\t    lookup[chars.charCodeAt(i)] = i;\\n\\t  }\\n\\n\\t  exports.encode = function(arraybuffer) {\\n\\t    var bytes = new Uint8Array(arraybuffer),\\n\\t    i, len = bytes.length, base64 = \\\"\\\";\\n\\n\\t    for (i = 0; i < len; i+=3) {\\n\\t      base64 += chars[bytes[i] >> 2];\\n\\t      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\\n\\t      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\\n\\t      base64 += chars[bytes[i + 2] & 63];\\n\\t    }\\n\\n\\t    if ((len % 3) === 2) {\\n\\t      base64 = base64.substring(0, base64.length - 1) + \\\"=\\\";\\n\\t    } else if (len % 3 === 1) {\\n\\t      base64 = base64.substring(0, base64.length - 2) + \\\"==\\\";\\n\\t    }\\n\\n\\t    return base64;\\n\\t  };\\n\\n\\t  exports.decode =  function(base64) {\\n\\t    var bufferLength = base64.length * 0.75,\\n\\t    len = base64.length, i, p = 0,\\n\\t    encoded1, encoded2, encoded3, encoded4;\\n\\n\\t    if (base64[base64.length - 1] === \\\"=\\\") {\\n\\t      bufferLength--;\\n\\t      if (base64[base64.length - 2] === \\\"=\\\") {\\n\\t        bufferLength--;\\n\\t      }\\n\\t    }\\n\\n\\t    var arraybuffer = new ArrayBuffer(bufferLength),\\n\\t    bytes = new Uint8Array(arraybuffer);\\n\\n\\t    for (i = 0; i < len; i+=4) {\\n\\t      encoded1 = lookup[base64.charCodeAt(i)];\\n\\t      encoded2 = lookup[base64.charCodeAt(i+1)];\\n\\t      encoded3 = lookup[base64.charCodeAt(i+2)];\\n\\t      encoded4 = lookup[base64.charCodeAt(i+3)];\\n\\n\\t      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\\n\\t      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\\n\\t      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\\n\\t    }\\n\\n\\t    return arraybuffer;\\n\\t  };\\n\\t})();\\n\\n\\n/***/ },\\n/* 34 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Create a blob builder even when vendor prefixes exist\\n\\t */\\n\\n\\tvar BlobBuilder = global.BlobBuilder\\n\\t  || global.WebKitBlobBuilder\\n\\t  || global.MSBlobBuilder\\n\\t  || global.MozBlobBuilder;\\n\\n\\t/**\\n\\t * Check if Blob constructor is supported\\n\\t */\\n\\n\\tvar blobSupported = (function() {\\n\\t  try {\\n\\t    var a = new Blob(['hi']);\\n\\t    return a.size === 2;\\n\\t  } catch(e) {\\n\\t    return false;\\n\\t  }\\n\\t})();\\n\\n\\t/**\\n\\t * Check if Blob constructor supports ArrayBufferViews\\n\\t * Fails in Safari 6, so we need to map to ArrayBuffers there.\\n\\t */\\n\\n\\tvar blobSupportsArrayBufferView = blobSupported && (function() {\\n\\t  try {\\n\\t    var b = new Blob([new Uint8Array([1,2])]);\\n\\t    return b.size === 2;\\n\\t  } catch(e) {\\n\\t    return false;\\n\\t  }\\n\\t})();\\n\\n\\t/**\\n\\t * Check if BlobBuilder is supported\\n\\t */\\n\\n\\tvar blobBuilderSupported = BlobBuilder\\n\\t  && BlobBuilder.prototype.append\\n\\t  && BlobBuilder.prototype.getBlob;\\n\\n\\t/**\\n\\t * Helper function that maps ArrayBufferViews to ArrayBuffers\\n\\t * Used by BlobBuilder constructor and old browsers that didn't\\n\\t * support it in the Blob constructor.\\n\\t */\\n\\n\\tfunction mapArrayBufferViews(ary) {\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    var chunk = ary[i];\\n\\t    if (chunk.buffer instanceof ArrayBuffer) {\\n\\t      var buf = chunk.buffer;\\n\\n\\t      // if this is a subarray, make a copy so we only\\n\\t      // include the subarray region from the underlying buffer\\n\\t      if (chunk.byteLength !== buf.byteLength) {\\n\\t        var copy = new Uint8Array(chunk.byteLength);\\n\\t        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\\n\\t        buf = copy.buffer;\\n\\t      }\\n\\n\\t      ary[i] = buf;\\n\\t    }\\n\\t  }\\n\\t}\\n\\n\\tfunction BlobBuilderConstructor(ary, options) {\\n\\t  options = options || {};\\n\\n\\t  var bb = new BlobBuilder();\\n\\t  mapArrayBufferViews(ary);\\n\\n\\t  for (var i = 0; i < ary.length; i++) {\\n\\t    bb.append(ary[i]);\\n\\t  }\\n\\n\\t  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\\n\\t};\\n\\n\\tfunction BlobConstructor(ary, options) {\\n\\t  mapArrayBufferViews(ary);\\n\\t  return new Blob(ary, options || {});\\n\\t};\\n\\n\\tmodule.exports = (function() {\\n\\t  if (blobSupported) {\\n\\t    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\\n\\t  } else if (blobBuilderSupported) {\\n\\t    return BlobBuilderConstructor;\\n\\t  } else {\\n\\t    return undefined;\\n\\t  }\\n\\t})();\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 35 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t\\r\\n\\t/**\\r\\n\\t * Expose `Emitter`.\\r\\n\\t */\\r\\n\\r\\n\\tif (true) {\\r\\n\\t  module.exports = Emitter;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Initialize a new `Emitter`.\\r\\n\\t *\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tfunction Emitter(obj) {\\r\\n\\t  if (obj) return mixin(obj);\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Mixin the emitter properties.\\r\\n\\t *\\r\\n\\t * @param {Object} obj\\r\\n\\t * @return {Object}\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tfunction mixin(obj) {\\r\\n\\t  for (var key in Emitter.prototype) {\\r\\n\\t    obj[key] = Emitter.prototype[key];\\r\\n\\t  }\\r\\n\\t  return obj;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Listen on the given `event` with `fn`.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.on =\\r\\n\\tEmitter.prototype.addEventListener = function(event, fn){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\\r\\n\\t    .push(fn);\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Adds an `event` listener that will be invoked a single\\r\\n\\t * time then automatically removed.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.once = function(event, fn){\\r\\n\\t  function on() {\\r\\n\\t    this.off(event, on);\\r\\n\\t    fn.apply(this, arguments);\\r\\n\\t  }\\r\\n\\r\\n\\t  on.fn = fn;\\r\\n\\t  this.on(event, on);\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Remove the given callback for `event` or all\\r\\n\\t * registered callbacks.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Function} fn\\r\\n\\t * @return {Emitter}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.off =\\r\\n\\tEmitter.prototype.removeListener =\\r\\n\\tEmitter.prototype.removeAllListeners =\\r\\n\\tEmitter.prototype.removeEventListener = function(event, fn){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\r\\n\\t  // all\\r\\n\\t  if (0 == arguments.length) {\\r\\n\\t    this._callbacks = {};\\r\\n\\t    return this;\\r\\n\\t  }\\r\\n\\r\\n\\t  // specific event\\r\\n\\t  var callbacks = this._callbacks['$' + event];\\r\\n\\t  if (!callbacks) return this;\\r\\n\\r\\n\\t  // remove all handlers\\r\\n\\t  if (1 == arguments.length) {\\r\\n\\t    delete this._callbacks['$' + event];\\r\\n\\t    return this;\\r\\n\\t  }\\r\\n\\r\\n\\t  // remove specific handler\\r\\n\\t  var cb;\\r\\n\\t  for (var i = 0; i < callbacks.length; i++) {\\r\\n\\t    cb = callbacks[i];\\r\\n\\t    if (cb === fn || cb.fn === fn) {\\r\\n\\t      callbacks.splice(i, 1);\\r\\n\\t      break;\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Emit `event` with the given args.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @param {Mixed} ...\\r\\n\\t * @return {Emitter}\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.emit = function(event){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  var args = [].slice.call(arguments, 1)\\r\\n\\t    , callbacks = this._callbacks['$' + event];\\r\\n\\r\\n\\t  if (callbacks) {\\r\\n\\t    callbacks = callbacks.slice(0);\\r\\n\\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\\r\\n\\t      callbacks[i].apply(this, args);\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\r\\n\\t  return this;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Return array of callbacks for `event`.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @return {Array}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.listeners = function(event){\\r\\n\\t  this._callbacks = this._callbacks || {};\\r\\n\\t  return this._callbacks['$' + event] || [];\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Check if this emitter has `event` handlers.\\r\\n\\t *\\r\\n\\t * @param {String} event\\r\\n\\t * @return {Boolean}\\r\\n\\t * @api public\\r\\n\\t */\\r\\n\\r\\n\\tEmitter.prototype.hasListeners = function(event){\\r\\n\\t  return !! this.listeners(event).length;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 36 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\r\\n\\t * Compiles a querystring\\r\\n\\t * Returns string representation of the object\\r\\n\\t *\\r\\n\\t * @param {Object}\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\texports.encode = function (obj) {\\r\\n\\t  var str = '';\\r\\n\\r\\n\\t  for (var i in obj) {\\r\\n\\t    if (obj.hasOwnProperty(i)) {\\r\\n\\t      if (str.length) str += '&';\\r\\n\\t      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\\r\\n\\t    }\\r\\n\\t  }\\r\\n\\r\\n\\t  return str;\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Parses a simple querystring into an object\\r\\n\\t *\\r\\n\\t * @param {String} qs\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\texports.decode = function(qs){\\r\\n\\t  var qry = {};\\r\\n\\t  var pairs = qs.split('&');\\r\\n\\t  for (var i = 0, l = pairs.length; i < l; i++) {\\r\\n\\t    var pair = pairs[i].split('=');\\r\\n\\t    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\\r\\n\\t  }\\r\\n\\t  return qry;\\r\\n\\t};\\r\\n\\n\\n/***/ },\\n/* 37 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\tmodule.exports = function(a, b){\\n\\t  var fn = function(){};\\n\\t  fn.prototype = b.prototype;\\n\\t  a.prototype = new fn;\\n\\t  a.prototype.constructor = a;\\n\\t};\\n\\n/***/ },\\n/* 38 */\\n/***/ function(module, exports) {\\n\\n\\t'use strict';\\n\\n\\tvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\\n\\t  , length = 64\\n\\t  , map = {}\\n\\t  , seed = 0\\n\\t  , i = 0\\n\\t  , prev;\\n\\n\\t/**\\n\\t * Return a string representing the specified number.\\n\\t *\\n\\t * @param {Number} num The number to convert.\\n\\t * @returns {String} The string representation of the number.\\n\\t * @api public\\n\\t */\\n\\tfunction encode(num) {\\n\\t  var encoded = '';\\n\\n\\t  do {\\n\\t    encoded = alphabet[num % length] + encoded;\\n\\t    num = Math.floor(num / length);\\n\\t  } while (num > 0);\\n\\n\\t  return encoded;\\n\\t}\\n\\n\\t/**\\n\\t * Return the integer value specified by the given string.\\n\\t *\\n\\t * @param {String} str The string to convert.\\n\\t * @returns {Number} The integer value represented by the string.\\n\\t * @api public\\n\\t */\\n\\tfunction decode(str) {\\n\\t  var decoded = 0;\\n\\n\\t  for (i = 0; i < str.length; i++) {\\n\\t    decoded = decoded * length + map[str.charAt(i)];\\n\\t  }\\n\\n\\t  return decoded;\\n\\t}\\n\\n\\t/**\\n\\t * Yeast: A tiny growing id generator.\\n\\t *\\n\\t * @returns {String} A unique id.\\n\\t * @api public\\n\\t */\\n\\tfunction yeast() {\\n\\t  var now = encode(+new Date());\\n\\n\\t  if (now !== prev) return seed = 0, prev = now;\\n\\t  return now +'.'+ encode(seed++);\\n\\t}\\n\\n\\t//\\n\\t// Map each character to its index.\\n\\t//\\n\\tfor (; i < length; i++) map[alphabet[i]] = i;\\n\\n\\t//\\n\\t// Expose the `yeast`, `encode` and `decode` functions.\\n\\t//\\n\\tyeast.encode = encode;\\n\\tyeast.decode = decode;\\n\\tmodule.exports = yeast;\\n\\n\\n/***/ },\\n/* 39 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {\\n\\t/**\\n\\t * Module requirements.\\n\\t */\\n\\n\\tvar Polling = __webpack_require__(25);\\n\\tvar inherit = __webpack_require__(37);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = JSONPPolling;\\n\\n\\t/**\\n\\t * Cached regular expressions.\\n\\t */\\n\\n\\tvar rNewline = /\\\\n/g;\\n\\tvar rEscapedNewline = /\\\\\\\\n/g;\\n\\n\\t/**\\n\\t * Global JSONP callbacks.\\n\\t */\\n\\n\\tvar callbacks;\\n\\n\\t/**\\n\\t * Noop.\\n\\t */\\n\\n\\tfunction empty () { }\\n\\n\\t/**\\n\\t * JSONP Polling constructor.\\n\\t *\\n\\t * @param {Object} opts.\\n\\t * @api public\\n\\t */\\n\\n\\tfunction JSONPPolling (opts) {\\n\\t  Polling.call(this, opts);\\n\\n\\t  this.query = this.query || {};\\n\\n\\t  // define global callbacks array if not present\\n\\t  // we do this here (lazily) to avoid unneeded global pollution\\n\\t  if (!callbacks) {\\n\\t    // we need to consider multiple engines in the same page\\n\\t    if (!global.___eio) global.___eio = [];\\n\\t    callbacks = global.___eio;\\n\\t  }\\n\\n\\t  // callback identifier\\n\\t  this.index = callbacks.length;\\n\\n\\t  // add callback to jsonp global\\n\\t  var self = this;\\n\\t  callbacks.push(function (msg) {\\n\\t    self.onData(msg);\\n\\t  });\\n\\n\\t  // append to query string\\n\\t  this.query.j = this.index;\\n\\n\\t  // prevent spurious errors from being emitted when the window is unloaded\\n\\t  if (global.document && global.addEventListener) {\\n\\t    global.addEventListener('beforeunload', function () {\\n\\t      if (self.script) self.script.onerror = empty;\\n\\t    }, false);\\n\\t  }\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Polling.\\n\\t */\\n\\n\\tinherit(JSONPPolling, Polling);\\n\\n\\t/*\\n\\t * JSONP only supports binary as base64 encoded strings\\n\\t */\\n\\n\\tJSONPPolling.prototype.supportsBinary = false;\\n\\n\\t/**\\n\\t * Closes the socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doClose = function () {\\n\\t  if (this.script) {\\n\\t    this.script.parentNode.removeChild(this.script);\\n\\t    this.script = null;\\n\\t  }\\n\\n\\t  if (this.form) {\\n\\t    this.form.parentNode.removeChild(this.form);\\n\\t    this.form = null;\\n\\t    this.iframe = null;\\n\\t  }\\n\\n\\t  Polling.prototype.doClose.call(this);\\n\\t};\\n\\n\\t/**\\n\\t * Starts a poll cycle.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doPoll = function () {\\n\\t  var self = this;\\n\\t  var script = document.createElement('script');\\n\\n\\t  if (this.script) {\\n\\t    this.script.parentNode.removeChild(this.script);\\n\\t    this.script = null;\\n\\t  }\\n\\n\\t  script.async = true;\\n\\t  script.src = this.uri();\\n\\t  script.onerror = function (e) {\\n\\t    self.onError('jsonp poll error', e);\\n\\t  };\\n\\n\\t  var insertAt = document.getElementsByTagName('script')[0];\\n\\t  if (insertAt) {\\n\\t    insertAt.parentNode.insertBefore(script, insertAt);\\n\\t  } else {\\n\\t    (document.head || document.body).appendChild(script);\\n\\t  }\\n\\t  this.script = script;\\n\\n\\t  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\\n\\n\\t  if (isUAgecko) {\\n\\t    setTimeout(function () {\\n\\t      var iframe = document.createElement('iframe');\\n\\t      document.body.appendChild(iframe);\\n\\t      document.body.removeChild(iframe);\\n\\t    }, 100);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Writes with a hidden iframe.\\n\\t *\\n\\t * @param {String} data to send\\n\\t * @param {Function} called upon flush.\\n\\t * @api private\\n\\t */\\n\\n\\tJSONPPolling.prototype.doWrite = function (data, fn) {\\n\\t  var self = this;\\n\\n\\t  if (!this.form) {\\n\\t    var form = document.createElement('form');\\n\\t    var area = document.createElement('textarea');\\n\\t    var id = this.iframeId = 'eio_iframe_' + this.index;\\n\\t    var iframe;\\n\\n\\t    form.className = 'socketio';\\n\\t    form.style.position = 'absolute';\\n\\t    form.style.top = '-1000px';\\n\\t    form.style.left = '-1000px';\\n\\t    form.target = id;\\n\\t    form.method = 'POST';\\n\\t    form.setAttribute('accept-charset', 'utf-8');\\n\\t    area.name = 'd';\\n\\t    form.appendChild(area);\\n\\t    document.body.appendChild(form);\\n\\n\\t    this.form = form;\\n\\t    this.area = area;\\n\\t  }\\n\\n\\t  this.form.action = this.uri();\\n\\n\\t  function complete () {\\n\\t    initIframe();\\n\\t    fn();\\n\\t  }\\n\\n\\t  function initIframe () {\\n\\t    if (self.iframe) {\\n\\t      try {\\n\\t        self.form.removeChild(self.iframe);\\n\\t      } catch (e) {\\n\\t        self.onError('jsonp polling iframe removal error', e);\\n\\t      }\\n\\t    }\\n\\n\\t    try {\\n\\t      // ie6 dynamic iframes with target=\\\"\\\" support (thanks Chris Lambacher)\\n\\t      var html = '<iframe src=\\\"javascript:0\\\" name=\\\"' + self.iframeId + '\\\">';\\n\\t      iframe = document.createElement(html);\\n\\t    } catch (e) {\\n\\t      iframe = document.createElement('iframe');\\n\\t      iframe.name = self.iframeId;\\n\\t      iframe.src = 'javascript:0';\\n\\t    }\\n\\n\\t    iframe.id = self.iframeId;\\n\\n\\t    self.form.appendChild(iframe);\\n\\t    self.iframe = iframe;\\n\\t  }\\n\\n\\t  initIframe();\\n\\n\\t  // escape \\\\n to prevent it from being converted into \\\\r\\\\n by some UAs\\n\\t  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\\n\\t  data = data.replace(rEscapedNewline, '\\\\\\\\\\\\n');\\n\\t  this.area.value = data.replace(rNewline, '\\\\\\\\n');\\n\\n\\t  try {\\n\\t    this.form.submit();\\n\\t  } catch (e) {}\\n\\n\\t  if (this.iframe.attachEvent) {\\n\\t    this.iframe.onreadystatechange = function () {\\n\\t      if (self.iframe.readyState === 'complete') {\\n\\t        complete();\\n\\t      }\\n\\t    };\\n\\t  } else {\\n\\t    this.iframe.onload = complete;\\n\\t  }\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 40 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar Transport = __webpack_require__(26);\\n\\tvar parser = __webpack_require__(27);\\n\\tvar parseqs = __webpack_require__(36);\\n\\tvar inherit = __webpack_require__(37);\\n\\tvar yeast = __webpack_require__(38);\\n\\tvar debug = __webpack_require__(3)('engine.io-client:websocket');\\n\\tvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\\n\\tvar NodeWebSocket;\\n\\tif (typeof window === 'undefined') {\\n\\t  try {\\n\\t    NodeWebSocket = __webpack_require__(41);\\n\\t  } catch (e) { }\\n\\t}\\n\\n\\t/**\\n\\t * Get either the `WebSocket` or `MozWebSocket` globals\\n\\t * in the browser or try to resolve WebSocket-compatible\\n\\t * interface exposed by `ws` for Node-like environment.\\n\\t */\\n\\n\\tvar WebSocket = BrowserWebSocket;\\n\\tif (!WebSocket && typeof window === 'undefined') {\\n\\t  WebSocket = NodeWebSocket;\\n\\t}\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = WS;\\n\\n\\t/**\\n\\t * WebSocket transport constructor.\\n\\t *\\n\\t * @api {Object} connection options\\n\\t * @api public\\n\\t */\\n\\n\\tfunction WS (opts) {\\n\\t  var forceBase64 = (opts && opts.forceBase64);\\n\\t  if (forceBase64) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\t  this.perMessageDeflate = opts.perMessageDeflate;\\n\\t  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\\n\\t  if (!this.usingBrowserWebSocket) {\\n\\t    WebSocket = NodeWebSocket;\\n\\t  }\\n\\t  Transport.call(this, opts);\\n\\t}\\n\\n\\t/**\\n\\t * Inherits from Transport.\\n\\t */\\n\\n\\tinherit(WS, Transport);\\n\\n\\t/**\\n\\t * Transport name.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tWS.prototype.name = 'websocket';\\n\\n\\t/*\\n\\t * WebSockets support binary\\n\\t */\\n\\n\\tWS.prototype.supportsBinary = true;\\n\\n\\t/**\\n\\t * Opens socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.doOpen = function () {\\n\\t  if (!this.check()) {\\n\\t    // let probe timeout\\n\\t    return;\\n\\t  }\\n\\n\\t  var uri = this.uri();\\n\\t  var protocols = void (0);\\n\\t  var opts = {\\n\\t    agent: this.agent,\\n\\t    perMessageDeflate: this.perMessageDeflate\\n\\t  };\\n\\n\\t  // SSL options for Node.js client\\n\\t  opts.pfx = this.pfx;\\n\\t  opts.key = this.key;\\n\\t  opts.passphrase = this.passphrase;\\n\\t  opts.cert = this.cert;\\n\\t  opts.ca = this.ca;\\n\\t  opts.ciphers = this.ciphers;\\n\\t  opts.rejectUnauthorized = this.rejectUnauthorized;\\n\\t  if (this.extraHeaders) {\\n\\t    opts.headers = this.extraHeaders;\\n\\t  }\\n\\t  if (this.localAddress) {\\n\\t    opts.localAddress = this.localAddress;\\n\\t  }\\n\\n\\t  try {\\n\\t    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\\n\\t  } catch (err) {\\n\\t    return this.emit('error', err);\\n\\t  }\\n\\n\\t  if (this.ws.binaryType === undefined) {\\n\\t    this.supportsBinary = false;\\n\\t  }\\n\\n\\t  if (this.ws.supports && this.ws.supports.binary) {\\n\\t    this.supportsBinary = true;\\n\\t    this.ws.binaryType = 'nodebuffer';\\n\\t  } else {\\n\\t    this.ws.binaryType = 'arraybuffer';\\n\\t  }\\n\\n\\t  this.addEventListeners();\\n\\t};\\n\\n\\t/**\\n\\t * Adds event listeners to the socket\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.addEventListeners = function () {\\n\\t  var self = this;\\n\\n\\t  this.ws.onopen = function () {\\n\\t    self.onOpen();\\n\\t  };\\n\\t  this.ws.onclose = function () {\\n\\t    self.onClose();\\n\\t  };\\n\\t  this.ws.onmessage = function (ev) {\\n\\t    self.onData(ev.data);\\n\\t  };\\n\\t  this.ws.onerror = function (e) {\\n\\t    self.onError('websocket error', e);\\n\\t  };\\n\\t};\\n\\n\\t/**\\n\\t * Writes data to socket.\\n\\t *\\n\\t * @param {Array} array of packets.\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.write = function (packets) {\\n\\t  var self = this;\\n\\t  this.writable = false;\\n\\n\\t  // encodePacket efficient as it uses WS framing\\n\\t  // no need for encodePayload\\n\\t  var total = packets.length;\\n\\t  for (var i = 0, l = total; i < l; i++) {\\n\\t    (function (packet) {\\n\\t      parser.encodePacket(packet, self.supportsBinary, function (data) {\\n\\t        if (!self.usingBrowserWebSocket) {\\n\\t          // always create a new object (GH-437)\\n\\t          var opts = {};\\n\\t          if (packet.options) {\\n\\t            opts.compress = packet.options.compress;\\n\\t          }\\n\\n\\t          if (self.perMessageDeflate) {\\n\\t            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\\n\\t            if (len < self.perMessageDeflate.threshold) {\\n\\t              opts.compress = false;\\n\\t            }\\n\\t          }\\n\\t        }\\n\\n\\t        // Sometimes the websocket has already been closed but the browser didn't\\n\\t        // have a chance of informing us about it yet, in that case send will\\n\\t        // throw an error\\n\\t        try {\\n\\t          if (self.usingBrowserWebSocket) {\\n\\t            // TypeError is thrown when passing the second argument on Safari\\n\\t            self.ws.send(data);\\n\\t          } else {\\n\\t            self.ws.send(data, opts);\\n\\t          }\\n\\t        } catch (e) {\\n\\t          debug('websocket closed before onclose event');\\n\\t        }\\n\\n\\t        --total || done();\\n\\t      });\\n\\t    })(packets[i]);\\n\\t  }\\n\\n\\t  function done () {\\n\\t    self.emit('flush');\\n\\n\\t    // fake drain\\n\\t    // defer to next tick to allow Socket to clear writeBuffer\\n\\t    setTimeout(function () {\\n\\t      self.writable = true;\\n\\t      self.emit('drain');\\n\\t    }, 0);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon close\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.onClose = function () {\\n\\t  Transport.prototype.onClose.call(this);\\n\\t};\\n\\n\\t/**\\n\\t * Closes socket.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.doClose = function () {\\n\\t  if (typeof this.ws !== 'undefined') {\\n\\t    this.ws.close();\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Generates uri for connection.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tWS.prototype.uri = function () {\\n\\t  var query = this.query || {};\\n\\t  var schema = this.secure ? 'wss' : 'ws';\\n\\t  var port = '';\\n\\n\\t  // avoid port if default for schema\\n\\t  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\\n\\t    ('ws' === schema && Number(this.port) !== 80))) {\\n\\t    port = ':' + this.port;\\n\\t  }\\n\\n\\t  // append timestamp to URI\\n\\t  if (this.timestampRequests) {\\n\\t    query[this.timestampParam] = yeast();\\n\\t  }\\n\\n\\t  // communicate binary support capabilities\\n\\t  if (!this.supportsBinary) {\\n\\t    query.b64 = 1;\\n\\t  }\\n\\n\\t  query = parseqs.encode(query);\\n\\n\\t  // prepend ? to query\\n\\t  if (query.length) {\\n\\t    query = '?' + query;\\n\\t  }\\n\\n\\t  var ipv6 = this.hostname.indexOf(':') !== -1;\\n\\t  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\\n\\t};\\n\\n\\t/**\\n\\t * Feature detection for WebSocket.\\n\\t *\\n\\t * @return {Boolean} whether this transport is available.\\n\\t * @api public\\n\\t */\\n\\n\\tWS.prototype.check = function () {\\n\\t  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\\n\\t};\\n\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 41 */\\n/***/ function(module, exports) {\\n\\n\\t/* (ignored) */\\n\\n/***/ },\\n/* 42 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\tvar indexOf = [].indexOf;\\n\\n\\tmodule.exports = function(arr, obj){\\n\\t  if (indexOf) return arr.indexOf(obj);\\n\\t  for (var i = 0; i < arr.length; ++i) {\\n\\t    if (arr[i] === obj) return i;\\n\\t  }\\n\\t  return -1;\\n\\t};\\n\\n/***/ },\\n/* 43 */\\n/***/ function(module, exports) {\\n\\n\\t/* WEBPACK VAR INJECTION */(function(global) {/**\\r\\n\\t * JSON parse.\\r\\n\\t *\\r\\n\\t * @see Based on jQuery#parseJSON (MIT) and JSON2\\r\\n\\t * @api private\\r\\n\\t */\\r\\n\\r\\n\\tvar rvalidchars = /^[\\\\],:{}\\\\s]*$/;\\r\\n\\tvar rvalidescape = /\\\\\\\\(?:[\\\"\\\\\\\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\\r\\n\\tvar rvalidtokens = /\\\"[^\\\"\\\\\\\\\\\\n\\\\r]*\\\"|true|false|null|-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?/g;\\r\\n\\tvar rvalidbraces = /(?:^|:|,)(?:\\\\s*\\\\[)+/g;\\r\\n\\tvar rtrimLeft = /^\\\\s+/;\\r\\n\\tvar rtrimRight = /\\\\s+$/;\\r\\n\\r\\n\\tmodule.exports = function parsejson(data) {\\r\\n\\t  if ('string' != typeof data || !data) {\\r\\n\\t    return null;\\r\\n\\t  }\\r\\n\\r\\n\\t  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\\r\\n\\r\\n\\t  // Attempt to parse using the native JSON parser first\\r\\n\\t  if (global.JSON && JSON.parse) {\\r\\n\\t    return JSON.parse(data);\\r\\n\\t  }\\r\\n\\r\\n\\t  if (rvalidchars.test(data.replace(rvalidescape, '@')\\r\\n\\t      .replace(rvalidtokens, ']')\\r\\n\\t      .replace(rvalidbraces, ''))) {\\r\\n\\t    return (new Function('return ' + data))();\\r\\n\\t  }\\r\\n\\t};\\n\\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\\n\\n/***/ },\\n/* 44 */\\n/***/ function(module, exports, __webpack_require__) {\\n\\n\\t'use strict';\\n\\n\\t/**\\n\\t * Module dependencies.\\n\\t */\\n\\n\\tvar parser = __webpack_require__(7);\\n\\tvar Emitter = __webpack_require__(35);\\n\\tvar toArray = __webpack_require__(45);\\n\\tvar on = __webpack_require__(46);\\n\\tvar bind = __webpack_require__(47);\\n\\tvar debug = __webpack_require__(3)('socket.io-client:socket');\\n\\tvar hasBin = __webpack_require__(29);\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = exports = Socket;\\n\\n\\t/**\\n\\t * Internal events (blacklisted).\\n\\t * These events can't be emitted by the user.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tvar events = {\\n\\t  connect: 1,\\n\\t  connect_error: 1,\\n\\t  connect_timeout: 1,\\n\\t  connecting: 1,\\n\\t  disconnect: 1,\\n\\t  error: 1,\\n\\t  reconnect: 1,\\n\\t  reconnect_attempt: 1,\\n\\t  reconnect_failed: 1,\\n\\t  reconnect_error: 1,\\n\\t  reconnecting: 1,\\n\\t  ping: 1,\\n\\t  pong: 1\\n\\t};\\n\\n\\t/**\\n\\t * Shortcut to `Emitter#emit`.\\n\\t */\\n\\n\\tvar emit = Emitter.prototype.emit;\\n\\n\\t/**\\n\\t * `Socket` constructor.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Socket(io, nsp, opts) {\\n\\t  this.io = io;\\n\\t  this.nsp = nsp;\\n\\t  this.json = this; // compat\\n\\t  this.ids = 0;\\n\\t  this.acks = {};\\n\\t  this.receiveBuffer = [];\\n\\t  this.sendBuffer = [];\\n\\t  this.connected = false;\\n\\t  this.disconnected = true;\\n\\t  if (opts && opts.query) {\\n\\t    this.query = opts.query;\\n\\t  }\\n\\t  if (this.io.autoConnect) this.open();\\n\\t}\\n\\n\\t/**\\n\\t * Mix in `Emitter`.\\n\\t */\\n\\n\\tEmitter(Socket.prototype);\\n\\n\\t/**\\n\\t * Subscribe to open, close and packet events\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.subEvents = function () {\\n\\t  if (this.subs) return;\\n\\n\\t  var io = this.io;\\n\\t  this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];\\n\\t};\\n\\n\\t/**\\n\\t * \\\"Opens\\\" the socket.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.open = Socket.prototype.connect = function () {\\n\\t  if (this.connected) return this;\\n\\n\\t  this.subEvents();\\n\\t  this.io.open(); // ensure open\\n\\t  if ('open' === this.io.readyState) this.onopen();\\n\\t  this.emit('connecting');\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a `message` event.\\n\\t *\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.send = function () {\\n\\t  var args = toArray(arguments);\\n\\t  args.unshift('message');\\n\\t  this.emit.apply(this, args);\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Override `emit`.\\n\\t * If the event is in `events`, it's emitted normally.\\n\\t *\\n\\t * @param {String} event name\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.emit = function (ev) {\\n\\t  if (events.hasOwnProperty(ev)) {\\n\\t    emit.apply(this, arguments);\\n\\t    return this;\\n\\t  }\\n\\n\\t  var args = toArray(arguments);\\n\\t  var parserType = parser.EVENT; // default\\n\\t  if (hasBin(args)) {\\n\\t    parserType = parser.BINARY_EVENT;\\n\\t  } // binary\\n\\t  var packet = { type: parserType, data: args };\\n\\n\\t  packet.options = {};\\n\\t  packet.options.compress = !this.flags || false !== this.flags.compress;\\n\\n\\t  // event ack callback\\n\\t  if ('function' === typeof args[args.length - 1]) {\\n\\t    debug('emitting packet with ack id %d', this.ids);\\n\\t    this.acks[this.ids] = args.pop();\\n\\t    packet.id = this.ids++;\\n\\t  }\\n\\n\\t  if (this.connected) {\\n\\t    this.packet(packet);\\n\\t  } else {\\n\\t    this.sendBuffer.push(packet);\\n\\t  }\\n\\n\\t  delete this.flags;\\n\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sends a packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.packet = function (packet) {\\n\\t  packet.nsp = this.nsp;\\n\\t  this.io.packet(packet);\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine `open`.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onopen = function () {\\n\\t  debug('transport is open - connecting');\\n\\n\\t  // write connect packet if necessary\\n\\t  if ('/' !== this.nsp) {\\n\\t    if (this.query) {\\n\\t      this.packet({ type: parser.CONNECT, query: this.query });\\n\\t    } else {\\n\\t      this.packet({ type: parser.CONNECT });\\n\\t    }\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon engine `close`.\\n\\t *\\n\\t * @param {String} reason\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onclose = function (reason) {\\n\\t  debug('close (%s)', reason);\\n\\t  this.connected = false;\\n\\t  this.disconnected = true;\\n\\t  delete this.id;\\n\\t  this.emit('disconnect', reason);\\n\\t};\\n\\n\\t/**\\n\\t * Called with socket packet.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onpacket = function (packet) {\\n\\t  if (packet.nsp !== this.nsp) return;\\n\\n\\t  switch (packet.type) {\\n\\t    case parser.CONNECT:\\n\\t      this.onconnect();\\n\\t      break;\\n\\n\\t    case parser.EVENT:\\n\\t      this.onevent(packet);\\n\\t      break;\\n\\n\\t    case parser.BINARY_EVENT:\\n\\t      this.onevent(packet);\\n\\t      break;\\n\\n\\t    case parser.ACK:\\n\\t      this.onack(packet);\\n\\t      break;\\n\\n\\t    case parser.BINARY_ACK:\\n\\t      this.onack(packet);\\n\\t      break;\\n\\n\\t    case parser.DISCONNECT:\\n\\t      this.ondisconnect();\\n\\t      break;\\n\\n\\t    case parser.ERROR:\\n\\t      this.emit('error', packet.data);\\n\\t      break;\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a server event.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onevent = function (packet) {\\n\\t  var args = packet.data || [];\\n\\t  debug('emitting event %j', args);\\n\\n\\t  if (null != packet.id) {\\n\\t    debug('attaching ack callback to event');\\n\\t    args.push(this.ack(packet.id));\\n\\t  }\\n\\n\\t  if (this.connected) {\\n\\t    emit.apply(this, args);\\n\\t  } else {\\n\\t    this.receiveBuffer.push(args);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Produces an ack callback to emit with an event.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.ack = function (id) {\\n\\t  var self = this;\\n\\t  var sent = false;\\n\\t  return function () {\\n\\t    // prevent double callbacks\\n\\t    if (sent) return;\\n\\t    sent = true;\\n\\t    var args = toArray(arguments);\\n\\t    debug('sending ack %j', args);\\n\\n\\t    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\\n\\t    self.packet({\\n\\t      type: type,\\n\\t      id: id,\\n\\t      data: args\\n\\t    });\\n\\t  };\\n\\t};\\n\\n\\t/**\\n\\t * Called upon a server acknowlegement.\\n\\t *\\n\\t * @param {Object} packet\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onack = function (packet) {\\n\\t  var ack = this.acks[packet.id];\\n\\t  if ('function' === typeof ack) {\\n\\t    debug('calling ack %s with %j', packet.id, packet.data);\\n\\t    ack.apply(this, packet.data);\\n\\t    delete this.acks[packet.id];\\n\\t  } else {\\n\\t    debug('bad ack %s', packet.id);\\n\\t  }\\n\\t};\\n\\n\\t/**\\n\\t * Called upon server connect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.onconnect = function () {\\n\\t  this.connected = true;\\n\\t  this.disconnected = false;\\n\\t  this.emit('connect');\\n\\t  this.emitBuffered();\\n\\t};\\n\\n\\t/**\\n\\t * Emit buffered events (received and emitted).\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.emitBuffered = function () {\\n\\t  var i;\\n\\t  for (i = 0; i < this.receiveBuffer.length; i++) {\\n\\t    emit.apply(this, this.receiveBuffer[i]);\\n\\t  }\\n\\t  this.receiveBuffer = [];\\n\\n\\t  for (i = 0; i < this.sendBuffer.length; i++) {\\n\\t    this.packet(this.sendBuffer[i]);\\n\\t  }\\n\\t  this.sendBuffer = [];\\n\\t};\\n\\n\\t/**\\n\\t * Called upon server disconnect.\\n\\t *\\n\\t * @api private\\n\\t */\\n\\n\\tSocket.prototype.ondisconnect = function () {\\n\\t  debug('server disconnect (%s)', this.nsp);\\n\\t  this.destroy();\\n\\t  this.onclose('io server disconnect');\\n\\t};\\n\\n\\t/**\\n\\t * Called upon forced client/server side disconnections,\\n\\t * this method ensures the manager stops tracking us and\\n\\t * that reconnections don't get triggered for this.\\n\\t *\\n\\t * @api private.\\n\\t */\\n\\n\\tSocket.prototype.destroy = function () {\\n\\t  if (this.subs) {\\n\\t    // clean subscriptions to avoid reconnections\\n\\t    for (var i = 0; i < this.subs.length; i++) {\\n\\t      this.subs[i].destroy();\\n\\t    }\\n\\t    this.subs = null;\\n\\t  }\\n\\n\\t  this.io.destroy(this);\\n\\t};\\n\\n\\t/**\\n\\t * Disconnects the socket manually.\\n\\t *\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.close = Socket.prototype.disconnect = function () {\\n\\t  if (this.connected) {\\n\\t    debug('performing disconnect (%s)', this.nsp);\\n\\t    this.packet({ type: parser.DISCONNECT });\\n\\t  }\\n\\n\\t  // remove socket from pool\\n\\t  this.destroy();\\n\\n\\t  if (this.connected) {\\n\\t    // fire events\\n\\t    this.onclose('io client disconnect');\\n\\t  }\\n\\t  return this;\\n\\t};\\n\\n\\t/**\\n\\t * Sets the compress flag.\\n\\t *\\n\\t * @param {Boolean} if `true`, compresses the sending data\\n\\t * @return {Socket} self\\n\\t * @api public\\n\\t */\\n\\n\\tSocket.prototype.compress = function (compress) {\\n\\t  this.flags = this.flags || {};\\n\\t  this.flags.compress = compress;\\n\\t  return this;\\n\\t};\\n\\n/***/ },\\n/* 45 */\\n/***/ function(module, exports) {\\n\\n\\tmodule.exports = toArray\\n\\n\\tfunction toArray(list, index) {\\n\\t    var array = []\\n\\n\\t    index = index || 0\\n\\n\\t    for (var i = index || 0; i < list.length; i++) {\\n\\t        array[i - index] = list[i]\\n\\t    }\\n\\n\\t    return array\\n\\t}\\n\\n\\n/***/ },\\n/* 46 */\\n/***/ function(module, exports) {\\n\\n\\t\\\"use strict\\\";\\n\\n\\t/**\\n\\t * Module exports.\\n\\t */\\n\\n\\tmodule.exports = on;\\n\\n\\t/**\\n\\t * Helper for subscriptions.\\n\\t *\\n\\t * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\\n\\t * @param {String} event name\\n\\t * @param {Function} callback\\n\\t * @api public\\n\\t */\\n\\n\\tfunction on(obj, ev, fn) {\\n\\t  obj.on(ev, fn);\\n\\t  return {\\n\\t    destroy: function destroy() {\\n\\t      obj.removeListener(ev, fn);\\n\\t    }\\n\\t  };\\n\\t\\t}\\n\\n/***/ },\\n/* 47 */\\n/***/ function(module, exports) {\\n\\n\\t/**\\n\\t * Slice reference.\\n\\t */\\n\\n\\tvar slice = [].slice;\\n\\n\\t/**\\n\\t * Bind `obj` to `fn`.\\n\\t *\\n\\t * @param {Object} obj\\n\\t * @param {Function|String} fn or string\\n\\t * @return {Function}\\n\\t * @api public\\n\\t */\\n\\n\\tmodule.exports = function(obj, fn){\\n\\t  if ('string' == typeof fn) fn = obj[fn];\\n\\t  if ('function' != typeof fn) throw new Error('bind() requires a function');\\n\\t  var args = slice.call(arguments, 2);\\n\\t  return function(){\\n\\t    return fn.apply(obj, args.concat(slice.call(arguments)));\\n\\t  }\\n\\t};\\n\\n\\n/***/ },\\n/* 48 */\\n/***/ function(module, exports) {\\n\\n\\t\\n\\t/**\\n\\t * Expose `Backoff`.\\n\\t */\\n\\n\\tmodule.exports = Backoff;\\n\\n\\t/**\\n\\t * Initialize backoff timer with `opts`.\\n\\t *\\n\\t * - `min` initial timeout in milliseconds [100]\\n\\t * - `max` max timeout [10000]\\n\\t * - `jitter` [0]\\n\\t * - `factor` [2]\\n\\t *\\n\\t * @param {Object} opts\\n\\t * @api public\\n\\t */\\n\\n\\tfunction Backoff(opts) {\\n\\t  opts = opts || {};\\n\\t  this.ms = opts.min || 100;\\n\\t  this.max = opts.max || 10000;\\n\\t  this.factor = opts.factor || 2;\\n\\t  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\\n\\t  this.attempts = 0;\\n\\t}\\n\\n\\t/**\\n\\t * Return the backoff duration.\\n\\t *\\n\\t * @return {Number}\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.duration = function(){\\n\\t  var ms = this.ms * Math.pow(this.factor, this.attempts++);\\n\\t  if (this.jitter) {\\n\\t    var rand =  Math.random();\\n\\t    var deviation = Math.floor(rand * this.jitter * ms);\\n\\t    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\\n\\t  }\\n\\t  return Math.min(ms, this.max) | 0;\\n\\t};\\n\\n\\t/**\\n\\t * Reset the number of attempts.\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.reset = function(){\\n\\t  this.attempts = 0;\\n\\t};\\n\\n\\t/**\\n\\t * Set the minimum duration\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setMin = function(min){\\n\\t  this.ms = min;\\n\\t};\\n\\n\\t/**\\n\\t * Set the maximum duration\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setMax = function(max){\\n\\t  this.max = max;\\n\\t};\\n\\n\\t/**\\n\\t * Set the jitter\\n\\t *\\n\\t * @api public\\n\\t */\\n\\n\\tBackoff.prototype.setJitter = function(jitter){\\n\\t  this.jitter = jitter;\\n\\t};\\n\\n\\n\\n/***/ }\\n/******/ ])\\n});\\n;\\n//# sourceMappingURL=socket.io.js.map\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./~/socket.io-client/dist/socket.io.js\n// module id = 719\n// module chunks = 1","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader/addScript.js\n// module id = 734\n// module chunks = 1"],"sourceRoot":""}